"""
–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
"""

import json
import time
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any, List
import threading

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QPushButton, QLabel,
    QLineEdit, QTextEdit, QSpinBox, QDoubleSpinBox,
    QTableWidget, QTableWidgetItem, QHeaderView,
    QMessageBox, QComboBox, QCheckBox, QWidget,
    QFormLayout, QGridLayout, QRadioButton, QButtonGroup
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, QTimer
from PyQt5.QtGui import QFont

from web3 import Web3
from eth_account import Account
from eth_typing import HexStr, HexAddress

from .base_tab import BaseTab
from ...utils.logger import get_logger

logger = get_logger(__name__)

try:
    from mnemonic import Mnemonic
except ImportError:
    Mnemonic = None
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: pip install mnemonic")

# –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ BSC
CONTRACTS = {
    'PLEX_ONE': '0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1',
    'USDT': '0x55d398326f99059ff775485246999027b3197955',
    'PANCAKE_ROUTER': '0x10ED43C718714eb63d5aA57B78B54704E256024E',
    'WBNB': '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'
}

# ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
ERC20_ABI = json.loads('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]')

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è PancakeSwap Router
PANCAKE_ROUTER_ABI = json.loads('[{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"}]')


class AutoBuyTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    balance_updated = pyqtSignal(dict)
    purchase_completed = pyqtSignal(dict)
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.web3 = None
        self.account = None
        self.is_buying = False
        self.buy_thread = None
        self.balances = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.balance_timer = QTimer()
        self.balance_timer.timeout.connect(self.update_balances)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.balance_updated.connect(self._update_balance_display)
        self.purchase_completed.connect(self._handle_purchase_completed)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        self._init_web3()
        
        logger.info("–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def _init_web3(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # BSC Mainnet RPC
            rpc_url = 'https://bsc-dataseed.binance.org/'
            self.web3 = Web3(Web3.HTTPProvider(rpc_url))
            
            if self.web3.is_connected():
                self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "SUCCESS")
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC", "ERROR")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3: {str(e)}", "ERROR")
            
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        layout.addWidget(title)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_group = self._create_wallet_group()
        layout.addWidget(wallet_group)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        balance_group = self._create_balance_group()
        layout.addWidget(balance_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∫–∏
        buy_settings_group = self._create_buy_settings_group()
        layout.addWidget(buy_settings_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞
        gas_group = self.create_gas_settings_group()
        layout.addWidget(gas_group)
        
        # –ì—Ä—É–ø–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∞–º–∏
        control_group = self._create_control_group()
        layout.addWidget(control_group)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        log_group = self._create_log_group()
        layout.addWidget(log_group)
        
    def _create_wallet_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        group = QGroupBox("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞")
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_type_layout = QHBoxLayout()
        self.seed_radio = QRadioButton("SEED —Ñ—Ä–∞–∑–∞")
        self.private_key_radio = QRadioButton("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        self.seed_radio.setChecked(True)
        
        self.button_group = QButtonGroup()
        self.button_group.addButton(self.seed_radio)
        self.button_group.addButton(self.private_key_radio)
        
        connect_type_layout.addWidget(self.seed_radio)
        connect_type_layout.addWidget(self.private_key_radio)
        connect_type_layout.addStretch()
        layout.addLayout(connect_type_layout)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ seed/private key
        self.wallet_input = QTextEdit()
        self.wallet_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ SEED —Ñ—Ä–∞–∑—É (12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞) –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...")
        self.wallet_input.setMaximumHeight(60)
        layout.addWidget(self.wallet_input)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.connect_btn = QPushButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
        self.connect_btn.clicked.connect(self.connect_wallet)
        button_layout.addWidget(self.connect_btn)
        
        self.disconnect_btn = QPushButton("üîå –û—Ç–∫–ª—é—á–∏—Ç—å")
        self.disconnect_btn.clicked.connect(self.disconnect_wallet)
        self.disconnect_btn.setEnabled(False)
        button_layout.addWidget(self.disconnect_btn)
        
        layout.addLayout(button_layout)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_address_label = QLabel("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.wallet_address_label.setFont(QFont("Consolas", 10))
        layout.addWidget(self.wallet_address_label)
        
        group.setLayout(layout)
        return group
        
    def _create_balance_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        group = QGroupBox("–ë–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤")
        layout = QGridLayout()
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
        layout.addWidget(QLabel("BNB:"), 0, 0)
        self.bnb_balance_label = QLabel("0.0")
        self.bnb_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.bnb_balance_label, 0, 1)
        
        layout.addWidget(QLabel("PLEX ONE:"), 1, 0)
        self.plex_balance_label = QLabel("0.0")
        self.plex_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.plex_balance_label, 1, 1)
        
        layout.addWidget(QLabel("USDT:"), 2, 0)
        self.usdt_balance_label = QLabel("0.0")
        self.usdt_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.usdt_balance_label, 2, 1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        self.refresh_btn.clicked.connect(self.update_balances)
        self.refresh_btn.setEnabled(False)
        layout.addWidget(self.refresh_btn, 3, 0, 1, 2)
        
        # –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.auto_refresh_cb = QCheckBox("–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫")
        self.auto_refresh_cb.toggled.connect(self._toggle_auto_refresh)
        layout.addWidget(self.auto_refresh_cb, 4, 0, 1, 2)
        
        group.setLayout(layout)
        return group
        
    def _create_buy_settings_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∫–∏"""
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫")
        layout = QFormLayout()
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        self.token_combo = QComboBox()
        self.token_combo.addItems(['PLEX ONE', 'USDT', '–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω'])
        layout.addRow("–¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", self.token_combo)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.custom_token_input.setEnabled(False)
        layout.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", self.custom_token_input)
        
        # –í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (—á–µ–º –ø–æ–∫—É–ø–∞–µ–º)
        self.buy_with_combo = QComboBox()
        self.buy_with_combo.addItems(['BNB', 'USDT'])
        layout.addRow("–ü–æ–∫—É–ø–∞—Ç—å –∑–∞:", self.buy_with_combo)
        
        # –°—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        self.buy_amount_input = QDoubleSpinBox()
        self.buy_amount_input.setRange(0.001, 10000)
        self.buy_amount_input.setDecimals(6)
        self.buy_amount_input.setValue(0.01)  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.1 –¥–æ 0.01 BNB –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        layout.addRow("–°—É–º–º–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:", self.buy_amount_input)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
        self.interval_input = QSpinBox()
        self.interval_input.setRange(1, 86400)  # –æ—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ 24 —á–∞—Å–æ–≤
        self.interval_input.setValue(60)  # 1 –º–∏–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):", self.interval_input)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
        self.max_buys_input = QSpinBox()
        self.max_buys_input.setRange(1, 1000)
        self.max_buys_input.setValue(10)
        layout.addRow("–ú–∞–∫—Å–∏–º—É–º –ø–æ–∫—É–ø–æ–∫:", self.max_buys_input)
        
        # Slippage tolerance
        self.slippage_input = QDoubleSpinBox()
        self.slippage_input.setRange(0.1, 50.0)
        self.slippage_input.setDecimals(1)
        self.slippage_input.setValue(5.0)
        layout.addRow("Slippage (%):", self.slippage_input)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
        self.token_combo.currentTextChanged.connect(self._on_token_changed)
        
        group.setLayout(layout)
        return group
        
    def _create_control_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∞–º–∏"""
        group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∞–º–∏")
        layout = QVBoxLayout()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QGridLayout()
        
        stats_layout.addWidget(QLabel("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫:"), 0, 0)
        self.completed_buys_label = QLabel("0")
        self.completed_buys_label.setFont(QFont("Arial", 11, QFont.Bold))
        stats_layout.addWidget(self.completed_buys_label, 0, 1)
        
        stats_layout.addWidget(QLabel("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:"), 1, 0)
        self.spent_amount_label = QLabel("0.0")
        self.spent_amount_label.setFont(QFont("Arial", 11, QFont.Bold))
        stats_layout.addWidget(self.spent_amount_label, 1, 1)
        
        stats_layout.addWidget(QLabel("–ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:"), 2, 0)
        self.bought_tokens_label = QLabel("0.0")
        self.bought_tokens_label.setFont(QFont("Arial", 11, QFont.Bold))
        stats_layout.addWidget(self.bought_tokens_label, 2, 1)
        
        layout.addLayout(stats_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("üõí –ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏")
        self.start_btn.clicked.connect(self.start_auto_buy)
        self.start_btn.setEnabled(False)
        button_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.clicked.connect(self.stop_auto_buy)
        self.stop_btn.setEnabled(False)
        button_layout.addWidget(self.stop_btn)
        
        self.reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        self.reset_btn.clicked.connect(self.reset_stats)
        button_layout.addWidget(self.reset_btn)
        
        layout.addLayout(button_layout)
        
        group.setLayout(layout)
        return group
        
    def _create_log_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ª–æ–≥–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        group = QGroupBox("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
        layout = QVBoxLayout()
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumHeight(200)
        layout.addWidget(self.log_text)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥")
        clear_btn.clicked.connect(self.clear_log)
        layout.addWidget(clear_btn)
        
        group.setLayout(layout)
        return group
        
    def _on_token_changed(self, token: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        self.custom_token_input.setEnabled(token == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω")
        
    def connect_wallet(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        wallet_data = self.wallet_input.toPlainText().strip()
        
        if not wallet_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ SEED —Ñ—Ä–∞–∑—É!")
            return
            
        try:
            if self.seed_radio.isChecked():
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ SEED —Ñ—Ä–∞–∑—ã
                if Mnemonic is None:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mnemonic")
                    return
                    
                words = wallet_data.split()
                if len(words) not in [12, 24]:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "SEED —Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞!")
                    return
                    
                mnemo = Mnemonic("english")
                if not mnemo.check(wallet_data):
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω–∞—è SEED —Ñ—Ä–∞–∑–∞!")
                    return
                    
                seed = mnemo.to_seed(wallet_data)
                private_key = seed[:32].hex()
                self.account = Account.from_key(private_key)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
                private_key = wallet_data
                if private_key.startswith('0x'):
                    private_key = private_key[2:]
                    
                self.account = Account.from_key(private_key)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.wallet_address_label.setText(f"–ê–¥—Ä–µ—Å: {self.account.address}")
            self.connect_btn.setEnabled(False)
            self.disconnect_btn.setEnabled(True)
            self.refresh_btn.setEnabled(True)
            self.start_btn.setEnabled(True)
            
            self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            self.update_balances()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫: {str(e)}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {str(e)}", "ERROR")
            
    def disconnect_wallet(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        self.account = None
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –µ—Å–ª–∏ –∏–¥—É—Ç
        if self.is_buying:
            self.stop_auto_buy()
            
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.wallet_input.clear()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.wallet_address_label.setText("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.connect_btn.setEnabled(True)
        self.disconnect_btn.setEnabled(False)
        self.refresh_btn.setEnabled(False)
        self.start_btn.setEnabled(False)
        
        # –û—á–∏—â–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        self.bnb_balance_label.setText("0.0")
        self.plex_balance_label.setText("0.0")
        self.usdt_balance_label.setText("0.0")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.balance_timer.stop()
        self.auto_refresh_cb.setChecked(False)
        
        self.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω", "INFO")
        
    def update_balances(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤"""
        if not self.account or not self.web3:
            return
            
        try:
            address = self.account.address
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å BNB
            bnb_balance_wei = self.web3.eth.get_balance(address)
            bnb_balance = self.web3.from_wei(bnb_balance_wei, 'ether')
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å PLEX ONE
            try:
                plex_contract = self.web3.eth.contract(
                    address=Web3.to_checksum_address(CONTRACTS['PLEX_ONE']),
                    abi=ERC20_ABI
                )
                plex_balance_raw = plex_contract.functions.balanceOf(address).call()
                plex_decimals = plex_contract.functions.decimals().call()
                plex_balance = plex_balance_raw / (10 ** plex_decimals)
            except Exception as e:
                plex_balance = 0.0
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ PLEX: {str(e)}", "WARNING")
                
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            try:
                usdt_contract = self.web3.eth.contract(
                    address=Web3.to_checksum_address(CONTRACTS['USDT']),
                    abi=ERC20_ABI
                )
                usdt_balance_raw = usdt_contract.functions.balanceOf(address).call()
                usdt_decimals = usdt_contract.functions.decimals().call()
                usdt_balance = usdt_balance_raw / (10 ** usdt_decimals)
            except Exception as e:
                usdt_balance = 0.0
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {str(e)}", "WARNING")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            self.balances = {
                'bnb': float(bnb_balance),
                'plex': float(plex_balance),
                'usdt': float(usdt_balance)
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            self.balance_updated.emit(self.balances)
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}", "ERROR")
            
    def _update_balance_display(self, balances: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        self.bnb_balance_label.setText(f"{balances.get('bnb', 0):.6f}")
        self.plex_balance_label.setText(f"{balances.get('plex', 0):.2f}")
        self.usdt_balance_label.setText(f"{balances.get('usdt', 0):.2f}")
        
    def _toggle_auto_refresh(self, enabled: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        if enabled and self.account:
            self.balance_timer.start(30000)  # 30 —Å–µ–∫—É–Ω–¥
            self.log("‚úÖ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ", "INFO")
        else:
            self.balance_timer.stop()
            self.log("üîÑ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ", "INFO")
            
    def start_auto_buy(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
            
        if self.is_buying:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∫—É–ø–∫–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã!")
            return
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self._validate_buy_settings():
            return
            
        self.is_buying = True
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ–∫—É–ø–æ–∫
        self.buy_thread = threading.Thread(target=self._buy_worker, daemon=True)
        self.buy_thread.start()
        
        self.log("üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã", "SUCCESS")
        
    def stop_auto_buy(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫"""
        self.is_buying = False
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        
        self.log("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "WARNING")
        
    def _validate_buy_settings(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if self.token_combo.currentText() == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω":
            custom_token = self.custom_token_input.text().strip()
            if not custom_token or not Web3.is_address(custom_token):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        buy_with = self.buy_with_combo.currentText()
        amount = self.buy_amount_input.value()
        
        if buy_with == "BNB" and self.balances.get('bnb', 0) < amount:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            return False
        elif buy_with == "USDT" and self.balances.get('usdt', 0) < amount:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            return False
            
        return True
        
    def _buy_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫"""
        completed_buys = 0
        max_buys = self.max_buys_input.value()
        interval = self.interval_input.value()
        
        while self.is_buying and completed_buys < max_buys:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
                result = self._execute_buy()
                
                if result['success']:
                    completed_buys += 1
                    self.purchase_completed.emit({
                        'buy_number': completed_buys,
                        'tx_hash': result.get('tx_hash', ''),
                        'amount_spent': result.get('amount_spent', 0),
                        'tokens_bought': result.get('tokens_bought', 0)
                    })
                    
                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if self.is_buying and completed_buys < max_buys:
                    time.sleep(interval)
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏: {str(e)}", "ERROR")
                time.sleep(interval)
                
        # –ü–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if self.is_buying:
            self.is_buying = False
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.log(f"üèÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_buys}/{max_buys}", "SUCCESS")
            
    def _execute_buy(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ PancakeSwap"""
        try:
            if not self.account or not self.web3:
                return {
                    'success': False,
                    'error': '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏
            buy_amount = self.buy_amount_input.value()
            buy_with = self.buy_with_combo.currentText()  # –í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (BNB –∏–ª–∏ USDT)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.log(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É: –°—É–º–º–∞ {buy_amount}, –í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã: {buy_with}", "INFO")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            selected_token = self.token_combo.currentText()
            self.log(f"üõí –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {selected_token}", "INFO")
            
            if selected_token == 'PLEX ONE':
                token_address = CONTRACTS['PLEX_ONE']
                self.log(f"üìã –ê–¥—Ä–µ—Å PLEX ONE: {token_address}", "INFO")
            elif selected_token == 'USDT':
                token_address = CONTRACTS['USDT']
                self.log(f"üìã –ê–¥—Ä–µ—Å USDT: {token_address}", "INFO")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω
                token_address = self.custom_token_input.text().strip()
                self.log(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}", "INFO")
                if not token_address or not Web3.is_address(token_address):
                    self.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞", "ERROR")
                    return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ–∫—É–ø–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–º –ø–ª–∞—Ç–∏–º
            if buy_with == 'USDT' and selected_token == 'USDT':
                self.log("‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å USDT –∑–∞ USDT", "ERROR")
                return {'success': False, 'error': '–ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–º –ø–ª–∞—Ç–∏—Ç–µ'}
            
            self.log(f"üõí –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ {selected_token} –∑–∞ {buy_with} —á–µ—Ä–µ–∑ PancakeSwap...", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç PancakeSwap Router
            router_address = Web3.to_checksum_address('0x10ED43C718714eb63d5aA57B78B54704E256024E')
            self.log(f"üìã PancakeSwap Router: {router_address}", "INFO")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            deadline = int(time.time()) + 300  # 5 –º–∏–Ω—É—Ç
            
            if buy_with == 'BNB':
                self.log("üí∞ –†–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏: BNB -> Token (swapExactETHForTokens)", "INFO")
                # –ü–æ–∫—É–ø–∫–∞ –∑–∞ BNB (ETH -> Token)
                router_abi = [
                    {
                        "inputs": [
                            {"internalType": "uint256", "name": "amountOutMin", "type": "uint256"},
                            {"internalType": "address[]", "name": "path", "type": "address[]"},
                            {"internalType": "address", "name": "to", "type": "address"},
                            {"internalType": "uint256", "name": "deadline", "type": "uint256"}
                        ],
                        "name": "swapExactETHForTokens",
                        "outputs": [{"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}],
                        "stateMutability": "payable",
                        "type": "function"
                    }
                ]
                
                router_contract = self.web3.eth.contract(
                    address=router_address,
                    abi=router_abi
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –æ–±–º–µ–Ω–∞: BNB -> Token
                path = [
                    Web3.to_checksum_address('0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'),  # WBNB
                    Web3.to_checksum_address(token_address)
                ]
                self.log(f"üîÑ –ü—É—Ç—å –æ–±–º–µ–Ω–∞: WBNB -> {selected_token}", "INFO")
                
                amount_wei = self.web3.to_wei(buy_amount, 'ether')
                self.log(f"üí∞ –°—É–º–º–∞ –≤ wei: {amount_wei} ({buy_amount} BNB)", "INFO")
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = router_contract.functions.swapExactETHForTokens(
                    0,  # amountOutMin = 0 (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'value': amount_wei,
                    'gas': self.get_gas_limit(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address)
                })
                
            else:  # buy_with == 'USDT'
                self.log("üíµ –†–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏: USDT -> Token (approve + swapExactTokensForTokens)", "INFO")
                # –ü–æ–∫—É–ø–∫–∞ –∑–∞ USDT (Token -> Token)
                
                # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å approve –¥–ª—è USDT
                usdt_address = Web3.to_checksum_address(CONTRACTS['USDT'])
                self.log(f"üìã USDT –∞–¥—Ä–µ—Å: {usdt_address}", "INFO")
                erc20_abi = json.loads('[{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]')
                
                usdt_contract = self.web3.eth.contract(address=usdt_address, abi=erc20_abi)
                amount_in_units = int(buy_amount * (10 ** 18))
                
                # Approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                self.log("üìù –î–µ–ª–∞–µ–º approve –¥–ª—è USDT...", "INFO")
                approve_tx = usdt_contract.functions.approve(
                    router_address,
                    amount_in_units
                ).build_transaction({
                    'from': self.account.address,
                    'gas': self.get_gas_limit(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address)
                })
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º approve
                signed_approve = self.web3.eth.account.sign_transaction(approve_tx, self.account.key)
                approve_hash = self.web3.eth.send_raw_transaction(signed_approve.rawTransaction)
                approve_receipt = self.web3.eth.wait_for_transaction_receipt(approve_hash, timeout=120)
                self.log("‚úÖ Approve —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", "INFO")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è nonce –≤ —Å–µ—Ç–∏
                time.sleep(1)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –ø–æ—Å–ª–µ approve (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +1)
                current_nonce = self.web3.eth.get_transaction_count(self.account.address)
                self.log(f"üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –ø–æ—Å–ª–µ approve: {current_nonce}", "INFO")
                
                # –¢–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                router_abi = [
                    {
                        "inputs": [
                            {"internalType": "uint256", "name": "amountIn", "type": "uint256"},
                            {"internalType": "uint256", "name": "amountOutMin", "type": "uint256"},
                            {"internalType": "address[]", "name": "path", "type": "address[]"},
                            {"internalType": "address", "name": "to", "type": "address"},
                            {"internalType": "uint256", "name": "deadline", "type": "uint256"}
                        ],
                        "name": "swapExactTokensForTokens",
                        "outputs": [{"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}],
                        "stateMutability": "nonpayable",
                        "type": "function"
                    }
                ]
                
                router_contract = self.web3.eth.contract(
                    address=router_address,
                    abi=router_abi
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –æ–±–º–µ–Ω–∞: USDT -> Token
                path = [
                    usdt_address,  # USDT
                    Web3.to_checksum_address(token_address)
                ]
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º nonce –ø–æ—Å–ª–µ approve)
                transaction = router_contract.functions.swapExactTokensForTokens(
                    amount_in_units,
                    0,  # amountOutMin = 0 (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'gas': self.get_gas_limit(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': current_nonce  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce
                })
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self.log(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash.hex()}", "INFO")
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
            
            if tx_receipt['status'] == 1:
                self.log(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! Tx: {tx_hash.hex()}", "SUCCESS")
                return {
                    'success': True,
                    'tx_hash': tx_hash.hex(),
                    'amount_spent': buy_amount,
                    'gas_used': tx_receipt['gasUsed']
                }
            else:
                self.log("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ç—å—é", "ERROR")
                return {
                    'success': False,
                    'error': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
                }
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: {str(e)}", "ERROR")
            return {
                'success': False,
                'error': str(e)
            }
            
    def _handle_purchase_completed(self, purchase_info: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏"""
        buy_number = purchase_info['buy_number']
        tx_hash = purchase_info['tx_hash']
        amount_spent = purchase_info['amount_spent']
        tokens_bought = purchase_info['tokens_bought']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.completed_buys_label.setText(str(buy_number))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã (—ç—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ)
        current_spent = float(self.spent_amount_label.text() or "0")
        current_bought = float(self.bought_tokens_label.text() or "0")
        
        self.spent_amount_label.setText(f"{current_spent + amount_spent:.6f}")
        self.bought_tokens_label.setText(f"{current_bought + tokens_bought:.2f}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.log(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ #{buy_number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Tx: {tx_hash[:20]}...", "SUCCESS")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        self.update_balances()
        
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.completed_buys_label.setText("0")
        self.spent_amount_label.setText("0.0")
        self.bought_tokens_label.setText("0.0")
        self.log("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞", "INFO")
        
    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞"""
        self.log_text.clear()
        
    def log(self, message: str, level: str = 'INFO'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ –≤–∫–ª–∞–¥–∫–∏
        self.log_text.append(formatted_message)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.End)
        self.log_text.setTextCursor(cursor)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –ª–æ–≥ —á–µ—Ä–µ–∑ BaseTab
        super().log(message, level)
