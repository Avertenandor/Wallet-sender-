#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–∏—Ö –æ—à–∏–±–æ–∫ –≤ WalletSender.py
"""

import ast
import sys
import os
import re
from typing import Dict, List, Tuple

def check_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python"""
    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê WalletSender.py")
    print("=" * 60)
    
    filename = "WalletSender.py"
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        compile(code, filename, 'exec')
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω - —Ñ–∞–π–ª –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ AST
        ast.parse(code)
        print("‚úÖ AST –¥–µ—Ä–µ–≤–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}:")
        print(f"   {e.msg}")
        print(f"   –§–∞–π–ª: {e.filename}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
    print("=" * 60)
    
    filename = "WalletSender.py"
    with open(filename, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    imports = []
    missing_imports = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
    for i, line in enumerate(lines[:100], 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫
        if line.strip().startswith(('import ', 'from ')):
            imports.append((i, line.strip()))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(imports)} –∏–º–ø–æ—Ä—Ç–æ–≤:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
    critical_imports = {
        'typing': ['Optional', 'Dict', 'List', 'Any', 'Union', 'Tuple'],
        'PyQt5.QtCore': ['pyqtSignal', 'pyqtSlot', 'QThread'],
        'PyQt5.QtWidgets': ['QApplication', 'QMainWindow'],
        'web3': ['Web3'],
        'eth_account': ['Account']
    }
    
    found_imports = set()
    for _, import_line in imports:
        for module, items in critical_imports.items():
            if module in import_line:
                found_imports.add(module)
    
    print("\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã:")
    for module in critical_imports:
        if module in found_imports:
            print(f"  ‚úÖ {module}")
        else:
            print(f"  ‚ö†Ô∏è {module} - –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            missing_imports.append(module)
    
    return len(missing_imports) == 0

def check_common_errors():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –¢–ò–ü–ò–ß–ù–´–• –ü–†–û–ë–õ–ï–ú")
    print("=" * 60)
    
    filename = "WalletSender.py"
    with open(filename, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    issues = {
        'optional_none': [],
        'undefined_vars': [],
        'qt_headers': [],
        'type_hints': [],
        'web3_types': []
    }
    
    for i, line in enumerate(lines, 1):
        line_stripped = line.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Optional —Å None
        if '= None' in line and 'Optional' not in line and not line_stripped.startswith('#'):
            if ':' in line.split('=')[0]:  # –ï—Å—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞
                var_part = line.split('=')[0]
                if 'Optional' not in var_part and 'None' not in var_part:
                    issues['optional_none'].append(i)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qt headers
        if '.horizontalHeader()' in line and 'if' not in line:
            issues['qt_headers'].append(i)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Web3 —Ç–∏–ø–æ–≤
        if any(x in line for x in ['Web3.', 'w3.', 'contract.', 'Account.']):
            if '# type: ignore' not in line:
                issues['web3_types'].append(i)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ —Ç–∏–ø–æ–≤
        if line_stripped.startswith('def ') and '->' not in line:
            if '__init__' not in line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
                issues['type_hints'].append(i)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_issues = 0
    
    for category, lines_list in issues.items():
        if lines_list:
            count = len(lines_list)
            total_issues += count
            print(f"\n{category.upper()}: {count} –ø—Ä–æ–±–ª–µ–º")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
            print(f"  –°—Ç—Ä–æ–∫–∏: {lines_list[:5]}")
            if count > 5:
                print(f"  ... –∏ –µ—â–µ {count - 5}")
    
    print("\n" + "-" * 60)
    print(f"–í–°–ï–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–û–ë–õ–ï–ú: {total_issues}")
    
    return total_issues

def check_critical_functions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    filename = "WalletSender.py"
    with open(filename, 'r', encoding='utf-8') as f:
        code = f.read()
    
    critical_functions = [
        'send_transaction',
        'mass_distribution',
        'check_balance',
        'save_to_database',
        'fetch_found_transactions',
        '_update_address_progress',
        '_mass_update_table_status'
    ]
    
    found_functions = []
    missing_functions = []
    
    for func in critical_functions:
        if f"def {func}" in code:
            found_functions.append(func)
            print(f"  ‚úÖ {func}")
        else:
            missing_functions.append(func)
            print(f"  ‚ùå {func} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return len(missing_functions) == 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\nüîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê WalletSender.py")
    print("=" * 60)
    
    results = {
        'syntax': check_syntax(),
        'imports': check_imports(),
        'functions': check_critical_functions()
    }
    
    total_issues = check_common_errors()
    
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    if results['syntax']:
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: OK")
    else:
        print("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –û–®–ò–ë–ö–ò")
    
    if results['imports']:
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã: OK")
    else:
        print("‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç—ã: –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
    
    if results['functions']:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: OK")
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    
    print(f"\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º: {total_issues}")
    
    if total_issues > 0:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ FIX_ALL_ERRORS.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Qt headers –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ None")
        print("3. –î–æ–±–∞–≤—å—Ç–µ # type: ignore –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ Web3")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Optional –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º None")
    else:
        print("\n‚úÖ –§–∞–π–ª –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
    
    print("\n" + "=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 60)

if __name__ == "__main__":
    main()
