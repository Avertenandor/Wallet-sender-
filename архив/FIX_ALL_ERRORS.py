#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ Pylance –≤ WalletSender
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import shutil
from datetime import datetime

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
    
    print("="*70)
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö PYLANCE –í WALLETSENDER")
    print("="*70)
    
    input_file = "WalletSender ‚Äî –∫–æ–ø–∏—è.py"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    backup_name = f"WalletSender_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_name}")
    shutil.copy2(input_file, backup_name)
    print("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {input_file}...")
    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_size = len(content)
    fixes_count = 0
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
    print("\nüî® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏...")
    if "from typing import" not in content:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ docstring –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
        lines = content.split('\n')
        insert_pos = 0
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü docstring
        in_docstring = False
        for i, line in enumerate(lines):
            if '"""' in line:
                if not in_docstring:
                    in_docstring = True
                else:
                    insert_pos = i + 1
                    break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        typing_imports = "from typing import Dict, List, Tuple, Optional, Any, Union, Callable"
        lines.insert(insert_pos, "")
        lines.insert(insert_pos + 1, "# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
        lines.insert(insert_pos + 2, typing_imports)
        lines.insert(insert_pos + 3, "")
        
        content = '\n'.join(lines)
        fixes_count += 1
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        print("   ‚ÑπÔ∏è –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ geth_poa_middleware
    print("\nüî® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –¢–∏–ø–∏–∑–∞—Ü–∏—è geth_poa_middleware...")
    if "geth_poa_middleware = None  # type: Optional[Any]" in content:
        content = content.replace(
            "geth_poa_middleware = None  # type: Optional[Any]",
            "geth_poa_middleware: Optional[Any] = None  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è"
        )
        fixes_count += 1
        print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è geth_poa_middleware")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Web3
    print("\nüî® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –¢–∏–ø–∏–∑–∞—Ü–∏—è Web3...")
    if "Web3 = None  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" in content:
        content = content.replace(
            "Web3 = None  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
            "Web3: Optional[Any] = None  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π"
        )
        fixes_count += 1
        print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è Web3")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ type: ignore –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\nüî® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ type: ignore –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    problem_imports = [
        "from web3.middleware import geth_poa_middleware",
        "from web3.middleware.geth_poa import geth_poa_middleware",
        "from web3.middleware import ExtraDataToPOAMiddleware as geth_poa_middleware",
        "Account.enable_unaudited_hdwallet_features()",
        "w3.middleware_onion.inject(geth_poa_middleware, layer=0)",
        "w3.middleware_onion.add(geth_poa_middleware)"
    ]
    
    for imp in problem_imports:
        if imp in content and "# type: ignore" not in content.split(imp)[1].split('\n')[0]:
            content = content.replace(imp, f"{imp}  # type: ignore")
            fixes_count += 1
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω type: ignore –¥–ª—è: {imp[:50]}...")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ type hints (–±–∞–∑–æ–≤–æ–µ)
    print("\nüî® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö type hints...")
    lines = content.split('\n')
    fixed_lines = []
    functions_fixed = 0
    
    for line in lines:
        if line.strip().startswith('def ') and ' -> ' not in line:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–µ—Ç–æ–¥ __init__ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if '__init__' not in line and '__' not in line:
                # –î–æ–±–∞–≤–ª—è–µ–º -> Any –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞
                if line.rstrip().endswith(':'):
                    line = line.rstrip()[:-1] + ' -> Any:'
                    functions_fixed += 1
        fixed_lines.append(line)
    
    if functions_fixed > 0:
        content = '\n'.join(fixed_lines)
        fixes_count += functions_fixed
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã type hints –¥–ª—è {functions_fixed} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüî® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 6: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ pyrightconfig.json
    pyright_config = {
        "include": ["*.py"],
        "exclude": ["**/__pycache__", "venv", ".venv"],
        "reportMissingImports": "warning",
        "reportMissingTypeStubs": "warning",
        "reportUnknownMemberType": "warning",
        "reportUnknownVariableType": "warning",
        "reportUnknownArgumentType": "warning",
        "pythonVersion": "3.8",
        "typeCheckingMode": "basic"
    }
    
    import json
    with open("pyrightconfig.json", 'w', encoding='utf-8') as f:
        json.dump(pyright_config, f, indent=2)
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω pyrightconfig.json")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    with open(input_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    new_size = len(content)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("="*70)
    print(f"‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_count}")
    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {original_size} -> {new_size} –±–∞–π—Ç")
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
    print("\n‚ú® –ì–û–¢–û–í–û! –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω.")
    print("\nüí° –î–ê–õ–¨–ù–ï–ô–®–ò–ï –î–ï–ô–°–¢–í–ò–Ø:")
    print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ VSCode –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É–º–µ–Ω—å—à–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ Pylance")
    print("   3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏:")
    print("      pip install web3 eth-account PyQt5 qdarkstyle")
    print("\nüìù –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –≤ VSCode")
    print("   - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
    
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
