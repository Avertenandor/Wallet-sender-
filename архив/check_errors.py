#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫ –≤ WalletSender ‚Äî –∫–æ–ø–∏—è.py"""

import ast
import sys
import importlib
import traceback

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    required_modules = [
        'requests',
        'mnemonic',
        'cryptography',
        'PyQt5',
        'qdarkstyle',
        'eth_utils',
        'web3',
        'eth_account',
        'openpyxl'
    ]
    
    missing = []
    for module in required_modules:
        try:
            importlib.import_module(module)
            print(f"‚úì {module} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚úó {module} –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing.append(module)
    
    return missing

def check_syntax(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è AST
        ast.parse(code)
        print("\n‚úì –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        return True
    except SyntaxError as e:
        print(f"\n‚úó –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:")
        print(f"  –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.msg}")
        if e.text:
            print(f"  –ö–æ–¥: {e.text.strip()}")
        return False
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
        return False

def check_file_structure(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:")
        print(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–≤—ã—á–µ–∫
        open_quotes = 0
        for i, line in enumerate(lines, 1):
            # –ü–æ–¥—Å—á—ë—Ç —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
            open_quotes += line.count('"""') % 2
            open_quotes += line.count("'''") % 2
        
        if open_quotes != 0:
            print(f"  ‚ö† –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫
        brackets = {'(': 0, '[': 0, '{': 0}
        for line in lines:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
            if line.strip().startswith('#'):
                continue
            for char in line:
                if char == '(':
                    brackets['('] += 1
                elif char == ')':
                    brackets['('] -= 1
                elif char == '[':
                    brackets['['] += 1
                elif char == ']':
                    brackets['['] -= 1
                elif char == '{':
                    brackets['{'] += 1
                elif char == '}':
                    brackets['{'] -= 1
        
        unbalanced = False
        for bracket, count in brackets.items():
            if count != 0:
                print(f"  ‚ö† –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏ {bracket}: {abs(count)}")
                unbalanced = True
        
        if not unbalanced:
            print(f"  ‚úì –í—Å–µ —Å–∫–æ–±–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def try_import_file(filename):
    """–ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        module_name = filename.replace('.py', '').replace(' ‚Äî –∫–æ–ø–∏—è', '_copy')
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(filename, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–¥
        compiled = compile(code, filename, 'exec')
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        namespace = {}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        exec(compiled, namespace)
        
        print("\n‚úì –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        return True
    except Exception as e:
        print(f"\n‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"  –¢–∏–ø: {type(e).__name__}")
        print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        
        # –í—ã–≤–æ–¥–∏–º traceback –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        tb_lines = traceback.format_exc().split('\n')
        for line in tb_lines[-5:]:
            if line.strip():
                print(f"  {line}")
        return False

def main():
    filename = "WalletSender ‚Äî –∫–æ–ø–∏—è.py"
    
    print("=" * 50)
    print("–ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê:", filename)
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\n1. –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô:")
    missing_modules = check_imports()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    print("\n2. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê:")
    syntax_ok = check_syntax(filename)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\n3. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´:")
    check_file_structure(filename)
    
    # 4. –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\n4. –ü–†–û–í–ï–†–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    try_import_file(filename)
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("–ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    print("=" * 50)
    
    if missing_modules:
        print(f"\n‚ö† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏:")
        for module in missing_modules:
            print(f"  pip install {module}")
    
    if syntax_ok:
        print("\n‚úì –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        print("\n‚úó –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏")
    print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (config.json)")
    print("  3. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (logs, rewards_configs)")

if __name__ == "__main__":
    main()
