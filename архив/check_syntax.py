#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ WalletSender.py"""

import ast
import sys

def check_syntax():
    try:
        with open('WalletSender.py', 'r', encoding='utf-8') as f:
            code = f.read()
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
        compile(code, 'WalletSender.py', 'exec')
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω - —Ñ–∞–π–ª –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å AST
        ast.parse(code)
        print("‚úÖ AST –¥–µ—Ä–µ–≤–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:")
        lines = code.split('\n')
        print(f"  - –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(lines)}")
        print(f"  - –†–∞–∑–º–µ—Ä: {len(code)} –±–∞–π—Ç")
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤
        tree = ast.parse(code)
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
        print(f"  - –§—É–Ω–∫—Ü–∏–π: {len(functions)}")
        print(f"  - –ö–ª–∞—Å—Å–æ–≤: {len(classes)}")
        
        return True
        
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}:")
        print(f"   {e.msg}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = check_syntax()
    sys.exit(0 if success else 1)
