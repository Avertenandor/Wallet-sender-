#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ WalletSender Modular
"""

# –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Qt
from PyQt5.QtWidgets import (
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QTabWidget,
    QLabel,
    QStatusBar,
    QMenuBar,
    QAction,
    QMenu,
    QMessageBox,
    QProgressBar,
    QTextEdit,
    QScrollBar,
    QSplitter,
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, pyqtSlot
from PyQt5.QtGui import QIcon, QFont, QCloseEvent

from ..utils.logger import get_logger
from .. import __version__
from ..config import Config
from ..core.web3_provider import Web3Provider

# –ò–º–ø–æ—Ä—Ç –≤–∫–ª–∞–¥–æ–∫
# –í–∫–ª–∞–¥–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤–æ –≤–Ω—É—Ç—Ä–∏ _load_tabs, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è QWidget –¥–æ QApplication

logger = get_logger(__name__)


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WalletSender"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_message = pyqtSignal(str, str)  # message, level
    
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = Config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self.web3_provider = Web3Provider()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.init_ui()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.connect_signals()
        
        logger.info(f"üöÄ WalletSender Modular v{__version__} –∑–∞–ø—É—â–µ–Ω")
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setWindowTitle(f"WalletSender Modular v{__version__} - Production")
        self.setGeometry(100, 100, 1400, 900)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header(main_layout)
        
        # Splitter –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –∏ –ª–æ–≥–æ–≤
        try:
            # PyQt6
            splitter = QSplitter(Qt.Orientation.Vertical)  # type: ignore[attr-defined]
        except AttributeError:
            # PyQt5
            splitter = QSplitter(Qt.Vertical)  # type: ignore[attr-defined]
        main_layout.addWidget(splitter)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        splitter.addWidget(self.tab_widget)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        self.log_area.setMaximumHeight(200)
        splitter.addWidget(self.log_area)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ splitter (70% –≤–∫–ª–∞–¥–∫–∏, 30% –ª–æ–≥–∏)
        splitter.setSizes([700, 200])
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self._create_status_bar()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        self._load_tabs()
        
        # –ú–µ–Ω—é
        self._create_menu()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI
        self.connect_signals()
        
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def _create_header(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_widget = QWidget()
        header_layout = QVBoxLayout(header_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(f"üöÄ WalletSender Modular v{__version__}")
        # PyQt6: QFont.Weight.Bold, PyQt5: QFont.Bold ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        try:
            # –î–ª—è PyQt6
            weight = QFont.Weight.Bold  # type: ignore[attr-defined]
        except AttributeError:
            # –î–ª—è PyQt5
            try:
                weight = QFont.Bold  # type: ignore[attr-defined]
            except AttributeError:
                # Fallback –Ω–∞ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                weight = 75
        title_font = QFont("Arial", 18)
        title_font.setWeight(weight)
        title_label.setFont(title_font)
        try:
            # PyQt6
            title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)  # type: ignore[attr-defined]
        except AttributeError:
            # PyQt5
            title_label.setAlignment(Qt.AlignCenter)  # type: ignore[attr-defined]
        title_label.setStyleSheet("color: #4CAF50; padding: 10px;")
        header_layout.addWidget(title_label)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = QLabel("Production Edition - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è BSC")
        try:
            # PyQt6
            subtitle_label.setAlignment(Qt.AlignmentFlag.AlignCenter)  # type: ignore[attr-defined]
        except AttributeError:
            # PyQt5
            subtitle_label.setAlignment(Qt.AlignCenter)  # type: ignore[attr-defined]
        subtitle_label.setStyleSheet("color: #666; font-size: 12px;")
        header_layout.addWidget(subtitle_label)
        
        layout.addWidget(header_widget)
        
    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.status_bar.addPermanentWidget(self.progress_bar)
        
        # –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        self.queue_status_label = QLabel("üìã Queue: 0/0/0")
        self.queue_status_label.setToolTip("–û—á–µ—Ä–µ–¥—å: –≤ –æ—á–µ—Ä–µ–¥–∏/–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è/–æ—à–∏–±–∫–∏")
        self.status_bar.addPermanentWidget(self.queue_status_label)
        
        # –°—Ç–∞—Ç—É—Å RPC
        self.rpc_status_label = QLabel("üåê RPC: -")
        self.rpc_status_label.setToolTip("RPC —É–∑–µ–ª –∏ –∑–∞–¥–µ—Ä–∂–∫–∞")
        self.status_bar.addPermanentWidget(self.rpc_status_label)
        
        # –°—Ç–∞—Ç—É—Å API Rate Limiter
        self.api_status_label = QLabel("üîí API: -")
        self.api_status_label.setToolTip("API Rate Limiter")
        self.status_bar.addPermanentWidget(self.api_status_label)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
        self.network_status_label = QLabel("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏...")
        self.status_bar.addPermanentWidget(self.network_status_label)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        self.status_update_timer = QTimer()
        self.status_update_timer.timeout.connect(self._update_status_indicators)
        self.status_update_timer.start(1000)  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏
        self.network_check_timer = QTimer()
        self.network_check_timer.timeout.connect(self._check_network_connection)
        self.network_check_timer.start(10000)  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        self.status_bar.showMessage("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    def _check_network_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏"""
        try:
            if self.web3_provider and self.web3_provider.w3.is_connected():
                self.network_status_label.setText("üü¢ BSC –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            else:
                self.network_status_label.setText("üî¥ BSC –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        except Exception:
            self.network_status_label.setText("üü° BSC –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    def _update_status_indicators(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
            from ..services.job_router import get_job_router
            router = get_job_router()
            stats = router.stats()
            
            queued = stats['states'].get('queued', 0)
            running = stats['states'].get('running', 0)
            failed = stats['states'].get('failed', 0)
            
            self.queue_status_label.setText(f"üìã Queue: {queued}/{running}/{failed}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å RPC
            from ..core.rpc import get_rpc_pool
            rpc_pool = get_rpc_pool()
            endpoint = rpc_pool.current_primary()
            if endpoint:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω RPC
                import re
                match = re.search(r'//([^/]+)', endpoint)
                if match:
                    rpc_short = match.group(1)[:20]  # –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
                else:
                    rpc_short = endpoint[:20]
                self.rpc_status_label.setText(f"üåê RPC: {rpc_short}")
            else:
                self.rpc_status_label.setText("üåê RPC: No healthy endpoints")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å API Rate Limiter
            from ..core.limiter import get_rate_limiter
            limiter = get_rate_limiter()
            limiter_stats = limiter.get_stats()
            
            rps = limiter_stats.get('recent_rps', 0)
            blocked = limiter_stats.get('blocked_requests', 0)
            
            if blocked > 0:
                self.api_status_label.setText(f"üîí API: {rps:.1f}rps ‚ö†Ô∏è{blocked}")
            else:
                self.api_status_label.setText(f"üîí API: {rps:.1f}rps")
                
        except Exception as e:
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
            pass
    
    def _load_tabs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –≤–∫–ª–∞–¥–æ–∫ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è QApplication)
        from .tabs import (
            AutoBuyTab,
            AutoSalesTab,
            DirectSendTab,
            MassDistributionTab,
            AnalysisTab,
            SearchTab,
            RewardsTab,
            QueueTab,
            HistoryTab,
            SettingsTab,
            FoundTxTab,
        )
        # –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è)
        self.mass_distribution_tab = MassDistributionTab(self, slot_number=1)
        self.tab_widget.addTab(self.mass_distribution_tab, "‚öΩ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
        
        # –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ 2
        self.mass_distribution_tab2 = MassDistributionTab(self, slot_number=2)
        self.tab_widget.addTab(self.mass_distribution_tab2, "‚öΩ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ 2")
        
        # –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ 3
        self.mass_distribution_tab3 = MassDistributionTab(self, slot_number=3)
        self.tab_widget.addTab(self.mass_distribution_tab3, "‚öΩ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ 3")
        
        # –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        self.direct_send_tab = DirectSendTab(self)
        self.tab_widget.addTab(self.direct_send_tab, "üì´ –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
        
        # –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
        self.auto_buy_tab = AutoBuyTab(self)
        self.tab_widget.addTab(self.auto_buy_tab, "üõå –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏")
        
        # –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏
        self.auto_sales_tab = AutoSalesTab(self)
        self.tab_widget.addTab(self.auto_sales_tab, "üí∞ –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏")
        
        # –ê–Ω–∞–ª–∏–∑
        self.analysis_tab = AnalysisTab(self)
        self.tab_widget.addTab(self.analysis_tab, "üîç –ê–Ω–∞–ª–∏–∑")
        
        # –ü–æ–∏—Å–∫
        self.search_tab = SearchTab(self)
        self.tab_widget.addTab(self.search_tab, "üîé –ü–æ–∏—Å–∫")
        
        # –ù–∞–≥—Ä–∞–¥—ã
        self.rewards_tab = RewardsTab(self)
        self.tab_widget.addTab(self.rewards_tab, "üéÅ –ù–∞–≥—Ä–∞–¥—ã")
        
        # –û—á–µ—Ä–µ–¥—å
        self.queue_tab = QueueTab(self)
        self.tab_widget.addTab(self.queue_tab, "üìã –û—á–µ—Ä–µ–¥—å")
        
        # –ò—Å—Ç–æ—Ä–∏—è
        self.history_tab = HistoryTab(self)
        self.tab_widget.addTab(self.history_tab, "üìú –ò—Å—Ç–æ—Ä–∏—è")
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self.found_tx_tab = FoundTxTab(self)
        self.tab_widget.addTab(self.found_tx_tab, "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ TX")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings_tab = SettingsTab(self)
        self.tab_widget.addTab(self.settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.tab_widget.count()} –≤–∫–ª–∞–¥–æ–∫")
        
    def _create_menu(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar: QMenuBar = self.menuBar()

        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu: QMenu = menubar.addMenu('–§–∞–π–ª')

        # –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
        export_logs_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤', self)
        export_logs_action.triggered.connect(self.export_logs)
        file_menu.addAction(export_logs_action)

        file_menu.addSeparator()

        # –í—ã—Ö–æ–¥
        exit_action = QAction('–í—ã—Ö–æ–¥', self)
        exit_action.triggered.connect(self._on_exit)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu: QMenu = menubar.addMenu('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')

        # –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
        clear_logs_action = QAction('–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏', self)
        clear_logs_action.triggered.connect(self.clear_logs)
        tools_menu.addAction(clear_logs_action)

        # –ú–µ–Ω—é –ü–æ–º–æ—â—å
        help_menu: QMenu = menubar.addMenu('–ü–æ–º–æ—â—å')

        # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        about_action = QAction('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

    def _on_exit(self) -> None:
        """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —á–µ—Ä–µ–∑ QAction without returning bool"""
        self.close()
        
    def connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.log_message.connect(self.add_log)
        
    @pyqtSlot(str, str)
    def add_log(self, message: str, level: str = "INFO") -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        QTimer().singleShot(0, lambda: self._add_log_impl(message, level))
        
    def _add_log_impl(self, message: str, level: str) -> None:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        colors = {
            "DEBUG": "#888",
            "INFO": "#000",
            "SUCCESS": "#0a0",
            "WARNING": "#f90",
            "ERROR": "#f00"
        }
        
        color = colors.get(level, "#000")
        formatted_message = f'<span style="color: {color}">[{timestamp}] {message}</span>'
        
        self.log_area.append(formatted_message)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        scrollbar: QScrollBar = self.log_area.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            from PyQt6.QtWidgets import QFileDialog
        except ImportError:
            try:
                from PyQt5.QtWidgets import QFileDialog
            except ImportError:
                from PySide6.QtWidgets import QFileDialog
        from datetime import datetime
        
        filename, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏",
            f"logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "Text Files (*.txt)"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_area.toPlainText())
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
                
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_area.clear()
        self.add_log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "INFO")
        
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = f"""
        <h2>WalletSender Modular v{__version__}</h2>
        <p><b>Production Edition</b></p>
        <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º BSC</p>
        <br>
        <p><b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b></p>
        <ul>
            <li>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (3 –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–ª–æ—Ç–∞)</li>
            <li>–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤</li>
            <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏</li>
            <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏</li>
            <li>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</li>
            <li>–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</li>
            <li>–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥</li>
            <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é</li>
            <li>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</li>
            <li>–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
        </ul>
        <br>
        <p><b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b></p>
        <ul>
            <li>Python 3.12+</li>
            <li>PyQt5</li>
            <li>Web3.py</li>
            <li>SQLAlchemy</li>
            <li>Etherscan V2 API</li>
        </ul>
        <br>
        <p><b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</b> 2025</p>
        <p><b>–í–µ—Ä—Å–∏—è:</b> {__version__} Production</p>
        """
        
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
        
    def show_progress(self, value: int = 0, maximum: int = 100):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ"""
        self.progress_bar.setMaximum(maximum)
        self.progress_bar.setValue(value)
        self.progress_bar.setVisible(value > 0 and value < maximum)
        
    def closeEvent(self, event: QCloseEvent) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            # PyQt6
            reply = QMessageBox.question(
                self,
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,  # type: ignore[attr-defined]
                QMessageBox.StandardButton.No  # type: ignore[attr-defined]
            )
            yes_button = QMessageBox.StandardButton.Yes  # type: ignore[attr-defined]
        except AttributeError:
            # PyQt5
            reply = QMessageBox.question(
                self,
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
                QMessageBox.Yes | QMessageBox.No,  # type: ignore[attr-defined]
                QMessageBox.No  # type: ignore[attr-defined]
            )
            yes_button = QMessageBox.Yes  # type: ignore[attr-defined]

        if reply == yes_button:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
            if hasattr(self, 'network_check_timer'):
                self.network_check_timer.stop()
            if hasattr(self, 'status_update_timer'):
                self.status_update_timer.stop()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ BscScanService (graceful shutdown)
            try:
                from ..services.bscscan_service import close_bscscan_service
                import asyncio
                
                # –°–æ–∑–¥–∞–µ–º event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                try:
                    loop = asyncio.get_event_loop()
                except RuntimeError:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
                if not loop.is_running():
                    loop.run_until_complete(close_bscscan_service())
                else:
                    # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
                    asyncio.ensure_future(close_bscscan_service())
                    
                logger.info("‚úÖ BscScanService –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å BscScanService: {e}")
                
            logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            event.accept()
        else:
            event.ignore()
