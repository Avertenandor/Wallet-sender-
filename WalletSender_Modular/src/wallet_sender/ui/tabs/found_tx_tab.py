"""
–í–∫–ª–∞–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
"""

from datetime import datetime
from typing import List, Optional
import pandas as pd

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QLabel, QGroupBox, QPushButton,
    QTableWidget, QTableWidgetItem, QComboBox, QLineEdit,
    QMessageBox, QHeaderView, QMenu, QFileDialog, QApplication
)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QColor

from .base_tab import BaseTab
from ...database.database import DatabaseManager
from ...utils.logger import get_logger

logger = get_logger(__name__)


class FoundTxTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    import_to_rewards_signal = pyqtSignal(list)  # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –Ω–∞–≥—Ä–∞–¥—ã
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        self.db_manager = DatabaseManager()
        self.found_transactions = []
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        header.setStyleSheet("QGroupBox { font-weight: bold; }")
        header_layout = QVBoxLayout(header)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = QHBoxLayout()
        
        # –§–∏–ª—å—Ç—Ä—ã
        control_panel.addWidget(QLabel("–¢–æ–∫–µ–Ω:"))
        self.token_filter = QComboBox()
        self.token_filter.addItems(["–í—Å–µ", "PLEX", "USDT", "BNB", "–î—Ä—É–≥–∏–µ"])
        self.token_filter.currentTextChanged.connect(self.apply_filters)
        control_panel.addWidget(self.token_filter)
        
        control_panel.addWidget(QLabel("–ú–∏–Ω. —Å—É–º–º–∞:"))
        self.min_amount_filter = QLineEdit()
        self.min_amount_filter.setPlaceholderText("0.0")
        self.min_amount_filter.setMaximumWidth(100)
        self.min_amount_filter.textChanged.connect(self.apply_filters)
        control_panel.addWidget(self.min_amount_filter)
        
        control_panel.addWidget(QLabel("–ê–¥—Ä–µ—Å:"))
        self.address_filter = QLineEdit()
        self.address_filter.setPlaceholderText("–§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É...")
        self.address_filter.textChanged.connect(self.apply_filters)
        control_panel.addWidget(self.address_filter)
        
        control_panel.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.clear_btn = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_btn.clicked.connect(self.clear_found_transactions)
        control_panel.addWidget(self.clear_btn)
        
        self.import_rewards_btn = QPushButton("üéÅ –ò–º–ø–æ—Ä—Ç –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        self.import_rewards_btn.clicked.connect(self.import_to_rewards)
        control_panel.addWidget(self.import_rewards_btn)
        
        self.export_btn = QPushButton("üì• –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.clicked.connect(self.export_transactions)
        control_panel.addWidget(self.export_btn)
        
        header_layout.addLayout(control_panel)
        layout.addWidget(header)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.transactions_table = QTableWidget()
        self.transactions_table.setColumnCount(10)
        self.transactions_table.setHorizontalHeaderLabels([
            "–í—ã–±–æ—Ä", "–î–∞—Ç–∞/–í—Ä–µ–º—è", "–û—Ç –∫–æ–≥–æ", "–ö–æ–º—É", "–¢–æ–∫–µ–Ω",
            "–°—É–º–º–∞", "TX Hash", "–ë–ª–æ–∫", "–°—Ç–∞—Ç—É—Å", "–ò—Å—Ç–æ—á–Ω–∏–∫"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.transactions_table.setAlternatingRowColors(True)
        self.transactions_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.transactions_table.setSortingEnabled(True)
        self.transactions_table.horizontalHeader().setStretchLastSection(True)
        self.transactions_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.transactions_table.customContextMenuRequested.connect(self.show_context_menu)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        header = self.transactions_table.horizontalHeader()
        header.resizeSection(0, 50)  # –ß–µ–∫–±–æ–∫—Å
        header.resizeSection(1, 150)  # –î–∞—Ç–∞
        header.resizeSection(2, 120)  # –û—Ç
        header.resizeSection(3, 120)  # –ö–æ–º—É
        header.resizeSection(4, 80)   # –¢–æ–∫–µ–Ω
        header.resizeSection(5, 100)  # –°—É–º–º–∞
        header.resizeSection(6, 120)  # TX Hash
        header.resizeSection(7, 80)   # –ë–ª–æ–∫
        header.resizeSection(8, 80)   # –°—Ç–∞—Ç—É—Å
        
        layout.addWidget(self.transactions_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QHBoxLayout(stats_group)
        
        self.total_label = QLabel("–í—Å–µ–≥–æ: 0")
        stats_layout.addWidget(self.total_label)
        
        self.selected_label = QLabel("–í—ã–±—Ä–∞–Ω–æ: 0")
        stats_layout.addWidget(self.selected_label)
        
        self.total_amount_label = QLabel("–û–±—â–∞—è —Å—É–º–º–∞: 0")
        stats_layout.addWidget(self.total_amount_label)
        
        self.unique_senders_label = QLabel("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: 0")
        stats_layout.addWidget(self.unique_senders_label)
        
        stats_layout.addStretch()
        
        layout.addWidget(stats_group)
        
        logger.info("FoundTxTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def add_found_transaction(self, tx_data: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            self.found_transactions.append(tx_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
            row = self.transactions_table.rowCount()
            self.transactions_table.insertRow(row)
            
            # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞
            from PyQt5.QtWidgets import QCheckBox
            checkbox = QCheckBox()
            checkbox.stateChanged.connect(self.update_selection_stats)
            self.transactions_table.setCellWidget(row, 0, checkbox)
            
            # –î–∞—Ç–∞/–í—Ä–µ–º—è
            timestamp = tx_data.get('timestamp', 0)
            if timestamp:
                date_str = datetime.fromtimestamp(int(timestamp)).strftime("%Y-%m-%d %H:%M:%S")
            else:
                date_str = "-"
            self.transactions_table.setItem(row, 1, QTableWidgetItem(date_str))
            
            # –û—Ç –∫–æ–≥–æ
            from_addr = tx_data.get('from', '')
            from_short = from_addr[:6] + "..." + from_addr[-4:] if from_addr else "-"
            from_item = QTableWidgetItem(from_short)
            from_item.setData(Qt.UserRole, from_addr)  # –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            self.transactions_table.setItem(row, 2, from_item)
            
            # –ö–æ–º—É
            to_addr = tx_data.get('to', '')
            to_short = to_addr[:6] + "..." + to_addr[-4:] if to_addr else "-"
            to_item = QTableWidgetItem(to_short)
            to_item.setData(Qt.UserRole, to_addr)  # –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            self.transactions_table.setItem(row, 3, to_item)
            
            # –¢–æ–∫–µ–Ω
            token = tx_data.get('tokenSymbol', 'Unknown')
            self.transactions_table.setItem(row, 4, QTableWidgetItem(token))
            
            # –°—É–º–º–∞
            amount = tx_data.get('value', 0)
            decimals = tx_data.get('tokenDecimal', 18)
            if decimals:
                amount_formatted = float(amount) / (10 ** int(decimals))
                amount_str = f"{amount_formatted:.4f}"
            else:
                amount_str = str(amount)
            self.transactions_table.setItem(row, 5, QTableWidgetItem(amount_str))
            
            # TX Hash
            tx_hash = tx_data.get('hash', '')
            hash_short = tx_hash[:8] + "..." if tx_hash else "-"
            hash_item = QTableWidgetItem(hash_short)
            hash_item.setData(Qt.UserRole, tx_hash)  # –ü–æ–ª–Ω—ã–π —Ö–µ—à
            self.transactions_table.setItem(row, 6, hash_item)
            
            # –ë–ª–æ–∫
            block = tx_data.get('blockNumber', '-')
            self.transactions_table.setItem(row, 7, QTableWidgetItem(str(block)))
            
            # –°—Ç–∞—Ç—É—Å (–¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±—ã—á–Ω–æ success)
            status = "success"
            status_item = QTableWidgetItem(status)
            status_item.setBackground(QColor(76, 175, 80))
            self.transactions_table.setItem(row, 8, status_item)
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫
            source = tx_data.get('source', 'Search')
            self.transactions_table.setItem(row, 9, QTableWidgetItem(source))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_statistics()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            
    def add_multiple_transactions(self, transactions: List[dict]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        for tx in transactions:
            self.add_found_transaction(tx)
            
        self.log_message(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "INFO")
        
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            token_filter = self.token_filter.currentText()
            min_amount = self.min_amount_filter.text()
            address_filter = self.address_filter.text().lower()
            
            for row in range(self.transactions_table.rowCount()):
                show_row = True
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–∫–µ–Ω—É
                if token_filter != "–í—Å–µ":
                    token_item = self.transactions_table.item(row, 4)
                    if token_item and token_filter not in token_item.text():
                        show_row = False
                        
                # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ
                if min_amount and show_row:
                    try:
                        amount_item = self.transactions_table.item(row, 5)
                        if amount_item:
                            amount = float(amount_item.text())
                            if amount < float(min_amount):
                                show_row = False
                    except ValueError:
                        pass
                        
                # –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É
                if address_filter and show_row:
                    from_item = self.transactions_table.item(row, 2)
                    to_item = self.transactions_table.item(row, 3)
                    
                    from_addr = from_item.data(Qt.UserRole) if from_item else ""
                    to_addr = to_item.data(Qt.UserRole) if to_item else ""
                    
                    if address_filter not in from_addr.lower() and address_filter not in to_addr.lower():
                        show_row = False
                        
                self.transactions_table.setRowHidden(row, not show_row)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = self.transactions_table.rowCount()
        visible_count = 0
        total_amount = 0
        unique_senders = set()
        
        for row in range(total):
            if not self.transactions_table.isRowHidden(row):
                visible_count += 1
                
                # –°—É–º–º–∞
                amount_item = self.transactions_table.item(row, 5)
                if amount_item:
                    try:
                        total_amount += float(amount_item.text())
                    except ValueError:
                        pass
                        
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏
                from_item = self.transactions_table.item(row, 2)
                if from_item:
                    from_addr = from_item.data(Qt.UserRole)
                    if from_addr:
                        unique_senders.add(from_addr)
                        
        self.total_label.setText(f"–í—Å–µ–≥–æ: {visible_count}/{total}")
        self.total_amount_label.setText(f"–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.4f}")
        self.unique_senders_label.setText(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(unique_senders)}")
        
        self.update_selection_stats()
        
    def update_selection_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        selected_count = 0
        
        for row in range(self.transactions_table.rowCount()):
            checkbox = self.transactions_table.cellWidget(row, 0)
            if checkbox and checkbox.isChecked():
                selected_count += 1
                
        self.selected_label.setText(f"–í—ã–±—Ä–∞–Ω–æ: {selected_count}")
        
    def import_to_rewards(self):
        """–ò–º–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –Ω–∞–≥—Ä–∞–¥—ã"""
        selected_transactions = []
        
        for row in range(self.transactions_table.rowCount()):
            checkbox = self.transactions_table.cellWidget(row, 0)
            if checkbox and checkbox.isChecked():
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tx_data = {
                    'from_address': self.transactions_table.item(row, 2).data(Qt.UserRole),
                    'to_address': self.transactions_table.item(row, 3).data(Qt.UserRole),
                    'token': self.transactions_table.item(row, 4).text(),
                    'amount': self.transactions_table.item(row, 5).text(),
                    'tx_hash': self.transactions_table.item(row, 6).data(Qt.UserRole),
                    'block': self.transactions_table.item(row, 7).text(),
                }
                selected_transactions.append(tx_data)
                
        if not selected_transactions:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
            return
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(selected_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –Ω–∞–≥—Ä–∞–¥—ã?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.import_to_rewards_signal.emit(selected_transactions)
            self.log_message(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(selected_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –Ω–∞–≥—Ä–∞–¥—ã", "SUCCESS")
            
            # –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            for row in range(self.transactions_table.rowCount()):
                checkbox = self.transactions_table.cellWidget(row, 0)
                if checkbox:
                    checkbox.setChecked(False)
                    
    def export_transactions(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            if self.transactions_table.rowCount() == 0:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
                return
                
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(
                self, "–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "",
                "CSV —Ñ–∞–π–ª—ã (*.csv);;Excel —Ñ–∞–π–ª—ã (*.xlsx)"
            )
            
            if not file_path:
                return
                
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = []
            for row in range(self.transactions_table.rowCount()):
                if not self.transactions_table.isRowHidden(row):
                    row_data = {
                        '–î–∞—Ç–∞': self.transactions_table.item(row, 1).text(),
                        '–û—Ç': self.transactions_table.item(row, 2).data(Qt.UserRole),
                        '–ö–æ–º—É': self.transactions_table.item(row, 3).data(Qt.UserRole),
                        '–¢–æ–∫–µ–Ω': self.transactions_table.item(row, 4).text(),
                        '–°—É–º–º–∞': self.transactions_table.item(row, 5).text(),
                        'TX Hash': self.transactions_table.item(row, 6).data(Qt.UserRole),
                        '–ë–ª–æ–∫': self.transactions_table.item(row, 7).text(),
                        '–°—Ç–∞—Ç—É—Å': self.transactions_table.item(row, 8).text(),
                        '–ò—Å—Ç–æ—á–Ω–∏–∫': self.transactions_table.item(row, 9).text(),
                    }
                    data.append(row_data)
                    
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            if file_path.endswith('.xlsx'):
                df.to_excel(file_path, index=False)
            else:
                df.to_csv(file_path, index=False)
                
            self.log_message(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "SUCCESS")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:\n{file_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
            
    def clear_found_transactions(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if self.transactions_table.rowCount() == 0:
            return
            
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ({self.transactions_table.rowCount()})?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.transactions_table.setRowCount(0)
            self.found_transactions.clear()
            self.update_statistics()
            self.log_message("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã", "INFO")
            
    def show_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Ç–∞–±–ª–∏—Ü—ã"""
        menu = QMenu()
        
        # –î–µ–π—Å—Ç–≤–∏—è
        copy_hash_action = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å TX Hash")
        copy_from_action = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        copy_to_action = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        menu.addSeparator()
        view_on_bscscan_action = menu.addAction("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        menu.addSeparator()
        select_all_action = menu.addAction("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        deselect_all_action = menu.addAction("‚ùå –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        action = menu.exec_(self.transactions_table.mapToGlobal(position))
        
        if action:
            current_row = self.transactions_table.currentRow()
            
            if action == copy_hash_action and current_row >= 0:
                hash_item = self.transactions_table.item(current_row, 6)
                if hash_item:
                    tx_hash = hash_item.data(Qt.UserRole)
                    if tx_hash:
                        QApplication.clipboard().setText(tx_hash)
                        self.log_message("TX Hash —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                        
            elif action == copy_from_action and current_row >= 0:
                from_item = self.transactions_table.item(current_row, 2)
                if from_item:
                    from_addr = from_item.data(Qt.UserRole)
                    if from_addr:
                        QApplication.clipboard().setText(from_addr)
                        self.log_message("–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                        
            elif action == copy_to_action and current_row >= 0:
                to_item = self.transactions_table.item(current_row, 3)
                if to_item:
                    to_addr = to_item.data(Qt.UserRole)
                    if to_addr:
                        QApplication.clipboard().setText(to_addr)
                        self.log_message("–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                        
            elif action == view_on_bscscan_action and current_row >= 0:
                hash_item = self.transactions_table.item(current_row, 6)
                if hash_item:
                    tx_hash = hash_item.data(Qt.UserRole)
                    if tx_hash:
                        import webbrowser
                        webbrowser.open(f"https://bscscan.com/tx/{tx_hash}")
                        
            elif action == select_all_action:
                for row in range(self.transactions_table.rowCount()):
                    if not self.transactions_table.isRowHidden(row):
                        checkbox = self.transactions_table.cellWidget(row, 0)
                        if checkbox:
                            checkbox.setChecked(True)
                            
            elif action == deselect_all_action:
                for row in range(self.transactions_table.rowCount()):
                    checkbox = self.transactions_table.cellWidget(row, 0)
                    if checkbox:
                        checkbox.setChecked(False)
