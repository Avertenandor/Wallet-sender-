"""
–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ PancakeSwap
"""

import threading
import time
import json
from typing import Optional, Dict, Any, List
from datetime import datetime

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QProgressBar,
    QSpinBox, QDoubleSpinBox, QComboBox, QTextEdit, QFormLayout,
    QCheckBox, QRadioButton, QButtonGroup, QMessageBox
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QTimer
from PyQt5.QtGui import QFont, QColor

from web3 import Web3
from eth_account import Account

from .base_tab import BaseTab
from ...constants import CONTRACTS
from ...utils.logger import get_logger

logger = get_logger(__name__)

try:
    from mnemonic import Mnemonic
except ImportError:
    Mnemonic = None
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# PancakeSwap Router V2 ABI (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
PANCAKE_ROUTER_ABI = [
    {
        "inputs": [
            {"internalType": "uint256", "name": "amountIn", "type": "uint256"},
            {"internalType": "uint256", "name": "amountOutMin", "type": "uint256"},
            {"internalType": "address[]", "name": "path", "type": "address[]"},
            {"internalType": "address", "name": "to", "type": "address"},
            {"internalType": "uint256", "name": "deadline", "type": "uint256"}
        ],
        "name": "swapExactTokensForETH",
        "outputs": [{"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {"internalType": "uint256", "name": "amountIn", "type": "uint256"},
            {"internalType": "uint256", "name": "amountOutMin", "type": "uint256"},
            {"internalType": "address[]", "name": "path", "type": "address[]"},
            {"internalType": "address", "name": "to", "type": "address"},
            {"internalType": "uint256", "name": "deadline", "type": "uint256"}
        ],
        "name": "swapExactTokensForTokens",
        "outputs": [{"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}],
        "stateMutability": "nonpayable",
        "type": "function"
    }
]

# ERC20 ABI –¥–ª—è approve –∏ balanceOf
ERC20_ABI = [
    {"constant": True, "inputs": [{"name": "_owner", "type": "address"}], "name": "balanceOf", "outputs": [{"name": "balance", "type": "uint256"}], "type": "function"},
    {"constant": False, "inputs": [{"name": "_spender", "type": "address"}, {"name": "_value", "type": "uint256"}], "name": "approve", "outputs": [{"name": "", "type": "bool"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "decimals", "outputs": [{"name": "", "type": "uint8"}], "type": "function"}
]


class AutoSalesTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    transaction_completed = pyqtSignal(dict)
    balance_updated = pyqtSignal(dict)
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–¥–∞–∂
        self.is_selling = False
        self.stop_selling = False
        self.selling_thread = None
        
        # Web3 –∏ –∞–∫–∫–∞—É–Ω—Ç
        self.web3 = None
        self.account = None
        self.balances = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        self._init_web3()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.balance_timer = QTimer()
        self.balance_timer.timeout.connect(self.update_balances)
        
    def _init_web3(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # BSC Mainnet RPC
            rpc_url = 'https://bsc-dataseed.binance.org/'
            self.web3 = Web3(Web3.HTTPProvider(rpc_url))
            
            if self.web3.is_connected():
                self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "SUCCESS")
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC", "ERROR")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3: {str(e)}", "ERROR")
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        header_layout = QVBoxLayout(header)
        header_label = QLabel("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ PancakeSwap DEX")
        header_label.setStyleSheet("font-weight: bold; color: #4CAF50;")
        header_layout.addWidget(header_label)
        layout.addWidget(header)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_group = self._create_wallet_group()
        layout.addWidget(wallet_group)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        balance_group = self._create_balance_group()
        layout.addWidget(balance_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
        sales_group = self._create_sales_settings_group()
        layout.addWidget(sales_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∞–∑–∞
        gas_group = self.create_gas_settings_group()
        layout.addWidget(gas_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        
        self.start_sales_btn = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏")
        self.start_sales_btn.clicked.connect(self.start_auto_sales)
        self.start_sales_btn.setEnabled(False)
        control_layout.addWidget(self.start_sales_btn)
        
        self.stop_sales_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_sales_btn.clicked.connect(self.stop_auto_sales)
        self.stop_sales_btn.setEnabled(False)
        control_layout.addWidget(self.stop_sales_btn)
        
        layout.addLayout(control_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.progress_bar = QProgressBar()
        layout.addWidget(self.progress_bar)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂
        history_group = self._create_history_group()
        layout.addWidget(history_group)
        
    def _create_wallet_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        group = QGroupBox("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞")
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_type_layout = QHBoxLayout()
        self.seed_radio = QRadioButton("SEED —Ñ—Ä–∞–∑–∞")
        self.private_key_radio = QRadioButton("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        self.seed_radio.setChecked(True)
        
        self.button_group = QButtonGroup()
        self.button_group.addButton(self.seed_radio)
        self.button_group.addButton(self.private_key_radio)
        
        connect_type_layout.addWidget(self.seed_radio)
        connect_type_layout.addWidget(self.private_key_radio)
        connect_type_layout.addStretch()
        layout.addLayout(connect_type_layout)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.wallet_input = QTextEdit()
        self.wallet_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ SEED —Ñ—Ä–∞–∑—É –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...")
        self.wallet_input.setMaximumHeight(60)
        layout.addWidget(self.wallet_input)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.connect_btn = QPushButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
        self.connect_btn.clicked.connect(self.connect_wallet)
        button_layout.addWidget(self.connect_btn)
        
        self.disconnect_btn = QPushButton("üîå –û—Ç–∫–ª—é—á–∏—Ç—å")
        self.disconnect_btn.clicked.connect(self.disconnect_wallet)
        self.disconnect_btn.setEnabled(False)
        button_layout.addWidget(self.disconnect_btn)
        
        layout.addLayout(button_layout)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_address_label = QLabel("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.wallet_address_label.setFont(QFont("Consolas", 10))
        layout.addWidget(self.wallet_address_label)
        
        group.setLayout(layout)
        return group
        
    def _create_balance_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        group = QGroupBox("–ë–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤")
        layout = QFormLayout()
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.bnb_balance_label = QLabel("0.0")
        self.bnb_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addRow("BNB:", self.bnb_balance_label)
        
        self.plex_balance_label = QLabel("0.0")
        self.plex_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addRow("PLEX ONE:", self.plex_balance_label)
        
        self.usdt_balance_label = QLabel("0.0")
        self.usdt_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addRow("USDT:", self.usdt_balance_label)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        self.refresh_btn.clicked.connect(self.update_balances)
        self.refresh_btn.setEnabled(False)
        layout.addRow(self.refresh_btn)
        
        group.setLayout(layout)
        return group
        
    def _create_sales_settings_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–∞–∂–∏"""
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂")
        layout = QFormLayout()
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.sell_token_combo = QComboBox()
        self.sell_token_combo.addItems(["PLEX ONE", "USDT", "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω..."])
        self.sell_token_combo.currentTextChanged.connect(self._on_sell_token_changed)
        layout.addRow("–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω:", self.sell_token_combo)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.custom_sell_token_input = QLineEdit()
        self.custom_sell_token_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...")
        self.custom_sell_token_input.setVisible(False)
        layout.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", self.custom_sell_token_input)
        
        # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –ø–æ–∫—É–ø–∫–∏
        self.buy_currency_combo = QComboBox()
        self.buy_currency_combo.addItems(["BNB", "USDT", "PLEX ONE", "–î—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞..."])
        self.buy_currency_combo.currentTextChanged.connect(self._on_buy_currency_changed)
        layout.addRow("–ü–æ–ª—É—á–∞—Ç—å –≤–∞–ª—é—Ç—É:", self.buy_currency_combo)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≤–∞–ª—é—Ç—ã
        self.custom_buy_currency_input = QLineEdit()
        self.custom_buy_currency_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è...")
        self.custom_buy_currency_input.setVisible(False)
        layout.addRow("–ê–¥—Ä–µ—Å –≤–∞–ª—é—Ç—ã:", self.custom_buy_currency_input)
        
        # –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏
        self.sell_amount_input = QDoubleSpinBox()
        self.sell_amount_input.setRange(0.00000001, 1000000)
        self.sell_amount_input.setDecimals(8)
        self.sell_amount_input.setValue(10.0)
        layout.addRow("–°—É–º–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", self.sell_amount_input)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–∞–º–∏
        self.sell_interval_input = QSpinBox()
        self.sell_interval_input.setRange(5, 3600)
        self.sell_interval_input.setValue(60)
        self.sell_interval_input.setSuffix(" —Å–µ–∫")
        layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–∞–º–∏:", self.sell_interval_input)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
        self.max_sales_input = QSpinBox()
        self.max_sales_input.setRange(1, 1000)
        self.max_sales_input.setValue(10)
        layout.addRow("–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–¥–∞–∂:", self.max_sales_input)
        
        # Slippage tolerance
        self.slippage_input = QDoubleSpinBox()
        self.slippage_input.setRange(0.1, 50.0)
        self.slippage_input.setValue(2.0)
        self.slippage_input.setSuffix(" %")
        layout.addRow("Slippage tolerance:", self.slippage_input)
        
        group.setLayout(layout)
        return group
        
    def _create_history_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂"""
        group = QGroupBox("–ò—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂")
        layout = QVBoxLayout()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(6)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–ü—Ä–æ–¥–∞–Ω–æ", "–ü–æ–ª—É—á–µ–Ω–æ", "–°—É–º–º–∞", "Tx Hash", "–°—Ç–∞—Ç—É—Å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.history_table.horizontalHeader()
        header.setStretchLastSection(True)
        
        layout.addWidget(self.history_table)
        
        group.setLayout(layout)
        return group
        
    def _on_sell_token_changed(self, token: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        is_custom = token == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω..."
        self.custom_sell_token_input.setVisible(is_custom)
        
    def _on_buy_currency_changed(self, currency: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –ø–æ–∫—É–ø–∫–∏"""
        is_custom = currency == "–î—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞..."
        self.custom_buy_currency_input.setVisible(is_custom)
        
    def connect_wallet(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        if not self.web3 or not self.web3.is_connected():
            self.log("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC", "ERROR")
            return
            
        wallet_input = self.wallet_input.toPlainText().strip()
        
        if not wallet_input:
            self.log("‚ùå –í–≤–µ–¥–∏—Ç–µ SEED —Ñ—Ä–∞–∑—É –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á", "ERROR")
            return
            
        try:
            if self.seed_radio.isChecked():
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SEED —Ñ—Ä–∞–∑—É
                if not Mnemonic:
                    self.log("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "ERROR")
                    return
                    
                mnemo = Mnemonic("english")
                if not mnemo.check(wallet_input):
                    self.log("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è SEED —Ñ—Ä–∞–∑–∞", "ERROR")
                    return
                    
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ seed
                seed = mnemo.to_seed(wallet_input)
                private_key = seed[:32].hex()
                
            else:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                private_key = wallet_input
                if private_key.startswith('0x'):
                    private_key = private_key[2:]
                    
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            self.account = Account.from_key(private_key)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.wallet_address_label.setText(f"–ê–¥—Ä–µ—Å: {self.account.address}")
            self.connect_btn.setEnabled(False)
            self.disconnect_btn.setEnabled(True)
            self.refresh_btn.setEnabled(True)
            self.start_sales_btn.setEnabled(True)
            
            self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
            self.update_balances()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "ERROR")

    def disconnect_wallet(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã
        if self.is_selling:
            self.stop_auto_sales()
            
        self.account = None
        self.balances = {}
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        self.balance_timer.stop()
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.wallet_input.clear()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.wallet_address_label.setText("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.connect_btn.setEnabled(True)
        self.disconnect_btn.setEnabled(False)
        self.refresh_btn.setEnabled(False)
        self.start_sales_btn.setEnabled(False)
        
        # –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤
        self.bnb_balance_label.setText("0.0")
        self.plex_balance_label.setText("0.0")
        self.usdt_balance_label.setText("0.0")
        
        self.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω", "INFO")

    def update_balances(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤"""
        if not self.account or not self.web3:
            return
            
        try:
            address = self.account.address
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ BNB
            bnb_balance = self.web3.eth.get_balance(address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ PLEX ONE
            plex_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(CONTRACTS['PLEX_ONE']),
                abi=ERC20_ABI
            )
            plex_balance = plex_contract.functions.balanceOf(address).call()
            plex_decimals = plex_contract.functions.decimals().call()
            plex_formatted = plex_balance / (10 ** plex_decimals)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT
            usdt_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(CONTRACTS['USDT']),
                abi=ERC20_ABI
            )
            usdt_balance = usdt_contract.functions.balanceOf(address).call()
            usdt_decimals = usdt_contract.functions.decimals().call()
            usdt_formatted = usdt_balance / (10 ** usdt_decimals)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.bnb_balance_label.setText(f"{float(bnb_formatted):.6f}")
            self.plex_balance_label.setText(f"{float(plex_formatted):.2f}")
            self.usdt_balance_label.setText(f"{float(usdt_formatted):.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
            self.balances = {
                'bnb': float(bnb_formatted),
                'plex': float(plex_formatted),
                'usdt': float(usdt_formatted)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}", "ERROR")

    def start_auto_sales(self):
        """–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        if self.is_selling:
            self.log("‚ö†Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã!", "WARNING")
            return
            
        if not self.account:
            self.log("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!", "ERROR")
            return
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self._validate_sales_settings():
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        sell_token = self._get_sell_token_address()
        buy_currency = self._get_buy_currency_address()
        amount = self.sell_amount_input.value()
        interval = self.sell_interval_input.value()
        max_sales = self.max_sales_input.value()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–∞ —Å–∞–º–æ–≥–æ –≤ —Å–µ–±—è
        if sell_token.lower() == buy_currency.lower():
            self.log("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —Å–∞–º –≤ —Å–µ–±—è!", "ERROR")
            return
            
        self.log(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏", "SUCCESS")
        self.log(f"üìä –ü—Ä–æ–¥–∞–µ–º: {self.sell_token_combo.currentText()}", "INFO")
        self.log(f"üìä –ü–æ–ª—É—á–∞–µ–º: {self.buy_currency_combo.currentText()}", "INFO")
        self.log(f"üìä –°—É–º–º–∞: {amount}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å, –º–∞–∫—Å: {max_sales}", "INFO")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.is_selling = True
        self.stop_selling = False
        self.start_sales_btn.setEnabled(False)
        self.stop_sales_btn.setEnabled(True)
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø—Ä–æ–¥–∞–∂
        self.selling_thread = threading.Thread(
            target=self._auto_sales_worker,
            args=(sell_token, buy_currency, amount, interval, max_sales),
            daemon=False
        )
        self.selling_thread.start()
        
    def _auto_sales_worker(self, sell_token: str, buy_currency: str, amount: float, interval: int, max_sales: int):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂"""
        sales_count = 0
        
        try:
            self.log(f"üíº –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂", "INFO")
            
            while sales_count < max_sales and not self.stop_selling:
                try:
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
                    self.log(f"üõí –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞ #{sales_count + 1}/{max_sales}", "INFO")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–º–µ–Ω–∞
                    if buy_currency.lower() == Web3.to_checksum_address(CONTRACTS['WBNB']).lower():
                        # –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ –∑–∞ BNB
                        result = self._sell_token_for_bnb(sell_token, amount)
                    else:
                        # –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ –∑–∞ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω
                        result = self._sell_token_for_token(sell_token, buy_currency, amount)
                        
                    if result and result.get('success'):
                        sales_count += 1
                        tx_hash = result.get('tx_hash', '')
                        
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        self._add_to_history(
                            self.sell_token_combo.currentText(),
                            self.buy_currency_combo.currentText(),
                            amount,
                            tx_hash,
                            "–£—Å–ø–µ—à–Ω–æ"
                        )
                        
                        self.log(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ #{sales_count} —É—Å–ø–µ—à–Ω–∞: {tx_hash[:20]}...", "SUCCESS")
                    else:
                        error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
                        self._add_to_history(
                            self.sell_token_combo.currentText(),
                            self.buy_currency_combo.currentText(),
                            amount,
                            "",
                            f"–û—à–∏–±–∫–∞: {error}"
                        )
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {error}", "ERROR")
                        
                except Exception as e:
                    self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}", "ERROR")
                    logger.exception("–û—à–∏–±–∫–∞ –≤ _auto_sales_worker")
                    
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–¥–∞–∂–∏
                if sales_count < max_sales and not self.stop_selling:
                    self.log(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–¥–∞–∂–∏", "INFO")
                    time.sleep(interval)
                    
            self.log(f"üèÅ –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {sales_count}/{max_sales}", "SUCCESS")
            
        except Exception as e:
            self.log(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞—Ö: {str(e)}", "ERROR")
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _auto_sales_worker")
            
        finally:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            self.is_selling = False
            QTimer.singleShot(0, lambda: self._finish_auto_sales())
            
    def _finish_auto_sales(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂ (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        self.start_sales_btn.setEnabled(True)
        self.stop_sales_btn.setEnabled(False)
        self.progress_bar.setValue(0)
        
    def stop_auto_sales(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        if not self.is_selling:
            self.log("‚ö†Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã", "WARNING")
            return
            
        self.stop_selling = True
        self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂...", "WARNING")
        
    def _validate_sales_settings(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–∞–∂"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        if self.sell_token_combo.currentText() == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω...":
            sell_token = self.custom_sell_token_input.text().strip()
            if not sell_token or not Web3.is_address(sell_token):
                self.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", "ERROR")
                return False
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã –ø–æ–∫—É–ø–∫–∏
        if self.buy_currency_combo.currentText() == "–î—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞...":
            buy_currency = self.custom_buy_currency_input.text().strip()
            if not buy_currency or not Web3.is_address(buy_currency):
                self.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è", "ERROR")
                return False
                
        return True
        
    def _get_sell_token_address(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        token = self.sell_token_combo.currentText()
        
        if token == "PLEX ONE":
            return Web3.to_checksum_address(CONTRACTS['PLEX_ONE'])
        elif token == "USDT":
            return Web3.to_checksum_address(CONTRACTS['USDT'])
        else:
            return Web3.to_checksum_address(self.custom_sell_token_input.text().strip())
            
    def _get_buy_currency_address(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        currency = self.buy_currency_combo.currentText()
        
        if currency == "BNB":
            return Web3.to_checksum_address(CONTRACTS['WBNB'])  # WBNB –¥–ª—è PancakeSwap
        elif currency == "USDT":
            return Web3.to_checksum_address(CONTRACTS['USDT'])
        elif currency == "PLEX ONE":
            return Web3.to_checksum_address(CONTRACTS['PLEX_ONE'])
        else:
            return Web3.to_checksum_address(self.custom_buy_currency_input.text().strip())
            
    def _sell_token_for_bnb(self, token_address: str, amount: float) -> Dict[str, Any]:
        """–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ –∑–∞ BNB —á–µ—Ä–µ–∑ PancakeSwap"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞
            router_address = "0x10ED43C718714eb63d5aA57B78B54704E256024E"  # PancakeSwap V2 Router
            router_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(router_address),
                abi=PANCAKE_ROUTER_ABI
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ decimals —Ç–æ–∫–µ–Ω–∞
            token_contract = self.web3.eth.contract(
                address=token_address,
                abi=ERC20_ABI
            )
            decimals = token_contract.functions.decimals().call()
            amount_in = int(amount * (10 ** decimals))
            
            # Approve —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
            self._approve_token(token_address, router_address, amount_in)
            
            # –ü—É—Ç—å –æ–±–º–µ–Ω–∞: Token -> WBNB
            path = [token_address, Web3.to_checksum_address(CONTRACTS['WBNB'])]
            
            # Deadline (10 –º–∏–Ω—É—Ç)
            deadline = int(time.time()) + 600
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å —É—á–µ—Ç–æ–º slippage
            slippage = self.slippage_input.value()
            amount_out_min = 0  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            nonce = self.web3.eth.get_transaction_count(self.account.address)
            
            transaction = router_contract.functions.swapExactTokensForETH(
                amount_in,
                amount_out_min,
                path,
                self.account.address,
                deadline
            ).build_transaction({
                'from': self.account.address,
                'gas': 300000,
                'gasPrice': self.get_gas_price_wei(),
                'nonce': nonce,
            })
            
            # –ü–æ–¥–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash)
            
            return {
                'success': True,
                'tx_hash': tx_hash.hex(),
                'gas_used': tx_receipt['gasUsed']
            }
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ –∑–∞ BNB")
            return {'success': False, 'error': str(e)}
            
    def _sell_token_for_token(self, sell_token: str, buy_token: str, amount: float) -> Dict[str, Any]:
        """–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ –∑–∞ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ PancakeSwap"""
        try:
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ _sell_token_for_bnb, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º swapExactTokensForTokens
            router_address = "0x10ED43C718714eb63d5aA57B78B54704E256024E"
            router_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(router_address),
                abi=PANCAKE_ROUTER_ABI
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ decimals —Ç–æ–∫–µ–Ω–∞
            token_contract = self.web3.eth.contract(
                address=sell_token,
                abi=ERC20_ABI
            )
            decimals = token_contract.functions.decimals().call()
            amount_in = int(amount * (10 ** decimals))
            
            # Approve —Ç–æ–∫–µ–Ω–æ–≤
            self._approve_token(sell_token, router_address, amount_in)
            
            # –ü—É—Ç—å –æ–±–º–µ–Ω–∞
            path = [sell_token, buy_token]
            
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            nonce = self.web3.eth.get_transaction_count(self.account.address)
            deadline = int(time.time()) + 600
            
            transaction = router_contract.functions.swapExactTokensForTokens(
                amount_in,
                0,  # amount_out_min
                path,
                self.account.address,
                deadline
            ).build_transaction({
                'from': self.account.address,
                'gas': 300000,
                'gasPrice': self.get_gas_price_wei(),
                'nonce': nonce,
            })
            
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash)
            
            return {
                'success': True,
                'tx_hash': tx_hash.hex(),
                'gas_used': tx_receipt['gasUsed']
            }
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω")
            return {'success': False, 'error': str(e)}
            
    def _approve_token(self, token_address: str, spender: str, amount: int):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–∞—Ç —Ç–æ–∫–µ–Ω–∞"""
        token_contract = self.web3.eth.contract(
            address=token_address,
            abi=ERC20_ABI
        )
        
        nonce = self.web3.eth.get_transaction_count(self.account.address)
        
        transaction = token_contract.functions.approve(
            spender,
            amount
        ).build_transaction({
            'from': self.account.address,
            'gas': 100000,
            'gasPrice': self.get_gas_price_wei(),
            'nonce': nonce,
        })
        
        signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
        tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
        self.web3.eth.wait_for_transaction_receipt(tx_hash)
        
    def _add_to_history(self, sell_token: str, buy_currency: str, amount: float, tx_hash: str, status: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂"""
        row = self.history_table.rowCount()
        self.history_table.insertRow(row)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.history_table.setItem(row, 0, QTableWidgetItem(datetime.now().strftime("%H:%M:%S")))
        self.history_table.setItem(row, 1, QTableWidgetItem(sell_token))
        self.history_table.setItem(row, 2, QTableWidgetItem(buy_currency))
        self.history_table.setItem(row, 3, QTableWidgetItem(f"{amount:.6f}"))
        self.history_table.setItem(row, 4, QTableWidgetItem(tx_hash[:10] + "..." if tx_hash else ""))
        
        status_item = QTableWidgetItem(status)
        if "–£—Å–ø–µ—à–Ω–æ" in status:
            status_item.setBackground(QColor(0, 100, 0))
        elif "–û—à–∏–±–∫–∞" in status:
            status_item.setBackground(QColor(100, 0, 0))
        self.history_table.setItem(row, 5, status_item)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.history_table.scrollToBottom()
