"""Auto Sales Tab - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ PancakeSwap"""

import json
import threading
import time
from datetime import datetime
from typing import Dict, Any, Optional, List
from decimal import Decimal

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QHeaderView,
    QComboBox, QDoubleSpinBox, QSpinBox, QTextEdit, QCheckBox,
    QMessageBox, QSplitter, QFormLayout
)
from PyQt5.QtCore import pyqtSignal, QTimer, Qt
from PyQt5.QtGui import QFont, QColor

from web3 import Web3
from eth_account import Account
from .base_tab import BaseTab
from ...utils.cache_manager import token_cache
from ...utils.gas_manager import GasManager, GasPriority
from ...utils.token_safety import TokenSafetyChecker, SafetyLevel
from ...utils.async_manager import get_async_manager
from ...utils.progress_manager import progress_manager
from ...utils.analytics import analytics_manager, Operation, OperationType, OperationStatus
from ...utils.memory_manager import memory_manager

# ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –Ω–æ —Å allowance)
ERC20_ABI = json.loads("""
[
  {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},
  {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},
  {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},
  {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},
  {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},
  {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},
  {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
]
""")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è PancakeSwap Router
PANCAKE_ROUTER_ABI = json.loads('[{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"}]')


class AutoSalesTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ PancakeSwap"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    balance_updated = pyqtSignal(dict)
    sale_completed = pyqtSignal(dict)
    
    def __init__(self, main_window, parent=None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.web3 = None
        self.account = None
        self.monitoring_thread = None
        self.is_monitoring = False
        self.stop_monitoring = threading.Event()
        self.monitored_tokens = {}
        self.sales_history = []
        
        # –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–≤ checksum —Ñ–æ—Ä–º–∞—Ç–µ)
        self.PANCAKE_ROUTER = Web3.to_checksum_address("0x10ED43C718714eb63d5aA57B78B54704E256024E")
        self.WBNB = Web3.to_checksum_address("0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c")
        self.USDT = Web3.to_checksum_address("0x55d398326f99059ff775485246999027b3197955")
        self.PLEX_ONE = Web3.to_checksum_address("0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.gas_manager = None
        self.safety_checker = None
        self.async_manager = None
        
        super().__init__(main_window, parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        self._init_web3()
        
    def _init_web3(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Web3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            rpc_urls = [
                'https://bsc-dataseed.binance.org/',
                'https://bsc-dataseed1.binance.org/',
                'https://bsc-dataseed2.binance.org/',
                'https://bsc-dataseed3.binance.org/',
                'https://bsc-dataseed4.binance.org/',
                'https://bsc-dataseed1.defibit.io/',
                'https://bsc-dataseed1.ninicoin.io/'
            ]
            
            self.web3 = None
            for rpc_url in rpc_urls:
                try:
                    self.web3 = Web3(Web3.HTTPProvider(rpc_url, request_kwargs={'timeout': 10}))
                    if self.web3.is_connected():
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
                        latest_block = self.web3.eth.block_number
                        self.log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC —á–µ—Ä–µ–∑ {rpc_url} (–±–ª–æ–∫: {latest_block})", "SUCCESS")
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                        self.gas_manager = GasManager(self.web3)
                        self.safety_checker = TokenSafetyChecker(self.web3)
                        self.async_manager = get_async_manager(self.web3)
                        
                        self.log("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "SUCCESS")
                        break
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {rpc_url}: {str(e)}", "ERROR")
                    continue
            
            if not self.web3 or not self.web3.is_connected():
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC", "ERROR")
                # –°–æ–∑–¥–∞–µ–º fallback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.web3 = Web3(Web3.HTTPProvider('https://bsc-dataseed.binance.org/'))
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3: {str(e)}", "ERROR")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.web3 = Web3(Web3.HTTPProvider('https://bsc-dataseed.binance.org/'))
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; padding: 10px;")
        layout.addWidget(title_label)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_group = self._create_wallet_group()
        layout.addWidget(wallet_group)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
        left_panel = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏")
        left_layout = QVBoxLayout(left_panel)
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        token_layout = QFormLayout()
        
        self.token_combo = QComboBox()
        self.token_combo.addItems(['PLEX ONE', '–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω'])
        self.token_combo.currentTextChanged.connect(self._on_token_changed)
        token_layout.addRow("–¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", self.token_combo)
        
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.custom_token_input.setVisible(False)
        self.custom_token_input.textChanged.connect(self._update_current_balance)
        token_layout.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", self.custom_token_input)
        
        # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.current_balance_label = QLabel("0.0000")
        self.current_balance_label.setStyleSheet("font-weight: bold; color: #2E8B57;")
        token_layout.addRow("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", self.current_balance_label)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.refresh_balances_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã")
        self.refresh_balances_btn.clicked.connect(self.refresh_all_balances)
        self.refresh_balances_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        token_layout.addRow("", self.refresh_balances_btn)
        
        # –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
        self.target_combo = QComboBox()
        self.target_combo.addItems(['BNB', 'USDT'])
        token_layout.addRow("–ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤:", self.target_combo)
        
        # –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.threshold_input = QDoubleSpinBox()
        self.threshold_input.setRange(0.00000001, 1000000000)
        self.threshold_input.setDecimals(8)
        self.threshold_input.setValue(100.0)
        self.threshold_input.setSuffix(" —Ç–æ–∫–µ–Ω–æ–≤")
        token_layout.addRow("–ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", self.threshold_input)
        
        # –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏ - –ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.sell_mode_combo = QComboBox()
        self.sell_mode_combo.addItems(['–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞', '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        self.sell_mode_combo.currentTextChanged.connect(self._on_sell_mode_changed)
        token_layout.addRow("–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏:", self.sell_mode_combo)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.sell_percentage = QSpinBox()
        self.sell_percentage.setRange(1, 100)
        self.sell_percentage.setValue(100)
        self.sell_percentage.setSuffix(" %")
        token_layout.addRow("–ü—Ä–æ–¥–∞–≤–∞—Ç—å %:", self.sell_percentage)
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.sell_quantity = QDoubleSpinBox()
        self.sell_quantity.setRange(0.00000001, 1000000000)
        self.sell_quantity.setDecimals(8)
        self.sell_quantity.setValue(100.0)
        self.sell_quantity.setSuffix(" —Ç–æ–∫–µ–Ω–æ–≤")
        self.sell_quantity.setVisible(False)
        token_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:", self.sell_quantity)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        self.min_price_input = QDoubleSpinBox()
        self.min_price_input.setRange(0, 1000000)
        self.min_price_input.setDecimals(8)
        self.min_price_input.setValue(0)
        self.min_price_input.setPrefix("$")
        token_layout.addRow("–ú–∏–Ω. —Ü–µ–Ω–∞ (0=–ª—é–±–∞—è):", self.min_price_input)
        
        # Slippage
        self.slippage_input = QSpinBox()
        self.slippage_input.setRange(1, 50)
        self.slippage_input.setValue(12)
        self.slippage_input.setSuffix(" %")
        token_layout.addRow("Slippage:", self.slippage_input)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_interval = QSpinBox()
        self.check_interval.setRange(5, 3600)
        self.check_interval.setValue(30)
        self.check_interval.setSuffix(" —Å–µ–∫")
        token_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:", self.check_interval)
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏
        self.cyclic_sales_checkbox = QCheckBox("–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏")
        self.cyclic_sales_checkbox.setToolTip("–ü—Ä–æ–¥–∞–≤–∞—Ç—å –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä–æ–≥–∞")
        self.cyclic_sales_checkbox.setChecked(False)
        token_layout.addRow("", self.cyclic_sales_checkbox)
        
        left_layout.addLayout(token_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞
        gas_group = self.create_gas_settings_group()
        left_layout.addWidget(gas_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        self.start_btn.clicked.connect(self.start_monitoring)
        control_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.clicked.connect(self.stop_monitoring_func)
        self.stop_btn.setEnabled(False)
        control_layout.addWidget(self.stop_btn)
        
        self.test_sell_btn = QPushButton("üß™ –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂–∏")
        self.test_sell_btn.clicked.connect(self.test_sell)
        control_layout.addWidget(self.test_sell_btn)
        
        left_layout.addLayout(control_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        monitor_buttons_layout = QHBoxLayout()
        
        self.add_monitor_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        self.add_monitor_btn.clicked.connect(self.add_to_monitoring)
        monitor_buttons_layout.addWidget(self.add_monitor_btn)
        
        self.update_quantity_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        self.update_quantity_btn.clicked.connect(self.update_sell_quantity)
        self.update_quantity_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
        monitor_buttons_layout.addWidget(self.update_quantity_btn)
        
        self.debug_balance_btn = QPushButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞")
        self.debug_balance_btn.clicked.connect(self.debug_balance)
        self.debug_balance_btn.setToolTip("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
        monitor_buttons_layout.addWidget(self.debug_balance_btn)
        
        self.reconnect_btn = QPushButton("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å")
        self.reconnect_btn.clicked.connect(self.reconnect_network)
        self.reconnect_btn.setToolTip("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC —Å–µ—Ç–∏")
        monitor_buttons_layout.addWidget(self.reconnect_btn)
        
        left_layout.addLayout(monitor_buttons_layout)
        
        left_layout.addStretch()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∏—Å—Ç–æ—Ä–∏—è
        right_panel = QGroupBox("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∏—Å—Ç–æ—Ä–∏—è")
        right_layout = QVBoxLayout(right_panel)
        
        # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.status_label = QLabel("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        self.status_label.setStyleSheet("font-weight: bold; padding: 5px;")
        right_layout.addWidget(self.status_label)
        
        # –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        self.balance_info = QTextEdit()
        self.balance_info.setReadOnly(True)
        self.balance_info.setMaximumHeight(150)
        self.balance_info.setPlaceholderText("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–∞—Ö...")
        right_layout.addWidget(self.balance_info)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        balances_group = QGroupBox("üí∞ –ë–∞–ª–∞–Ω—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        balances_layout = QVBoxLayout(balances_group)
        
        # BNB –±–∞–ª–∞–Ω—Å
        self.bnb_balance_label = QLabel("BNB: 0.000000")
        self.bnb_balance_label.setStyleSheet("font-weight: bold; color: #F0B90B; padding: 5px;")
        balances_layout.addWidget(self.bnb_balance_label)
        
        # USDT –±–∞–ª–∞–Ω—Å
        self.usdt_balance_label = QLabel("USDT: 0.000000")
        self.usdt_balance_label.setStyleSheet("font-weight: bold; color: #26A17B; padding: 5px;")
        balances_layout.addWidget(self.usdt_balance_label)
        
        # PLEX ONE –±–∞–ª–∞–Ω—Å
        self.plex_balance_label = QLabel("PLEX ONE: 0.000000")
        self.plex_balance_label.setStyleSheet("font-weight: bold; color: #FF6B35; padding: 5px;")
        balances_layout.addWidget(self.plex_balance_label)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.refresh_balances_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        self.refresh_balances_btn.clicked.connect(self.refresh_all_balances)
        self.refresh_balances_btn.setStyleSheet("""
            QPushButton {
                background-color: #1e3a8a;
                border: 1px solid #3b82f6;
                border-radius: 5px;
                padding: 8px;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #1e40af;
                border-color: #60a5fa;
            }
            QPushButton:pressed {
                background-color: #1e3a8a;
            }
        """)
        balances_layout.addWidget(self.refresh_balances_btn)
        
        right_layout.addWidget(balances_group)
        
        # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        tokens_label = QLabel("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:")
        right_layout.addWidget(tokens_label)
        
        self.monitored_table = QTableWidget()
        self.monitored_table.setColumnCount(6)
        self.monitored_table.setHorizontalHeaderLabels([
            "–¢–æ–∫–µ–Ω", "–ü–æ—Ä–æ–≥", "–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤", "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        header = self.monitored_table.horizontalHeader()
        header.setStretchLastSection(True)
        right_layout.addWidget(self.monitored_table)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂
        history_label = QLabel("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂:")
        right_layout.addWidget(history_label)
        
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(6)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–¢–æ–∫–µ–Ω", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü–æ–ª—É—á–µ–Ω–æ", "Tx Hash", "–°—Ç–∞—Ç—É—Å"
        ])
        header = self.history_table.horizontalHeader()
        header.setStretchLastSection(True)
        right_layout.addWidget(self.history_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ splitter
        splitter.addWidget(left_panel)
        splitter.addWidget(right_panel)
        splitter.setSizes([500, 700])
        
        layout.addWidget(splitter)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.balance_timer = QTimer()
        self.balance_timer.timeout.connect(self.update_balance_display)
        self.balance_timer.start(10000)  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._on_sell_mode_changed(self.sell_mode_combo.currentText())
        
    def _on_token_changed(self, token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        is_custom = token == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω"
        self.custom_token_input.setVisible(is_custom)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞
        self._update_current_balance()
    
    def _on_sell_mode_changed(self, mode):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        is_percentage = mode == "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞"
        self.sell_percentage.setVisible(is_percentage)
        self.sell_quantity.setVisible(not is_percentage)
    
    def _update_current_balance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        if not self.account or not self.web3:
            self.current_balance_label.setText("0.0000")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            if self.token_combo.currentText() == "PLEX ONE":
                token_address = self.PLEX_ONE
            else:
                token_address = self.custom_token_input.text().strip()
                if not Web3.is_address(token_address):
                    self.current_balance_label.setText("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å")
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = self._get_token_balance(token_address)
            self.current_balance_label.setText(f"{balance:.4f}")
            
        except Exception as e:
            self.current_balance_label.setText("–û—à–∏–±–∫–∞")
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
    
    def connect_wallet(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        wallet_data = self.wallet_input.toPlainText().strip()
        
        if not wallet_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ SEED —Ñ—Ä–∞–∑—É!")
            return
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if ' ' in wallet_data:  # SEED —Ñ—Ä–∞–∑–∞
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–µ—Ä–∏–≤–∞—Ü–∏—é –ø–æ BIP44: m/44'/60'/0'/0/0
                account_path = "m/44'/60'/0'/0/0"
                created = False
                # 1) –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ eth_account (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –¥–æ–ø. –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
                if hasattr(Account, 'from_mnemonic'):
                    try:
                        self.account = Account.from_mnemonic(wallet_data, account_path=account_path)  # type: ignore[arg-type]
                        created = True
                    except Exception:
                        created = False
                # 2) –§–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É mnemonic + bip_utils (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
                if not created:
                    try:
                        from mnemonic import Mnemonic
                        from bip_utils import Bip39SeedGenerator, Bip44, Bip44Coins, Bip44Changes  # type: ignore[import]
                        mnemo = Mnemonic("english")
                        if not mnemo.check(wallet_data):
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è SEED —Ñ—Ä–∞–∑–∞")
                        seed_bytes = Bip39SeedGenerator(wallet_data).Generate()
                        bip44_ctx = Bip44.FromSeed(seed_bytes, Bip44Coins.ETHEREUM).Purpose().Coin().Account(0).Change(Bip44Changes.CHAIN_EXT).AddressIndex(0)
                        private_key = bip44_ctx.PrivateKey().Raw().ToHex()
                        self.account = Account.from_key(private_key)
                        created = True
                    except Exception:
                        created = False
                # 3) –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                if not created:
                    QMessageBox.critical(
                        self,
                        "–û—à–∏–±–∫–∞",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏–∑ SEED —Ñ—Ä–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: mnemonic, bip_utils."
                    )
                    return
            else:  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                private_key = wallet_data
                if private_key.startswith('0x'):
                    private_key = private_key[2:]
                # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
                self.account = Account.from_key(private_key)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.wallet_address_label.setText(f"–ê–¥—Ä–µ—Å: {self.account.address}")
            self.connect_btn.setEnabled(False)
            self.disconnect_btn.setEnabled(True)
            
            self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã
            self.refresh_all_balances()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫:\n{str(e)}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}", "ERROR")
    
    def disconnect_wallet(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        self.account = None
        self.wallet_address_label.setText("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.disconnect_btn.setEnabled(False)
        self.balance_info.clear()
        
        # –û—á–∏—â–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        self.bnb_balance_label.setText("BNB: 0.000000")
        self.usdt_balance_label.setText("USDT: 0.000000")
        self.plex_balance_label.setText("PLEX ONE: 0.000000")
        self.current_balance_label.setText("0.0000")
        
        self.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω", "INFO")
    
    def add_to_monitoring(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.token_combo.currentText() == "PLEX ONE":
            token_address = self.PLEX_ONE
            token_name = "PLEX ONE"
        else:
            token_address = self.custom_token_input.text().strip()
            if not Web3.is_address(token_address):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return
            token_name = self._get_token_name(token_address)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        sell_mode = self.sell_mode_combo.currentText()
        if sell_mode == "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞":
            sell_amount = self.sell_percentage.value()
            sell_type = "percentage"
        else:
            sell_amount = self.sell_quantity.value()
            sell_type = "quantity"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitored_tokens[token_address] = {
            'name': token_name,
            'threshold': self.threshold_input.value(),
            'target': self.target_combo.currentText(),
            'sell_mode': sell_mode,
            'sell_type': sell_type,
            'sell_amount': sell_amount,
            'percentage': self.sell_percentage.value(),
            'quantity': self.sell_quantity.value(),
            'min_price': self.min_price_input.value(),
            'slippage': self.slippage_input.value(),
            'cyclic_sales': self.cyclic_sales_checkbox.isChecked(),
            'last_sale_time': 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        row = self.monitored_table.rowCount()
        self.monitored_table.insertRow(row)
        self.monitored_table.setItem(row, 0, QTableWidgetItem(token_name))
        self.monitored_table.setItem(row, 1, QTableWidgetItem(f"{self.threshold_input.value():.2f}"))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏
        sell_display = f"{sell_mode}: {sell_amount}"
        if sell_type == "percentage":
            sell_display += "%"
        else:
            sell_display += " —Ç–æ–∫–µ–Ω–æ–≤"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
        if self.cyclic_sales_checkbox.isChecked():
            sell_display += " (—Ü–∏–∫–ª)"
        
        self.monitored_table.setItem(row, 2, QTableWidgetItem(sell_display))
        
        self.monitored_table.setItem(row, 3, QTableWidgetItem(self.target_combo.currentText()))
        self.monitored_table.setItem(row, 4, QTableWidgetItem("0"))
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        remove_btn = QPushButton("‚ùå")
        remove_btn.clicked.connect(lambda: self.remove_from_monitoring(token_address))
        self.monitored_table.setCellWidget(row, 5, remove_btn)
        
        self.log(f"‚úÖ {token_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "SUCCESS")
    
    def update_sell_quantity(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        if self.token_combo.currentText() == "PLEX ONE":
            token_address = self.PLEX_ONE
            token_name = "PLEX ONE"
        else:
            token_address = self.custom_token_input.text().strip()
            if not Web3.is_address(token_address):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return
            token_name = self._get_token_name(token_address)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        balance = self._get_token_balance(token_address)
        
        if balance <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞ {token_name}!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self.sell_quantity.setValue(balance)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        QMessageBox.information(
            self,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {balance:.4f} {token_name}"
        )
        
        self.log(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {balance:.4f} {token_name}", "INFO")
    
    def refresh_all_balances(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        self.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤...", "INFO")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.web3 or not self.web3.is_connected():
                self.log("‚ö†Ô∏è Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...", "WARNING")
                self._init_web3()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º BNB –±–∞–ª–∞–Ω—Å
            try:
                bnb_balance = self.web3.eth.get_balance(self.account.address)
                bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
                self.bnb_balance_label.setText(f"BNB: {bnb_formatted:.6f}")
                self.log(f"üí∞ BNB –±–∞–ª–∞–Ω—Å: {bnb_formatted:.6f}", "SUCCESS")
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BNB –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
                self.bnb_balance_label.setText("BNB: –û—à–∏–±–∫–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º USDT –±–∞–ª–∞–Ω—Å
            try:
                usdt_balance = self._get_token_balance(self.USDT)
                self.usdt_balance_label.setText(f"USDT: {usdt_balance:.6f}")
                if usdt_balance > 0:
                    self.log(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: {usdt_balance:.6f}", "SUCCESS")
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è USDT –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
                self.usdt_balance_label.setText("USDT: –û—à–∏–±–∫–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º PLEX ONE –±–∞–ª–∞–Ω—Å
            try:
                plex_balance = self._get_token_balance(self.PLEX_ONE)
                self.plex_balance_label.setText(f"PLEX ONE: {plex_balance:.6f}")
                if plex_balance > 0:
                    self.log(f"üí∞ PLEX ONE –±–∞–ª–∞–Ω—Å: {plex_balance:.6f}", "SUCCESS")
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PLEX ONE –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
                self.plex_balance_label.setText("PLEX ONE: –û—à–∏–±–∫–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            self._update_current_balance()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.update_balance_display()
            
            self.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}", "ERROR")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã:\n{str(e)}")
    
    def refresh_all_balances(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤"""
        self.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤...", "INFO")
        
        if not self.account:
            self.log("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "ERROR")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º BNB –±–∞–ª–∞–Ω—Å
        try:
            bnb_balance = self.web3.eth.get_balance(self.account.address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            self.bnb_balance_label.setText(f"BNB: {bnb_formatted:.6f}")
            self.log(f"üí∞ BNB –±–∞–ª–∞–Ω—Å: {bnb_formatted:.6f}", "SUCCESS")
        except Exception as e:
            self.bnb_balance_label.setText("BNB: –û—à–∏–±–∫–∞")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BNB –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º USDT –±–∞–ª–∞–Ω—Å
        try:
            usdt_balance = self._get_token_balance(self.USDT)
            self.usdt_balance_label.setText(f"USDT: {usdt_balance:.6f}")
            self.log(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: {usdt_balance:.6f}", "SUCCESS")
        except Exception as e:
            self.usdt_balance_label.setText("USDT: –û—à–∏–±–∫–∞")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è USDT –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º PLEX ONE –±–∞–ª–∞–Ω—Å
        try:
            plex_balance = self._get_token_balance(self.PLEX_ONE)
            self.plex_balance_label.setText(f"PLEX ONE: {plex_balance:.6f}")
            self.log(f"üí∞ PLEX ONE –±–∞–ª–∞–Ω—Å: {plex_balance:.6f}", "SUCCESS")
        except Exception as e:
            self.plex_balance_label.setText("PLEX ONE: –û—à–∏–±–∫–∞")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PLEX ONE –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        self.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")

    def debug_balance(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.log("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–õ–ê–ù–°–ê ===", "INFO")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
        if not self.account:
            self.log("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "ERROR")
            QMessageBox.warning(self, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return
        
        self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.web3:
            self.log("‚ùå Web3 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "ERROR")
            QMessageBox.warning(self, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "Web3 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        
        if not self.web3.is_connected():
            self.log("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC —Å–µ—Ç–∏", "ERROR")
            QMessageBox.warning(self, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC —Å–µ—Ç–∏!")
            return
        
        self.log("‚úÖ Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC", "SUCCESS")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º BNB –±–∞–ª–∞–Ω—Å
        try:
            bnb_balance = self.web3.eth.get_balance(self.account.address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            self.log(f"üí∞ BNB –±–∞–ª–∞–Ω—Å: {bnb_formatted:.6f}", "SUCCESS")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BNB –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        if self.token_combo.currentText() == "PLEX ONE":
            token_address = self.PLEX_ONE
            token_name = "PLEX ONE"
        else:
            token_address = self.custom_token_input.text().strip()
            if not Web3.is_address(token_address):
                self.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞", "ERROR")
                QMessageBox.warning(self, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return
            token_name = self._get_token_name(token_address)
        
        self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω: {token_name} ({token_address})", "INFO")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
        balance = self._get_token_balance(token_address)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._update_current_balance()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if balance > 0:
            QMessageBox.information(
                self,
                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –Ω–∞–π–¥–µ–Ω!\n\n"
                f"–¢–æ–∫–µ–Ω: {token_name}\n"
                f"–ê–¥—Ä–µ—Å: {token_address}\n"
                f"–ë–∞–ª–∞–Ω—Å: {balance:.6f}\n"
                f"–ö–æ—à–µ–ª–µ–∫: {self.account.address}"
            )
        else:
            QMessageBox.warning(
                self,
                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                f"–¢–æ–∫–µ–Ω: {token_name}\n"
                f"–ê–¥—Ä–µ—Å: {token_address}\n"
                f"–ö–æ—à–µ–ª–µ–∫: {self.account.address}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –¢–æ–∫–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                f"‚Ä¢ –ù–∞ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞\n"
                f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é"
            )
        
        self.log("üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===", "INFO")
    
    def reconnect_network(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏"""
        self.log("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ BSC —Å–µ—Ç–∏...", "INFO")
        
        try:
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web3
            self._init_web3()
            
            if self.web3 and self.web3.is_connected():
                self.log("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if self.account:
                    self.refresh_all_balances()
                
                QMessageBox.information(
                    self,
                    "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ BSC —Å–µ—Ç–∏!\n\n–ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
                )
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏", "ERROR")
                QMessageBox.warning(
                    self,
                    "–û—à–∏–±–∫–∞",
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC —Å–µ—Ç–∏.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                )
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "ERROR")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{str(e)}"
            )
    
    def remove_from_monitoring(self, token_address):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if token_address in self.monitored_tokens:
            del self.monitored_tokens[token_address]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self._refresh_monitored_table()
            self.log(f"‚ùå –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "INFO")
    
    def _refresh_monitored_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        self.monitored_table.setRowCount(0)
        
        for token_address, settings in self.monitored_tokens.items():
            row = self.monitored_table.rowCount()
            self.monitored_table.insertRow(row)
            self.monitored_table.setItem(row, 0, QTableWidgetItem(settings['name']))
            self.monitored_table.setItem(row, 1, QTableWidgetItem(f"{settings['threshold']:.2f}"))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏
            sell_display = f"{settings.get('sell_mode', '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞')}: {settings.get('sell_amount', settings.get('percentage', 100))}"
            if settings.get('sell_type', 'percentage') == "percentage":
                sell_display += "%"
            else:
                sell_display += " —Ç–æ–∫–µ–Ω–æ–≤"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
            if settings.get('cyclic_sales', False):
                sell_display += " (—Ü–∏–∫–ª)"
            
            self.monitored_table.setItem(row, 2, QTableWidgetItem(sell_display))
            
            self.monitored_table.setItem(row, 3, QTableWidgetItem(settings['target']))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            balance = self._get_token_balance(token_address)
            self.monitored_table.setItem(row, 4, QTableWidgetItem(f"{balance:.4f}"))
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            remove_btn = QPushButton("‚ùå")
            remove_btn.clicked.connect(lambda addr=token_address: self.remove_from_monitoring(addr))
            self.monitored_table.setCellWidget(row, 5, remove_btn)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        if not self.monitored_tokens:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
            return
        
        if self.is_monitoring:
            self.log("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω", "WARNING")
            return
        
        self.is_monitoring = True
        self.stop_monitoring.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.status_label.setText("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
        self.status_label.setStyleSheet("color: green; font-weight: bold; padding: 5px;")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_thread = threading.Thread(target=self._monitoring_worker, daemon=True)
        self.monitoring_thread.start()
        
        self.log("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω", "SUCCESS")
    
    def stop_monitoring_func(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.is_monitoring:
            return
        
        self.is_monitoring = False
        self.stop_monitoring.set()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.status_label.setText("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.status_label.setStyleSheet("color: orange; font-weight: bold; padding: 5px;")
        
        self.log("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "INFO")
    
    def _monitoring_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        interval = self.check_interval.value()
        
        while not self.stop_monitoring.is_set():
            try:
                current_time = time.time()
                
                for token_address, settings in self.monitored_tokens.items():
                    if self.stop_monitoring.is_set():
                        break
                    
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
                    balance = self._get_token_balance(token_address)
                    
                    should_sell = False
                    sell_reason = ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                    if settings.get('cyclic_sales', False):
                        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                        time_since_last_sale = current_time - settings.get('last_sale_time', 0)
                        if time_since_last_sale >= interval:
                            should_sell = True
                            sell_reason = f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)"
                    else:
                        # –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
                        if balance >= settings['threshold']:
                            should_sell = True
                            sell_reason = f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥: {balance:.4f} >= {settings['threshold']}"
                    
                    if should_sell and balance > 0:
                        self.log(f"üéØ {sell_reason} –¥–ª—è {settings['name']}", "INFO")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                        if settings.get('sell_type', 'percentage') == 'percentage':
                            sell_amount = balance * (settings.get('sell_amount', settings.get('percentage', 100)) / 100)
                        else:
                            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            sell_amount = min(settings.get('sell_amount', settings.get('quantity', 100)), balance)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å
                        if sell_amount <= 0:
                            self.log(f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {settings['name']}", "WARNING")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–Ω–∏–º—É–º
                        if settings['min_price'] > 0:
                            price = self._get_token_price(token_address, settings['target'])
                            if price < settings['min_price']:
                                self.log(f"‚ö†Ô∏è –¶–µ–Ω–∞ {price:.8f} –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {settings['min_price']}", "WARNING")
                                continue
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
                        self._execute_sell(token_address, sell_amount, settings)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
                        self.monitored_tokens[token_address]['last_sale_time'] = current_time
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                self.stop_monitoring.wait(interval)
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}", "ERROR")
                time.sleep(5)
    
    def _retry_call(self, func, max_retries: int = 3, delay: float = 2.0):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è retry –¥–ª—è –≤—ã–∑–æ–≤–æ–≤"""
        last_error = None
        
        for attempt in range(max_retries):
            try:
                return func()
            except Exception as e:
                last_error = e
                if attempt < max_retries - 1:
                    self.log(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}", "WARNING")
                    self.log(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...", "INFO")
                    time.sleep(delay * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
        raise last_error

    def _check_liquidity(self, token_address: str, min_liquidity_bnb: float = 0.1) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        try:
            # –î–ª—è PLEX ONE –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Å USDT
            if token_address.lower() == self.PLEX_ONE.lower():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å PLEX ONE -> USDT
                test_amount = self.web3.to_wei(1000, 'ether')  # 1000 PLEX ONE (9 decimals)
                path = [token_address, self.USDT]
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ WBNB
                test_amount = self.web3.to_wei(0.001, 'ether')  # 0.001 BNB
                path = [self.WBNB, token_address]
            
            amounts = self._get_amounts_out_with_retry(test_amount, path)
            if amounts and len(amounts) > 0 and amounts[-1] > 0:
                self.log("‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "SUCCESS")
                return True
            else:
                self.log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞", "WARNING")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}", "ERROR")
            return False

    def _get_amounts_out_with_retry(self, amount_in: int, path: List[str]) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ —Å retry"""
        def _get():
            path_checksum = [Web3.to_checksum_address(addr) for addr in path]
            router_contract = self.web3.eth.contract(
                address=self.PANCAKE_ROUTER,
                abi=PANCAKE_ROUTER_ABI
            )
            return router_contract.functions.getAmountsOut(amount_in, path_checksum).call()
            
        try:
            amounts = self._retry_call(_get)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if not amounts or len(amounts) < 2:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞")
                
            if amounts[-1] == 0:
                raise ValueError("–ù—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
                
            return amounts
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}", "ERROR")
            return [0, 0]

    def _validate_swap_params(self, token_address: str, amount: float, is_buy: bool) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞–ø–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not self.web3 or not self.web3.is_connected():
                raise Exception("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
            if not self.account:
                raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
            if not token_address or not token_address.startswith('0x'):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ BNB –¥–ª—è –≥–∞–∑–∞
            bnb_balance = self.web3.eth.get_balance(self.account.address)
            bnb_balance_eth = self.web3.from_wei(bnb_balance, 'ether')
            estimated_gas_cost = 0.003  # –ü—Ä–∏–º–µ—Ä–Ω–æ 0.003 BNB –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            
            if bnb_balance_eth < estimated_gas_cost:
                self.log(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å BNB: {bnb_balance_eth:.6f}. –ú–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å –Ω–∞ –≥–∞–∑.", "WARNING")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            if not self._check_liquidity(token_address):
                self.log("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏.", "WARNING")
                
            return {
                'valid': True,
                'bnb_balance': bnb_balance_eth,
                'estimated_gas': estimated_gas_cost
            }
            
        except Exception as e:
            return {
                'valid': False,
                'error': str(e)
            }

    def _check_and_approve(self, token_address: str, amount: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç approve —Å retry –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                token_contract = self.web3.eth.contract(
                    address=Web3.to_checksum_address(token_address),
                    abi=ERC20_ABI
                )
                
                current_allowance = token_contract.functions.allowance(
                    self.account.address,
                    self.PANCAKE_ROUTER
                ).call()
                
                if current_allowance >= amount:
                    self.log(f"‚úÖ Approve –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–µ–∫—É—â–∏–π allowance: {current_allowance}", "SUCCESS")
                    return True
                    
                self.log(f"üìù –¢—Ä–µ–±—É–µ—Ç—Å—è approve (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})", "INFO")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ approve
                token_balance_wei = token_contract.functions.balanceOf(self.account.address).call()
                if token_balance_wei < amount:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è approve. –ë–∞–ª–∞–Ω—Å: {token_balance_wei}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º nonce
                nonce = self.web3.eth.get_transaction_count(self.account.address)
                self.log(f"üîç –¢–µ–∫—É—â–∏–π nonce: {nonce}", "INFO")
                
                # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é approve
                approve_tx = token_contract.functions.approve(
                    self.PANCAKE_ROUTER,
                    amount
                ).build_transaction({
                    'from': self.account.address,
                    'gas': 100000,
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': nonce,
                })
                
                self.log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...", "INFO")
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                signed_approve = self.web3.eth.account.sign_transaction(approve_tx, self.account.key)
                approve_hash = self.web3.eth.send_raw_transaction(signed_approve.rawTransaction)
                
                if not approve_hash:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                    
                self.log(f"üì§ Approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {approve_hash.hex()}", "INFO")
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                self.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è approve...", "INFO")
                receipt = self.web3.eth.wait_for_transaction_receipt(approve_hash, timeout=180)
                
                if receipt and receipt['status'] == 1:
                    self.log(f"‚úÖ Approve —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. Gas used: {receipt['gasUsed']}", "SUCCESS")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ approve –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—à–µ–ª
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    new_allowance = token_contract.functions.allowance(
                        self.account.address,
                        self.PANCAKE_ROUTER
                    ).call()
                    if new_allowance > 0:
                        return True
                    else:
                        self.log("‚ö†Ô∏è Allowance –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ approve", "WARNING")
                        
                else:
                    if receipt:
                        self.log(f"‚ùå Approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å. Status: {receipt.get('status')}", "ERROR")
                    else:
                        self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å receipt —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "ERROR")
                        
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ approve (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}", "ERROR")
                
                if attempt < max_retries - 1:
                    wait_time = 5 * (attempt + 1)
                    self.log(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...", "INFO")
                    time.sleep(wait_time)
                else:
                    return False
                    
        return False

    def _check_liquidity_pool(self, token_address: str, target_token: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        try:
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É–ª—ã –¥–ª—è PLEX ONE (–≤ checksum —Ñ–æ—Ä–º–∞—Ç–µ)
            known_pools = {
                "0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1": {  # PLEX ONE
                    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c": "0x41d9650faf3341cbf8947fd8063a1fc88dbf1889",  # WBNB
                    "0x55d398326f99059fF775485246999027B3197955": "0xc7961e1e762d4b1975a3fcd07b8f70e34726c04e"   # USDT
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É–ª—ã
            token_checksum = Web3.to_checksum_address(token_address)
            target_checksum = Web3.to_checksum_address(target_token)
            
            self.log(f"üîç –ò—â–µ–º –ø—É–ª –¥–ª—è: {token_checksum} -> {target_checksum}", "INFO")
            self.log(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–ª—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {list(known_pools.keys())}", "INFO")
            
            if token_checksum in known_pools:
                self.log(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É–ª–∞—Ö", "INFO")
                if target_checksum in known_pools[token_checksum]:
                    self.log(f"üîç –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω –≤ –ø—É–ª–∞—Ö", "INFO")
                else:
                    self.log(f"üîç –¶–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—É–ª–∞—Ö: {list(known_pools[token_checksum].keys())}", "INFO")
            else:
                self.log(f"üîç –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É–ª–∞—Ö", "INFO")
            
            if token_checksum in known_pools and target_checksum in known_pools[token_checksum]:
                pool_address = known_pools[token_checksum][target_checksum]
                self.log(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª: {pool_address}", "INFO")
                
                # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–∞–∫ –∫–∞–∫ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                return True, pool_address
            
            # –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Factory
            try:
                factory_address = "0xcA143Ce0Fe65960E6Aa4D42C8d3cE161c2B6604c"  # PancakeSwap Factory
                factory_abi = [{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"getPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"view","type":"function"}]
                
                factory_contract = self.web3.eth.contract(
                    address=Web3.to_checksum_address(factory_address),
                    abi=factory_abi
                )
                
                pair_address = factory_contract.functions.getPair(
                    token_checksum,
                    target_checksum
                ).call()
                
                if pair_address != "0x0000000000000000000000000000000000000000":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–∞—Ä—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    code = self.web3.eth.get_code(pair_address)
                    if len(code) > 0:
                        return True, pair_address
                        
            except Exception as factory_error:
                self.log(f"üîç –û—à–∏–±–∫–∞ Factory: {str(factory_error)}", "WARNING")
            
            return False, None
            
        except Exception as e:
            self.log(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–∞: {str(e)}", "WARNING")
            return False, None

    def _execute_sell(self, token_address: str, amount: float, settings: dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.log("=== –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ ===", "INFO")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            validation = self._validate_swap_params(token_address, amount, is_buy=False)
            if not validation['valid']:
                raise Exception(validation['error'])
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
            token_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=ERC20_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º decimals
            decimals = token_contract.functions.decimals().call()
            amount_wei = int(amount * (10 ** decimals))
            self.log(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ wei: {amount_wei} (decimals: {decimals})", "INFO")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance = token_contract.functions.balanceOf(self.account.address).call()
            if balance < amount_wei:
                self.log(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance / (10 ** decimals):.4f} < {amount:.4f}", "WARNING")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ–±–º–µ–Ω–∞
            if settings['target'] == 'BNB':
                target_token = self.WBNB
                # –î–ª—è PLEX ONE –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ WBNB
                if token_address.lower() == self.PLEX_ONE.lower():
                    path = [Web3.to_checksum_address(token_address), self.WBNB]
                else:
                    path = [Web3.to_checksum_address(token_address), self.WBNB]
                swap_method = 'swapExactTokensForETH'
            else:  # USDT
                target_token = self.USDT
                # –î–ª—è PLEX ONE –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ USDT
                if token_address.lower() == self.PLEX_ONE.lower():
                    path = [Web3.to_checksum_address(token_address), self.USDT]
                else:
                    path = [Web3.to_checksum_address(token_address), self.WBNB, self.USDT]
                swap_method = 'swapExactTokensForTokens'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            has_pool, pair_address = self._check_liquidity_pool(token_address, target_token)
            if not has_pool:
                self.log(f"‚ùå –ü—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è {settings['name']} -> {settings['target']} –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                self.log(f"üí° –¢–æ–∫–µ–Ω –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ PancakeSwap –∏–ª–∏ –ø—É–ª –Ω–µ —Å–æ–∑–¥–∞–Ω", "INFO")
                return
            
            self.log(f"‚úÖ –ü—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω: {pair_address}", "SUCCESS")
            
            # –ü–æ–ª—É—á–∞–µ–º Router –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            router_contract = self.web3.eth.contract(
                address=self.PANCAKE_ROUTER,
                abi=PANCAKE_ROUTER_ABI
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º approve
            self.log(f"üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ approve –¥–ª—è {settings['name']}...", "INFO")
            if not self._check_and_approve(token_address, amount_wei):
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å approve –¥–ª—è {settings['name']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã—Ö–æ–¥ —Å retry
            self.log("üîç –†–∞—Å—á–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞...", "INFO")
            self.log(f"üîç –ü—É—Ç—å –æ–±–º–µ–Ω–∞: {' -> '.join(path)}", "INFO")
            self.log(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞: {amount_wei}", "INFO")
            amounts_out = self._get_amounts_out_with_retry(amount_wei, path)
            
            if not amounts_out or amounts_out[-1] == 0:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞.")
                
            expected_out = amounts_out[-1]
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            if settings['target'] == 'BNB':
                expected_tokens = expected_out / (10 ** 18)  # BNB –∏–º–µ–µ—Ç 18 decimals
            else:  # USDT
                expected_tokens = expected_out / (10 ** 6)   # USDT –∏–º–µ–µ—Ç 6 decimals
            
            self.log(f"üîç –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å: {expected_tokens:.6f} {settings['target']}", "INFO")
            
            # –†–∞—Å—á–µ—Ç slippage
            slippage = settings.get('slippage', 1) / 100
            min_amount_out = int(expected_out * (1 - slippage))
            self.log(f"üîç –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (slippage {slippage*100}%): {min_amount_out}", "INFO")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –±–æ–ª—å—à–µ 0
            if min_amount_out <= 0:
                raise Exception(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —Å–ª–∏—à–∫–æ–º –º–∞–ª: {min_amount_out}")
            
            # Deadline —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
            deadline = int(time.time()) + 1200
            self.log(f"üîç Deadline: {deadline}", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞
            if swap_method == 'swapExactTokensForETH':
                swap_tx = router_contract.functions.swapExactTokensForETH(
                    amount_wei,
                    min_amount_out,
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'gas': 300000,
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address),
                })
            else:
                swap_tx = router_contract.functions.swapExactTokensForTokens(
                    amount_wei,
                    min_amount_out,
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'gas': 300000,
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address),
                })
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            self.log(f"üîç Gas: {swap_tx['gas']}, GasPrice: {swap_tx['gasPrice']}", "INFO")
            self.log(f"üîç Nonce: {swap_tx['nonce']}", "INFO")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            self.log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {amount} {settings['name']} -> {settings['target']}", "INFO")
            self.log(f"üîç Gas limit: {swap_tx['gas']}, Gas price: {swap_tx['gasPrice']}", "INFO")
            
            signed_swap = self.web3.eth.account.sign_transaction(swap_tx, self.account.key)
            swap_hash = self.web3.eth.send_raw_transaction(signed_swap.rawTransaction)
            
            if not swap_hash:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                
            self.log(f"üì§ Swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {swap_hash.hex()}", "INFO")
            self.log(f"üîó –°—Å—ã–ª–∫–∞: https://bscscan.com/tx/{swap_hash.hex()}", "INFO")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...", "INFO")
            receipt = self.web3.eth.wait_for_transaction_receipt(swap_hash, timeout=300)
            
            if receipt and receipt['status'] == 1:
                gas_used = receipt['gasUsed']
                gas_cost_bnb = self.web3.from_wei(gas_used * swap_tx['gasPrice'], 'ether')
                
                self.log(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–∞!", "SALE")
                self.log(f"üîç Gas used: {gas_used}", "INFO")
                self.log(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞: {gas_cost_bnb:.6f} BNB", "INFO")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                time.sleep(3)
                if settings['target'] == 'BNB':
                    new_balance = self.web3.from_wei(self.web3.eth.get_balance(self.account.address), 'ether')
                    self.log(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å BNB: {new_balance:.6f}", "PROFIT")
                else:  # USDT
                    usdt_contract = self.web3.eth.contract(address=self.USDT, abi=ERC20_ABI)
                    new_balance_wei = usdt_contract.functions.balanceOf(self.account.address).call()
                    new_balance = new_balance_wei / (10 ** 6)  # USDT decimals
                    self.log(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT: {new_balance:.4f}", "PROFIT")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–∏
                if expected_tokens > 0:
                    actual_percentage = (new_balance / expected_tokens) * 100
                    self.log(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {actual_percentage:.1f}% –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ", "PROFIT")
            else:
                self.log("‚ùå Swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å", "ERROR")
                if receipt:
                    self.log(f"‚ùå Receipt status: {receipt.get('status')}", "ERROR")
                    if 'logs' in receipt and receipt['logs']:
                        self.log(f"‚ùå Logs: {receipt['logs']}", "ERROR")
                return
            
            if receipt and receipt['status'] == 1:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self._add_to_history({
                    'time': datetime.now().strftime("%H:%M:%S"),
                    'token': settings['name'],
                    'amount': amount,
                    'received': amounts_out[-1] / (10 ** (18 if settings['target'] == 'BNB' else 18)),
                    'target': settings['target'],
                    'tx_hash': swap_hash.hex(),
                    'status': '–£—Å–ø–µ—à–Ω–æ'
                })
                
                self.log(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {amount:.4f} {settings['name']} -> {amounts_out[-1] / (10 ** 18):.4f} {settings['target']}", "SALE")
                
                # –°–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏
                self.sale_completed.emit({
                    'token': settings['name'],
                    'amount': amount,
                    'received': amounts_out[-1] / (10 ** 18),
                    'tx_hash': swap_hash.hex()
                })
            else:
                self.log(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {swap_hash.hex()}", "ERROR")
                self._add_to_history({
                    'time': datetime.now().strftime("%H:%M:%S"),
                    'token': settings['name'],
                    'amount': amount,
                    'received': 0,
                    'target': settings['target'],
                    'tx_hash': swap_hash.hex(),
                    'status': '–û—à–∏–±–∫–∞'
                })
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {settings['name']}: {str(e)}", "ERROR")
            self._add_to_history({
                'time': datetime.now().strftime("%H:%M:%S"),
                'token': settings['name'],
                'amount': amount,
                'received': 0,
                'target': settings['target'],
                'tx_hash': '',
                'status': f'–û—à–∏–±–∫–∞: {str(e)[:50]}'
            })
    
    def _add_to_history(self, sale_info: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂"""
        self.sales_history.append(sale_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        row = self.history_table.rowCount()
        self.history_table.insertRow(row)
        self.history_table.setItem(row, 0, QTableWidgetItem(sale_info['time']))
        self.history_table.setItem(row, 1, QTableWidgetItem(sale_info['token']))
        self.history_table.setItem(row, 2, QTableWidgetItem(f"{sale_info['amount']:.4f}"))
        self.history_table.setItem(row, 3, QTableWidgetItem(f"{sale_info['received']:.4f} {sale_info['target']}"))
        self.history_table.setItem(row, 4, QTableWidgetItem(sale_info['tx_hash'][:10] + '...'))
        
        status_item = QTableWidgetItem(sale_info['status'])
        if sale_info['status'] == '–£—Å–ø–µ—à–Ω–æ':
            status_item.setForeground(QColor(0, 255, 0))
        else:
            status_item.setForeground(QColor(255, 0, 0))
        self.history_table.setItem(row, 5, status_item)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.history_table.scrollToBottom()
    
    def _get_token_balance(self, token_address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.account or not self.web3:
                self.log("‚ùå –ö–æ—à–µ–ª–µ–∫ –∏–ª–∏ Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "ERROR")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
            if not self.web3.is_connected():
                self.log("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC —Å–µ—Ç–∏", "ERROR")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            if not Web3.is_address(token_address):
                self.log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}", "ERROR")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π
            checksum_address = Web3.to_checksum_address(token_address)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                code = self.web3.eth.get_code(checksum_address)
                if code == b'':
                    self.log(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {checksum_address}", "ERROR")
                    return 0
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {str(e)}", "ERROR")
                return 0
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            token_contract = self.web3.eth.contract(
                address=checksum_address,
                abi=ERC20_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º decimals
            try:
                decimals = token_contract.functions.decimals().call()
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è decimals: {str(e)}", "ERROR")
                decimals = 18  # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ 18 decimals
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            wallet_address = Web3.to_checksum_address(self.account.address)
            try:
                balance = token_contract.functions.balanceOf(wallet_address).call()
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
                return 0
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_balance = balance / (10 ** decimals)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 0 –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            if formatted_balance > 0:
                self.log(f"‚úÖ –ë–∞–ª–∞–Ω—Å {checksum_address[:10]}...: {formatted_balance:.6f}", "SUCCESS")
            
            return formatted_balance
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {token_address}: {str(e)}", "ERROR")
            return 0
    
    def _get_token_name(self, token_address: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.web3:
                return "Unknown"
            
            token_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=ERC20_ABI
            )
            
            return token_contract.functions.symbol().call()
            
        except Exception:
            return "Unknown"
    
    def _get_token_price(self, token_address: str, target: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            if not self.web3:
                return 0
            
            router_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(self.PANCAKE_ROUTER),
                abi=PANCAKE_ROUTER_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ 1 —Ç–æ–∫–µ–Ω
            amount_in = 10 ** 18  # 1 —Ç–æ–∫–µ–Ω
            
            if target == 'BNB':
                path = [token_address, self.WBNB]
            else:
                path = [token_address, self.WBNB, self.USDT]
            
            amounts_out = router_contract.functions.getAmountsOut(amount_in, path).call()
            
            return amounts_out[-1] / (10 ** 18)
            
        except Exception:
            return 0
    
    def update_balance_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        if not self.account or not self.web3:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å BNB
            bnb_balance = self.web3.eth.get_balance(self.account.address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º BNB –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self.bnb_balance_label.setText(f"BNB: {bnb_formatted:.6f}")
            
            info_text = f"üí∞ BNB: {bnb_formatted:.6f}\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            for token_address, settings in self.monitored_tokens.items():
                balance = self._get_token_balance(token_address)
                info_text += f"ü™ô {settings['name']}: {balance:.4f}\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ
                for row in range(self.monitored_table.rowCount()):
                    if self.monitored_table.item(row, 0).text() == settings['name']:
                        self.monitored_table.setItem(row, 4, QTableWidgetItem(f"{balance:.4f}"))
                        break
            
            self.balance_info.setText(info_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            self._update_current_balance()
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
    
    def test_sell(self):
        """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.token_combo.currentText() == "PLEX ONE":
            token_address = self.PLEX_ONE
            token_name = "PLEX ONE"
        else:
            token_address = self.custom_token_input.text().strip()
            if not Web3.is_address(token_address):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return
            token_name = self._get_token_name(token_address)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = self._get_token_balance(token_address)
        
        if balance <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞ {token_name} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        sell_mode = self.sell_mode_combo.currentText()
        if sell_mode == "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞":
            sell_amount = balance * (self.sell_percentage.value() / 100)
            sell_display = f"{self.sell_percentage.value()}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ ({sell_amount:.4f})"
        else:
            sell_amount = min(self.sell_quantity.value(), balance)
            sell_display = f"{sell_amount:.4f} —Ç–æ–∫–µ–Ω–æ–≤"
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É?\n\n"
            f"–¢–æ–∫–µ–Ω: {token_name}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.4f}\n"
            f"–†–µ–∂–∏–º: {sell_mode}\n"
            f"–ü—Ä–æ–¥–∞—Ç—å: {sell_display}\n"
            f"–í: {self.target_combo.currentText()}\n"
            f"Slippage: {self.slippage_input.value()}%",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            settings = {
                'name': token_name,
                'threshold': 0,
                'target': self.target_combo.currentText(),
                'sell_mode': sell_mode,
                'sell_type': 'percentage' if sell_mode == "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞" else 'quantity',
                'sell_amount': self.sell_percentage.value() if sell_mode == "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞" else self.sell_quantity.value(),
                'percentage': self.sell_percentage.value(),
                'quantity': self.sell_quantity.value(),
                'min_price': 0,
                'slippage': self.slippage_input.value(),
                'cyclic_sales': self.cyclic_sales_checkbox.isChecked(),
                'last_sale_time': 0
            }
            
            self._execute_sell(token_address, sell_amount, settings)
