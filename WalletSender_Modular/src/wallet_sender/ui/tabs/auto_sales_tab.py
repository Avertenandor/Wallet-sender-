"""Auto Sales Tab - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ PancakeSwap"""

import json
import threading
import time
from datetime import datetime
from typing import Dict, Any, Optional, List
from decimal import Decimal

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QHeaderView,
    QComboBox, QDoubleSpinBox, QSpinBox, QTextEdit, QCheckBox,
    QMessageBox, QSplitter, QFormLayout
)
from PyQt5.QtCore import pyqtSignal, QTimer, Qt
from PyQt5.QtGui import QFont, QColor

from web3 import Web3
from eth_account import Account
from .base_tab import BaseTab

# ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
ERC20_ABI = json.loads('[{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}]')

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è PancakeSwap Router
PANCAKE_ROUTER_ABI = json.loads('[{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"}]')


class AutoSalesTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ PancakeSwap"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    balance_updated = pyqtSignal(dict)
    sale_completed = pyqtSignal(dict)
    
    def __init__(self, main_window, parent=None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.web3 = None
        self.account = None
        self.monitoring_thread = None
        self.is_monitoring = False
        self.stop_monitoring = threading.Event()
        self.monitored_tokens = {}
        self.sales_history = []
        
        # –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        self.PANCAKE_ROUTER = "0x10ED43C718714eb63d5aA57B78B54704E256024E"
        self.WBNB = "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
        self.USDT = "0x55d398326f99059ff775485246999027b3197955"
        self.PLEX_ONE = "0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1"
        
        super().__init__(main_window, parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        self._init_web3()
        
    def _init_web3(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            rpc_url = 'https://bsc-dataseed.binance.org/'
            self.web3 = Web3(Web3.HTTPProvider(rpc_url))
            
            if self.web3.is_connected():
                self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "SUCCESS")
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC", "ERROR")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3: {str(e)}", "ERROR")
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; padding: 10px;")
        layout.addWidget(title_label)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_group = self._create_wallet_group()
        layout.addWidget(wallet_group)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
        left_panel = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏")
        left_layout = QVBoxLayout(left_panel)
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        token_layout = QFormLayout()
        
        self.token_combo = QComboBox()
        self.token_combo.addItems(['PLEX ONE', '–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω'])
        self.token_combo.currentTextChanged.connect(self._on_token_changed)
        token_layout.addRow("–¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", self.token_combo)
        
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.custom_token_input.setVisible(False)
        token_layout.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", self.custom_token_input)
        
        # –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
        self.target_combo = QComboBox()
        self.target_combo.addItems(['BNB', 'USDT'])
        token_layout.addRow("–ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤:", self.target_combo)
        
        # –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.threshold_input = QDoubleSpinBox()
        self.threshold_input.setRange(0.00000001, 1000000000)
        self.threshold_input.setDecimals(8)
        self.threshold_input.setValue(100.0)
        self.threshold_input.setSuffix(" —Ç–æ–∫–µ–Ω–æ–≤")
        token_layout.addRow("–ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", self.threshold_input)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.sell_percentage = QSpinBox()
        self.sell_percentage.setRange(1, 100)
        self.sell_percentage.setValue(100)
        self.sell_percentage.setSuffix(" %")
        token_layout.addRow("–ü—Ä–æ–¥–∞–≤–∞—Ç—å %:", self.sell_percentage)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        self.min_price_input = QDoubleSpinBox()
        self.min_price_input.setRange(0, 1000000)
        self.min_price_input.setDecimals(8)
        self.min_price_input.setValue(0)
        self.min_price_input.setPrefix("$")
        token_layout.addRow("–ú–∏–Ω. —Ü–µ–Ω–∞ (0=–ª—é–±–∞—è):", self.min_price_input)
        
        # Slippage
        self.slippage_input = QSpinBox()
        self.slippage_input.setRange(1, 50)
        self.slippage_input.setValue(12)
        self.slippage_input.setSuffix(" %")
        token_layout.addRow("Slippage:", self.slippage_input)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_interval = QSpinBox()
        self.check_interval.setRange(5, 3600)
        self.check_interval.setValue(30)
        self.check_interval.setSuffix(" —Å–µ–∫")
        token_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:", self.check_interval)
        
        left_layout.addLayout(token_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞
        gas_group = self.create_gas_settings_group()
        left_layout.addWidget(gas_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        self.start_btn.clicked.connect(self.start_monitoring)
        control_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.clicked.connect(self.stop_monitoring_func)
        self.stop_btn.setEnabled(False)
        control_layout.addWidget(self.stop_btn)
        
        self.test_sell_btn = QPushButton("üß™ –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂–∏")
        self.test_sell_btn.clicked.connect(self.test_sell)
        control_layout.addWidget(self.test_sell_btn)
        
        left_layout.addLayout(control_layout)
        
        # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.add_monitor_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        self.add_monitor_btn.clicked.connect(self.add_to_monitoring)
        left_layout.addWidget(self.add_monitor_btn)
        
        left_layout.addStretch()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∏—Å—Ç–æ—Ä–∏—è
        right_panel = QGroupBox("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∏—Å—Ç–æ—Ä–∏—è")
        right_layout = QVBoxLayout(right_panel)
        
        # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.status_label = QLabel("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        self.status_label.setStyleSheet("font-weight: bold; padding: 5px;")
        right_layout.addWidget(self.status_label)
        
        # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        self.balance_info = QTextEdit()
        self.balance_info.setReadOnly(True)
        self.balance_info.setMaximumHeight(100)
        self.balance_info.setPlaceholderText("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–∞—Ö...")
        right_layout.addWidget(self.balance_info)
        
        # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        tokens_label = QLabel("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:")
        right_layout.addWidget(tokens_label)
        
        self.monitored_table = QTableWidget()
        self.monitored_table.setColumnCount(5)
        self.monitored_table.setHorizontalHeaderLabels([
            "–¢–æ–∫–µ–Ω", "–ü–æ—Ä–æ–≥", "–ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤", "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        header = self.monitored_table.horizontalHeader()
        header.setStretchLastSection(True)
        right_layout.addWidget(self.monitored_table)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂
        history_label = QLabel("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂:")
        right_layout.addWidget(history_label)
        
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(6)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–¢–æ–∫–µ–Ω", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü–æ–ª—É—á–µ–Ω–æ", "Tx Hash", "–°—Ç–∞—Ç—É—Å"
        ])
        header = self.history_table.horizontalHeader()
        header.setStretchLastSection(True)
        right_layout.addWidget(self.history_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ splitter
        splitter.addWidget(left_panel)
        splitter.addWidget(right_panel)
        splitter.setSizes([500, 700])
        
        layout.addWidget(splitter)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.balance_timer = QTimer()
        self.balance_timer.timeout.connect(self.update_balance_display)
        self.balance_timer.start(10000)  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
    def _on_token_changed(self, token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        is_custom = token == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω"
        self.custom_token_input.setVisible(is_custom)
    
    def connect_wallet(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        wallet_data = self.wallet_input.toPlainText().strip()
        
        if not wallet_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ SEED —Ñ—Ä–∞–∑—É!")
            return
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if ' ' in wallet_data:  # SEED —Ñ—Ä–∞–∑–∞
                try:
                    from mnemonic import Mnemonic
                    mnemo = Mnemonic("english")
                    if not mnemo.check(wallet_data):
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è SEED —Ñ—Ä–∞–∑–∞")
                    seed = mnemo.to_seed(wallet_data)
                    private_key = seed[:32].hex()
                except ImportError:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                    return
            else:  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                private_key = wallet_data
                if private_key.startswith('0x'):
                    private_key = private_key[2:]
            
            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            self.account = Account.from_key(private_key)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.wallet_address_label.setText(f"–ê–¥—Ä–µ—Å: {self.account.address}")
            self.disconnect_btn.setEnabled(True)
            
            self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            self.update_balance_display()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫:\n{str(e)}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}", "ERROR")
    
    def disconnect_wallet(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        self.account = None
        self.wallet_address_label.setText("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.disconnect_btn.setEnabled(False)
        self.balance_info.clear()
        self.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω", "INFO")
    
    def add_to_monitoring(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.token_combo.currentText() == "PLEX ONE":
            token_address = self.PLEX_ONE
            token_name = "PLEX ONE"
        else:
            token_address = self.custom_token_input.text().strip()
            if not Web3.is_address(token_address):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return
            token_name = self._get_token_name(token_address)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitored_tokens[token_address] = {
            'name': token_name,
            'threshold': self.threshold_input.value(),
            'target': self.target_combo.currentText(),
            'percentage': self.sell_percentage.value(),
            'min_price': self.min_price_input.value(),
            'slippage': self.slippage_input.value()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        row = self.monitored_table.rowCount()
        self.monitored_table.insertRow(row)
        self.monitored_table.setItem(row, 0, QTableWidgetItem(token_name))
        self.monitored_table.setItem(row, 1, QTableWidgetItem(f"{self.threshold_input.value():.2f}"))
        self.monitored_table.setItem(row, 2, QTableWidgetItem(self.target_combo.currentText()))
        self.monitored_table.setItem(row, 3, QTableWidgetItem("0"))
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        remove_btn = QPushButton("‚ùå")
        remove_btn.clicked.connect(lambda: self.remove_from_monitoring(token_address))
        self.monitored_table.setCellWidget(row, 4, remove_btn)
        
        self.log(f"‚úÖ {token_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "SUCCESS")
    
    def remove_from_monitoring(self, token_address):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if token_address in self.monitored_tokens:
            del self.monitored_tokens[token_address]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self._refresh_monitored_table()
            self.log(f"‚ùå –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "INFO")
    
    def _refresh_monitored_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        self.monitored_table.setRowCount(0)
        
        for token_address, settings in self.monitored_tokens.items():
            row = self.monitored_table.rowCount()
            self.monitored_table.insertRow(row)
            self.monitored_table.setItem(row, 0, QTableWidgetItem(settings['name']))
            self.monitored_table.setItem(row, 1, QTableWidgetItem(f"{settings['threshold']:.2f}"))
            self.monitored_table.setItem(row, 2, QTableWidgetItem(settings['target']))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            balance = self._get_token_balance(token_address)
            self.monitored_table.setItem(row, 3, QTableWidgetItem(f"{balance:.4f}"))
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            remove_btn = QPushButton("‚ùå")
            remove_btn.clicked.connect(lambda addr=token_address: self.remove_from_monitoring(addr))
            self.monitored_table.setCellWidget(row, 4, remove_btn)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        if not self.monitored_tokens:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
            return
        
        if self.is_monitoring:
            self.log("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω", "WARNING")
            return
        
        self.is_monitoring = True
        self.stop_monitoring.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.status_label.setText("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
        self.status_label.setStyleSheet("color: green; font-weight: bold; padding: 5px;")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_thread = threading.Thread(target=self._monitoring_worker, daemon=True)
        self.monitoring_thread.start()
        
        self.log("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω", "SUCCESS")
    
    def stop_monitoring_func(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.is_monitoring:
            return
        
        self.is_monitoring = False
        self.stop_monitoring.set()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.status_label.setText("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.status_label.setStyleSheet("color: orange; font-weight: bold; padding: 5px;")
        
        self.log("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "INFO")
    
    def _monitoring_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        interval = self.check_interval.value()
        
        while not self.stop_monitoring.is_set():
            try:
                for token_address, settings in self.monitored_tokens.items():
                    if self.stop_monitoring.is_set():
                        break
                    
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
                    balance = self._get_token_balance(token_address)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
                    if balance >= settings['threshold']:
                        self.log(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –¥–ª—è {settings['name']}: {balance:.4f} >= {settings['threshold']}", "INFO")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                        sell_amount = balance * (settings['percentage'] / 100)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–Ω–∏–º—É–º
                        if settings['min_price'] > 0:
                            price = self._get_token_price(token_address, settings['target'])
                            if price < settings['min_price']:
                                self.log(f"‚ö†Ô∏è –¶–µ–Ω–∞ {price:.8f} –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {settings['min_price']}", "WARNING")
                                continue
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
                        self._execute_sell(token_address, sell_amount, settings)
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                self.stop_monitoring.wait(interval)
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}", "ERROR")
                time.sleep(5)
    
    def _execute_sell(self, token_address: str, amount: float, settings: dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.account or not self.web3:
                raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
            token_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=ERC20_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º decimals
            decimals = token_contract.functions.decimals().call()
            amount_wei = int(amount * (10 ** decimals))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance = token_contract.functions.balanceOf(self.account.address).call()
            if balance < amount_wei:
                self.log(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance / (10 ** decimals):.4f} < {amount:.4f}", "WARNING")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ–±–º–µ–Ω–∞
            if settings['target'] == 'BNB':
                path = [token_address, self.WBNB]
                swap_method = 'swapExactTokensForETH'
            else:  # USDT
                path = [token_address, self.WBNB, self.USDT]
                swap_method = 'swapExactTokensForTokens'
            
            # –ü–æ–ª—É—á–∞–µ–º Router –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            router_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(self.PANCAKE_ROUTER),
                abi=PANCAKE_ROUTER_ABI
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º approve –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            allowance = token_contract.functions.allowance(
                self.account.address,
                self.PANCAKE_ROUTER
            ).call()
            
            if allowance < amount_wei:
                self.log(f"üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Approve –¥–ª—è {settings['name']}...", "INFO")
                
                # Approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                approve_tx = token_contract.functions.approve(
                    self.PANCAKE_ROUTER,
                    amount_wei
                ).build_transaction({
                    'from': self.account.address,
                    'gas': 100000,
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address),
                })
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                signed_approve = self.web3.eth.account.sign_transaction(approve_tx, self.account.key)
                approve_hash = self.web3.eth.send_raw_transaction(signed_approve.rawTransaction)
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                self.web3.eth.wait_for_transaction_receipt(approve_hash)
                self.log(f"‚úÖ Approve —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {approve_hash.hex()}", "SUCCESS")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã—Ö–æ–¥
            amounts_out = router_contract.functions.getAmountsOut(amount_wei, path).call()
            min_amount_out = int(amounts_out[-1] * (1 - settings['slippage'] / 100))
            
            # Deadline —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
            deadline = int(time.time()) + 1200
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞
            if swap_method == 'swapExactTokensForETH':
                swap_tx = router_contract.functions.swapExactTokensForETH(
                    amount_wei,
                    min_amount_out,
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'gas': 300000,
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address),
                })
            else:
                swap_tx = router_contract.functions.swapExactTokensForTokens(
                    amount_wei,
                    min_amount_out,
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'gas': 300000,
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address),
                })
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            signed_swap = self.web3.eth.account.sign_transaction(swap_tx, self.account.key)
            swap_hash = self.web3.eth.send_raw_transaction(signed_swap.rawTransaction)
            
            self.log(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {swap_hash.hex()}", "INFO")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            receipt = self.web3.eth.wait_for_transaction_receipt(swap_hash)
            
            if receipt['status'] == 1:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self._add_to_history({
                    'time': datetime.now().strftime("%H:%M:%S"),
                    'token': settings['name'],
                    'amount': amount,
                    'received': amounts_out[-1] / (10 ** (18 if settings['target'] == 'BNB' else 18)),
                    'target': settings['target'],
                    'tx_hash': swap_hash.hex(),
                    'status': '–£—Å–ø–µ—à–Ω–æ'
                })
                
                self.log(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {amount:.4f} {settings['name']} -> {amounts_out[-1] / (10 ** 18):.4f} {settings['target']}", "SUCCESS")
                
                # –°–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏
                self.sale_completed.emit({
                    'token': settings['name'],
                    'amount': amount,
                    'received': amounts_out[-1] / (10 ** 18),
                    'tx_hash': swap_hash.hex()
                })
            else:
                self.log(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {swap_hash.hex()}", "ERROR")
                self._add_to_history({
                    'time': datetime.now().strftime("%H:%M:%S"),
                    'token': settings['name'],
                    'amount': amount,
                    'received': 0,
                    'target': settings['target'],
                    'tx_hash': swap_hash.hex(),
                    'status': '–û—à–∏–±–∫–∞'
                })
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {settings['name']}: {str(e)}", "ERROR")
            self._add_to_history({
                'time': datetime.now().strftime("%H:%M:%S"),
                'token': settings['name'],
                'amount': amount,
                'received': 0,
                'target': settings['target'],
                'tx_hash': '',
                'status': f'–û—à–∏–±–∫–∞: {str(e)[:50]}'
            })
    
    def _add_to_history(self, sale_info: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂"""
        self.sales_history.append(sale_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        row = self.history_table.rowCount()
        self.history_table.insertRow(row)
        self.history_table.setItem(row, 0, QTableWidgetItem(sale_info['time']))
        self.history_table.setItem(row, 1, QTableWidgetItem(sale_info['token']))
        self.history_table.setItem(row, 2, QTableWidgetItem(f"{sale_info['amount']:.4f}"))
        self.history_table.setItem(row, 3, QTableWidgetItem(f"{sale_info['received']:.4f} {sale_info['target']}"))
        self.history_table.setItem(row, 4, QTableWidgetItem(sale_info['tx_hash'][:10] + '...'))
        
        status_item = QTableWidgetItem(sale_info['status'])
        if sale_info['status'] == '–£—Å–ø–µ—à–Ω–æ':
            status_item.setForeground(QColor(0, 255, 0))
        else:
            status_item.setForeground(QColor(255, 0, 0))
        self.history_table.setItem(row, 5, status_item)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.history_table.scrollToBottom()
    
    def _get_token_balance(self, token_address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.account or not self.web3:
                return 0
            
            token_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=ERC20_ABI
            )
            
            balance = token_contract.functions.balanceOf(self.account.address).call()
            decimals = token_contract.functions.decimals().call()
            
            return balance / (10 ** decimals)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
            return 0
    
    def _get_token_name(self, token_address: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.web3:
                return "Unknown"
            
            token_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=ERC20_ABI
            )
            
            return token_contract.functions.symbol().call()
            
        except Exception:
            return "Unknown"
    
    def _get_token_price(self, token_address: str, target: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            if not self.web3:
                return 0
            
            router_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(self.PANCAKE_ROUTER),
                abi=PANCAKE_ROUTER_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ 1 —Ç–æ–∫–µ–Ω
            amount_in = 10 ** 18  # 1 —Ç–æ–∫–µ–Ω
            
            if target == 'BNB':
                path = [token_address, self.WBNB]
            else:
                path = [token_address, self.WBNB, self.USDT]
            
            amounts_out = router_contract.functions.getAmountsOut(amount_in, path).call()
            
            return amounts_out[-1] / (10 ** 18)
            
        except Exception:
            return 0
    
    def update_balance_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        if not self.account or not self.web3:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å BNB
            bnb_balance = self.web3.eth.get_balance(self.account.address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            
            info_text = f"üí∞ BNB: {bnb_formatted:.6f}\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            for token_address, settings in self.monitored_tokens.items():
                balance = self._get_token_balance(token_address)
                info_text += f"ü™ô {settings['name']}: {balance:.4f}\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ
                for row in range(self.monitored_table.rowCount()):
                    if self.monitored_table.item(row, 0).text() == settings['name']:
                        self.monitored_table.setItem(row, 3, QTableWidgetItem(f"{balance:.4f}"))
                        break
            
            self.balance_info.setText(info_text)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
    
    def test_sell(self):
        """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.token_combo.currentText() == "PLEX ONE":
            token_address = self.PLEX_ONE
            token_name = "PLEX ONE"
        else:
            token_address = self.custom_token_input.text().strip()
            if not Web3.is_address(token_address):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return
            token_name = self._get_token_name(token_address)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = self._get_token_balance(token_address)
        
        if balance <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞ {token_name} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")
            return
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É?\n\n"
            f"–¢–æ–∫–µ–Ω: {token_name}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.4f}\n"
            f"–ü—Ä–æ–¥–∞—Ç—å: {balance * (self.sell_percentage.value() / 100):.4f}\n"
            f"–í: {self.target_combo.currentText()}\n"
            f"Slippage: {self.slippage_input.value()}%",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            settings = {
                'name': token_name,
                'threshold': 0,
                'target': self.target_combo.currentText(),
                'percentage': self.sell_percentage.value(),
                'min_price': 0,
                'slippage': self.slippage_input.value()
            }
            
            sell_amount = balance * (self.sell_percentage.value() / 100)
            self._execute_sell(token_address, sell_amount, settings)
