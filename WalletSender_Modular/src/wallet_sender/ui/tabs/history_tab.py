"""
–í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –ë–î
"""

from datetime import datetime
from typing import Optional, List
import asyncio
import pandas as pd

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QLabel, QGroupBox, QPushButton,
    QTableWidget, QTableWidgetItem, QComboBox, QLineEdit,
    QDateEdit, QMessageBox, QHeaderView, QMenu, QFileDialog,
    QApplication
)
from PyQt5.QtCore import Qt, QDate, pyqtSignal, QThread
from PyQt5.QtGui import QColor

from .base_tab import BaseTab
from ...database.models import Transaction
from ...database.database import Database
from ...utils.logger import get_logger

logger = get_logger(__name__)


class TransactionStatusChecker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    status_updated = pyqtSignal(str, str)  # tx_hash, new_status
    
    def __init__(self, web3_provider, tx_hashes):
        super().__init__()
        self.web3_provider = web3_provider
        self.tx_hashes = tx_hashes
        self.is_running = True
        
    def run(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        for tx_hash in self.tx_hashes:
            if not self.is_running:
                break
                
            try:
                receipt = self.web3_provider.w3.eth.get_transaction_receipt(tx_hash)
                if receipt:
                    status = "success" if receipt.status == 1 else "failed"
                    self.status_updated.emit(tx_hash, status)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {tx_hash}: {e}")
                
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(self.tx_hashes)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞"""
        self.is_running = False


class HistoryTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, main_window, parent=None):
        # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –¥–æ –≤—ã–∑–æ–≤–∞ BaseTab.__init__,
        # —Ç.–∫. BaseTab –≤—ã–∑—ã–≤–∞–µ—Ç init_ui(), –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è db_manager (load_history)
        self.db_manager = Database()
        self.status_checker = None
        super().__init__(main_window, parent)
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        header.setStyleSheet("QGroupBox { font-weight: bold; }")
        header_layout = QVBoxLayout(header)
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_group = QGroupBox("–§–∏–ª—å—Ç—Ä—ã")
        filters_layout = QHBoxLayout(filters_group)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        filters_layout.addWidget(QLabel("–¢–∏–ø:"))
        self.type_filter = QComboBox()
        self.type_filter.addItems([
            "–í—Å–µ", "transfer", "reward", "distribution", "buy", "sell"
        ])
        self.type_filter.currentTextChanged.connect(self.apply_filters)
        filters_layout.addWidget(self.type_filter)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        filters_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))
        self.status_filter = QComboBox()
        self.status_filter.addItems([
            "–í—Å–µ", "pending", "success", "failed"
        ])
        self.status_filter.currentTextChanged.connect(self.apply_filters)
        filters_layout.addWidget(self.status_filter)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É
        filters_layout.addWidget(QLabel("–ê–¥—Ä–µ—Å:"))
        self.address_filter = QLineEdit()
        self.address_filter.setPlaceholderText("0x...")
        self.address_filter.textChanged.connect(self.apply_filters)
        filters_layout.addWidget(self.address_filter)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        filters_layout.addWidget(QLabel("–°:"))
        self.date_from = QDateEdit()
        self.date_from.setCalendarPopup(True)
        self.date_from.setDate(QDate.currentDate().addDays(-30))
        self.date_from.dateChanged.connect(self.apply_filters)
        filters_layout.addWidget(self.date_from)
        
        filters_layout.addWidget(QLabel("–ü–æ:"))
        self.date_to = QDateEdit()
        self.date_to.setCalendarPopup(True)
        self.date_to.setDate(QDate.currentDate())
        self.date_to.dateChanged.connect(self.apply_filters)
        filters_layout.addWidget(self.date_to)
        
        filters_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_btn.clicked.connect(self.load_history)
        filters_layout.addWidget(self.refresh_btn)
        
        self.check_status_btn = QPushButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã")
        self.check_status_btn.clicked.connect(self.check_pending_statuses)
        filters_layout.addWidget(self.check_status_btn)
        
        self.export_btn = QPushButton("üì• –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.clicked.connect(self.export_history)
        filters_layout.addWidget(self.export_btn)
        
        header_layout.addWidget(filters_group)
        layout.addWidget(header)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(10)
        self.history_table.setHorizontalHeaderLabels([
            "–î–∞—Ç–∞", "–¢–∏–ø", "–û—Ç", "–ö–æ–º—É", "–¢–æ–∫–µ–Ω", "–°—É–º–º–∞", 
            "Gas", "–°—Ç–∞—Ç—É—Å", "TX Hash", "–ë–ª–æ–∫"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.history_table.setAlternatingRowColors(True)
        self.history_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.history_table.setSortingEnabled(True)
        self.history_table.horizontalHeader().setStretchLastSection(True)
        self.history_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.history_table.customContextMenuRequested.connect(self.show_context_menu)
        
        layout.addWidget(self.history_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QHBoxLayout(stats_group)
        
        self.stats_label = QLabel("–í—Å–µ–≥–æ: 0 | –£—Å–ø–µ—à–Ω—ã—Ö: 0 | –ù–µ—É–¥–∞—á–Ω—ã—Ö: 0 | –í –æ–∂–∏–¥–∞–Ω–∏–∏: 0")
        stats_layout.addWidget(self.stats_label)
        
        layout.addWidget(stats_group)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_history()
        
        logger.info("HistoryTab –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î"""
        try:
            session = self.db_manager.get_session()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = session.query(Transaction).order_by(
                Transaction.created_at.desc()
            ).all()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.history_table.setRowCount(0)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            for tx in transactions:
                self.add_transaction_to_table(tx)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_statistics(transactions)
            
            session.close()
            
            self.log_message(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "INFO")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", "ERROR")
            
    def add_transaction_to_table(self, tx: Transaction):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row_position = self.history_table.rowCount()
        self.history_table.insertRow(row_position)
        
        # –î–∞—Ç–∞
        date_str = tx.created_at.strftime("%Y-%m-%d %H:%M:%S") if tx.created_at else ""
        self.history_table.setItem(row_position, 0, QTableWidgetItem(date_str))
        
        # –¢–∏–ø
        self.history_table.setItem(row_position, 1, QTableWidgetItem(tx.type or "transfer"))
        
        # –û—Ç
        from_addr = tx.from_address[:6] + "..." + tx.from_address[-4:] if tx.from_address else ""
        self.history_table.setItem(row_position, 2, QTableWidgetItem(from_addr))
        
        # –ö–æ–º—É
        to_addr = tx.to_address[:6] + "..." + tx.to_address[-4:] if tx.to_address else ""
        self.history_table.setItem(row_position, 3, QTableWidgetItem(to_addr))
        
        # –¢–æ–∫–µ–Ω
        self.history_table.setItem(row_position, 4, QTableWidgetItem(tx.token_symbol or "BNB"))
        
        # –°—É–º–º–∞
        amount_str = f"{tx.amount:.4f}" if tx.amount else "0"
        self.history_table.setItem(row_position, 5, QTableWidgetItem(amount_str))
        
        # Gas
        gas_str = f"{tx.gas_price:.2f}" if tx.gas_price else "0"
        self.history_table.setItem(row_position, 6, QTableWidgetItem(gas_str))
        
        # –°—Ç–∞—Ç—É—Å
        status_item = QTableWidgetItem(tx.status or "pending")
        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if tx.status == "success":
            status_item.setBackground(QColor(76, 175, 80))  # –ó–µ–ª–µ–Ω—ã–π
        elif tx.status == "failed":
            status_item.setBackground(QColor(244, 67, 54))  # –ö—Ä–∞—Å–Ω—ã–π
        else:
            status_item.setBackground(QColor(255, 152, 0))  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        self.history_table.setItem(row_position, 7, status_item)
        
        # TX Hash
        tx_hash = tx.tx_hash[:8] + "..." if tx.tx_hash else ""
        hash_item = QTableWidgetItem(tx_hash)
        hash_item.setData(Qt.UserRole, tx.tx_hash)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π hash
        self.history_table.setItem(row_position, 8, hash_item)
        
        # –ë–ª–æ–∫
        block_str = str(tx.block_number) if tx.block_number else "-"
        self.history_table.setItem(row_position, 9, QTableWidgetItem(block_str))
        
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            session = self.db_manager.get_session()
            query = session.query(Transaction)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            if self.type_filter.currentText() != "–í—Å–µ":
                query = query.filter(Transaction.type == self.type_filter.currentText())
                
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if self.status_filter.currentText() != "–í—Å–µ":
                query = query.filter(Transaction.status == self.status_filter.currentText())
                
            # –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É
            address = self.address_filter.text().strip()
            if address:
                query = query.filter(
                    (Transaction.from_address.contains(address)) |
                    (Transaction.to_address.contains(address))
                )
                
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
            date_from = self.date_from.date().toPyDate()
            date_to = self.date_to.date().toPyDate()
            query = query.filter(
                Transaction.created_at >= datetime.combine(date_from, datetime.min.time()),
                Transaction.created_at <= datetime.combine(date_to, datetime.max.time())
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            transactions = query.order_by(Transaction.created_at.desc()).all()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.history_table.setRowCount(0)
            for tx in transactions:
                self.add_transaction_to_table(tx)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_statistics(transactions)
            
            session.close()
            
            self.log_message(f"–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –ù–∞–π–¥–µ–Ω–æ: {len(transactions)}", "INFO")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            self.log_message(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}", "ERROR")
            
    def update_statistics(self, transactions: List[Transaction]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = len(transactions)
        success = len([t for t in transactions if t.status == "success"])
        failed = len([t for t in transactions if t.status == "failed"])
        pending = len([t for t in transactions if t.status == "pending"])
        
        self.stats_label.setText(
            f"–í—Å–µ–≥–æ: {total} | –£—Å–ø–µ—à–Ω—ã—Ö: {success} | –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed} | –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}"
        )
        
    def check_pending_statuses(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            session = self.db_manager.get_session()
            
            # –ü–æ–ª—É—á–∞–µ–º pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            pending_txs = session.query(Transaction).filter(
                Transaction.status == "pending"
            ).all()
            
            if not pending_txs:
                self.log_message("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", "INFO")
                return
                
            # –°–æ–±–∏—Ä–∞–µ–º —Ö–µ—à–∏
            tx_hashes = [tx.tx_hash for tx in pending_txs if tx.tx_hash]
            
            if not tx_hashes:
                self.log_message("–ù–µ—Ç —Ö–µ—à–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", "WARNING")
                return
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.status_checker = TransactionStatusChecker(
                self.main_window.web3_provider, tx_hashes
            )
            self.status_checker.status_updated.connect(self.update_transaction_status)
            self.status_checker.start()
            
            self.log_message(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(tx_hashes)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "INFO")
            self.check_status_btn.setEnabled(False)
            self.check_status_btn.setText("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.status_checker.finished.connect(
                lambda: self.check_status_btn.setEnabled(True)
            )
            self.status_checker.finished.connect(
                lambda: self.check_status_btn.setText("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã")
            )
            
            session.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", "ERROR")
            
    def update_transaction_status(self, tx_hash: str, new_status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            session = self.db_manager.get_session()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            tx = session.query(Transaction).filter(
                Transaction.tx_hash == tx_hash
            ).first()
            
            if tx:
                tx.status = new_status
                tx.confirmed_at = datetime.utcnow()
                session.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ
                for row in range(self.history_table.rowCount()):
                    hash_item = self.history_table.item(row, 8)
                    if hash_item and hash_item.data(Qt.UserRole) == tx_hash:
                        status_item = self.history_table.item(row, 7)
                        status_item.setText(new_status)
                        
                        if new_status == "success":
                            status_item.setBackground(QColor(76, 175, 80))
                        elif new_status == "failed":
                            status_item.setBackground(QColor(244, 67, 54))
                        break
                        
                self.log_message(f"–°—Ç–∞—Ç—É—Å {tx_hash[:8]}... –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}", "INFO")
                
            session.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
    def show_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Ç–∞–±–ª–∏—Ü—ã"""
        menu = QMenu()
        
        # –î–µ–π—Å—Ç–≤–∏—è
        copy_hash_action = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å TX Hash")
        copy_address_action = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        menu.addSeparator()
        view_on_bscscan_action = menu.addAction("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        action = menu.exec_(self.history_table.mapToGlobal(position))
        
        if action:
            current_row = self.history_table.currentRow()
            if current_row >= 0:
                if action == copy_hash_action:
                    hash_item = self.history_table.item(current_row, 8)
                    if hash_item:
                        tx_hash = hash_item.data(Qt.UserRole)
                        if tx_hash:
                            QApplication.clipboard().setText(tx_hash)
                            self.log_message("TX Hash —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                            
                elif action == copy_address_action:
                    # –ö–æ–ø–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    to_address = self.history_table.item(current_row, 3).text()
                    if to_address:
                        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ –ë–î
                        hash_item = self.history_table.item(current_row, 8)
                        if hash_item:
                            tx_hash = hash_item.data(Qt.UserRole)
                            session = self.db_manager.get_session()
                            tx = session.query(Transaction).filter(
                                Transaction.tx_hash == tx_hash
                            ).first()
                            if tx and tx.to_address:
                                QApplication.clipboard().setText(tx.to_address)
                                self.log_message("–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                            session.close()
                            
                elif action == view_on_bscscan_action:
                    hash_item = self.history_table.item(current_row, 8)
                    if hash_item:
                        tx_hash = hash_item.data(Qt.UserRole)
                        if tx_hash:
                            import webbrowser
                            webbrowser.open(f"https://bscscan.com/tx/{tx_hash}")
                            
    def export_history(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(
                self, "–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", "", 
                "CSV —Ñ–∞–π–ª—ã (*.csv);;Excel —Ñ–∞–π–ª—ã (*.xlsx)"
            )
            
            if not file_path:
                return
                
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            data = []
            for row in range(self.history_table.rowCount()):
                row_data = []
                for col in range(self.history_table.columnCount()):
                    item = self.history_table.item(row, col)
                    if col == 8:  # TX Hash - –±–µ—Ä–µ–º –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        row_data.append(item.data(Qt.UserRole) if item else "")
                    else:
                        row_data.append(item.text() if item else "")
                data.append(row_data)
                
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data, columns=[
                "–î–∞—Ç–∞", "–¢–∏–ø", "–û—Ç", "–ö–æ–º—É", "–¢–æ–∫–µ–Ω", "–°—É–º–º–∞", 
                "Gas", "–°—Ç–∞—Ç—É—Å", "TX Hash", "–ë–ª–æ–∫"
            ])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            if file_path.endswith('.xlsx'):
                df.to_excel(file_path, index=False)
            else:
                df.to_csv(file_path, index=False)
                
            self.log_message(f"–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {file_path}", "SUCCESS")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            self.log_message(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
            
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏"""
        if self.status_checker and self.status_checker.isRunning():
            self.status_checker.stop()
            self.status_checker.wait()
