"""
–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
"""

import json
import time
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any, List
import threading

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QPushButton, QLabel,
    QLineEdit, QTextEdit, QSpinBox, QDoubleSpinBox,
    QTableWidget, QTableWidgetItem, QHeaderView,
    QMessageBox, QComboBox, QCheckBox, QWidget,
    QFormLayout, QGridLayout, QRadioButton, QButtonGroup
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, QTimer
from PyQt5.QtGui import QFont

from web3 import Web3
from eth_account import Account
from eth_typing import HexStr, HexAddress

from .base_tab import BaseTab
from ...utils.logger import get_logger

logger = get_logger(__name__)

try:
    from mnemonic import Mnemonic
except ImportError:
    Mnemonic = None
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: pip install mnemonic")

# –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ BSC (checksum)
CONTRACTS = {
    'PLEX_ONE': Web3.to_checksum_address('0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1'),
    'USDT': Web3.to_checksum_address('0x55d398326f99059ff775485246999027b3197955'),
    'PANCAKE_ROUTER': Web3.to_checksum_address('0x10ED43C718714eb63d5aA57B78B54704E256024E'),
    'WBNB': Web3.to_checksum_address('0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c')
}

# ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
ERC20_ABI = '''[
    {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [{"name": "", "type": "string"}],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {"name": "_spender", "type": "address"},
            {"name": "_value", "type": "uint256"}
        ],
        "name": "approve",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [{"name": "", "type": "uint8"}],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [{"name": "_owner", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "balance", "type": "uint256"}],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [{"name": "", "type": "string"}],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {"name": "_to", "type": "address"},
            {"name": "_value", "type": "uint256"}
        ],
        "name": "transfer",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {"name": "_owner", "type": "address"},
            {"name": "_spender", "type": "address"}
        ],
        "name": "allowance",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }
]'''

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è PancakeSwap Router
PANCAKE_ROUTER_ABI = json.loads('[{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"}]')


class AutoBuyTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    balance_updated = pyqtSignal(dict)
    purchase_completed = pyqtSignal(dict)
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.web3 = None
        self.account = None
        self.is_buying = False
        self.buy_thread = None
        self.balances = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.balance_timer = QTimer()
        self.balance_timer.timeout.connect(self.update_balances)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.balance_updated.connect(self._update_balance_display)
        self.purchase_completed.connect(self._handle_purchase_completed)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        self._init_web3()
        
        logger.info("–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def _init_web3(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ RPC endpoints"""
        # –°–ø–∏—Å–æ–∫ RPC endpoints –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        rpc_urls = [
            'https://bsc-dataseed.binance.org/',
            'https://bsc-dataseed1.defibit.io/',
            'https://bsc-dataseed1.ninicoin.io/',
            'https://bsc-dataseed2.defibit.io/',
            'https://bsc-dataseed3.defibit.io/',
            'https://bsc-dataseed4.defibit.io/',
            'https://bsc-dataseed1.binance.org/',
            'https://bsc-dataseed2.binance.org/',
            'https://bsc-dataseed3.binance.org/',
            'https://bsc-dataseed4.binance.org/'
        ]
        
        for rpc_url in rpc_urls:
            try:
                self.log(f"üîó –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {rpc_url}", "INFO")
                self.web3 = Web3(Web3.HTTPProvider(rpc_url, request_kwargs={'timeout': 10}))
                
                if self.web3.is_connected():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫
                    latest_block = self.web3.eth.block_number
                    self.log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC —á–µ—Ä–µ–∑ {rpc_url} (–±–ª–æ–∫: {latest_block})", "SUCCESS")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                    try:
                        from ...utils.gas_manager import GasManager
                        from ...utils.token_safety import TokenSafetyChecker
                        from ...utils.async_manager import get_async_manager
                        
                        self.gas_manager = GasManager(self.web3)
                        self.safety_checker = TokenSafetyChecker(self.web3)
                        self.async_manager = get_async_manager(self.web3)
                        
                        self.log("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "SUCCESS")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {str(e)}", "WARNING")
                    
                    return
                else:
                    self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {rpc_url}", "ERROR")
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {rpc_url}: {str(e)}", "ERROR")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω RPC –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC endpoint", "ERROR")
        # –°–æ–∑–¥–∞–µ–º fallback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            self.web3 = Web3(Web3.HTTPProvider('https://bsc-dataseed.binance.org/'))
            self.log("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ fallback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "ERROR")
            self.web3 = None
            
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        layout.addWidget(title)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_group = self._create_wallet_group()
        layout.addWidget(wallet_group)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        balance_group = self._create_balance_group()
        layout.addWidget(balance_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∫–∏
        buy_settings_group = self._create_buy_settings_group()
        layout.addWidget(buy_settings_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞
        gas_group = self.create_gas_settings_group()
        layout.addWidget(gas_group)
        
        # –ì—Ä—É–ø–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∞–º–∏
        control_group = self._create_control_group()
        layout.addWidget(control_group)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        log_group = self._create_log_group()
        layout.addWidget(log_group)
        
    def _create_wallet_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        group = QGroupBox("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞")
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_type_layout = QHBoxLayout()
        self.seed_radio = QRadioButton("SEED —Ñ—Ä–∞–∑–∞")
        self.private_key_radio = QRadioButton("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        self.seed_radio.setChecked(True)
        
        self.button_group = QButtonGroup()
        self.button_group.addButton(self.seed_radio)
        self.button_group.addButton(self.private_key_radio)
        
        connect_type_layout.addWidget(self.seed_radio)
        connect_type_layout.addWidget(self.private_key_radio)
        connect_type_layout.addStretch()
        layout.addLayout(connect_type_layout)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ seed/private key
        self.wallet_input = QTextEdit()
        self.wallet_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ SEED —Ñ—Ä–∞–∑—É (12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞) –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...")
        self.wallet_input.setMaximumHeight(60)
        layout.addWidget(self.wallet_input)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.connect_btn = QPushButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
        self.connect_btn.clicked.connect(self.connect_wallet)
        button_layout.addWidget(self.connect_btn)
        
        self.disconnect_btn = QPushButton("üîå –û—Ç–∫–ª—é—á–∏—Ç—å")
        self.disconnect_btn.clicked.connect(self.disconnect_wallet)
        self.disconnect_btn.setEnabled(False)
        button_layout.addWidget(self.disconnect_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        self.debug_balance_btn = QPushButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞")
        self.debug_balance_btn.clicked.connect(self.debug_balance)
        self.debug_balance_btn.setEnabled(False)
        button_layout.addWidget(self.debug_balance_btn)
        
        layout.addLayout(button_layout)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_address_label = QLabel("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.wallet_address_label.setFont(QFont("Consolas", 10))
        layout.addWidget(self.wallet_address_label)
        
        group.setLayout(layout)
        return group
        
    def _create_balance_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        group = QGroupBox("–ë–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤")
        layout = QGridLayout()
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
        layout.addWidget(QLabel("BNB:"), 0, 0)
        self.bnb_balance_label = QLabel("0.0")
        self.bnb_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.bnb_balance_label, 0, 1)
        
        layout.addWidget(QLabel("PLEX ONE:"), 1, 0)
        self.plex_balance_label = QLabel("0.0")
        self.plex_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.plex_balance_label, 1, 1)
        
        layout.addWidget(QLabel("USDT:"), 2, 0)
        self.usdt_balance_label = QLabel("0.0")
        self.usdt_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.usdt_balance_label, 2, 1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        self.refresh_btn.clicked.connect(self.refresh_all_balances)
        self.refresh_btn.setEnabled(False)
        self.refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #1e3a8a;
                border: 1px solid #3b82f6;
                border-radius: 5px;
                padding: 8px;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #1e40af;
                border-color: #60a5fa;
            }
            QPushButton:pressed {
                background-color: #1e3a8a;
            }
        """)
        layout.addWidget(self.refresh_btn, 3, 0, 1, 2)
        
        # –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.auto_refresh_cb = QCheckBox("–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫")
        self.auto_refresh_cb.toggled.connect(self._toggle_auto_refresh)
        layout.addWidget(self.auto_refresh_cb, 4, 0, 1, 2)
        
        group.setLayout(layout)
        return group
        
    def _create_buy_settings_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∫–∏"""
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫")
        layout = QFormLayout()
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        self.token_combo = QComboBox()
        self.token_combo.addItems(['PLEX ONE', 'USDT', '–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω'])
        layout.addRow("–¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", self.token_combo)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.custom_token_input.setEnabled(False)
        layout.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", self.custom_token_input)
        
        # –í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (—á–µ–º –ø–æ–∫—É–ø–∞–µ–º)
        self.buy_with_combo = QComboBox()
        self.buy_with_combo.addItems(['BNB', 'USDT'])
        layout.addRow("–ü–æ–∫—É–ø–∞—Ç—å –∑–∞:", self.buy_with_combo)
        
        # –°—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        self.buy_amount_input = QDoubleSpinBox()
        self.buy_amount_input.setRange(0.001, 10000)
        self.buy_amount_input.setDecimals(6)
        self.buy_amount_input.setValue(0.01)  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.1 –¥–æ 0.01 BNB –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        layout.addRow("–°—É–º–º–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:", self.buy_amount_input)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
        self.interval_input = QSpinBox()
        self.interval_input.setRange(1, 86400)  # –æ—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ 24 —á–∞—Å–æ–≤
        self.interval_input.setValue(60)  # 1 –º–∏–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):", self.interval_input)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
        self.max_buys_input = QSpinBox()
        self.max_buys_input.setRange(1, 1000)
        self.max_buys_input.setValue(10)
        layout.addRow("–ú–∞–∫—Å–∏–º—É–º –ø–æ–∫—É–ø–æ–∫:", self.max_buys_input)
        
        # Slippage tolerance
        self.slippage_input = QDoubleSpinBox()
        self.slippage_input.setRange(0.1, 50.0)
        self.slippage_input.setDecimals(1)
        self.slippage_input.setValue(5.0)
        layout.addRow("Slippage (%):", self.slippage_input)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
        self.token_combo.currentTextChanged.connect(self._on_token_changed)
        
        group.setLayout(layout)
        return group
        
    def _create_control_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∞–º–∏"""
        group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∞–º–∏")
        layout = QVBoxLayout()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QGridLayout()
        
        stats_layout.addWidget(QLabel("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫:"), 0, 0)
        self.completed_buys_label = QLabel("0")
        self.completed_buys_label.setFont(QFont("Arial", 11, QFont.Bold))
        stats_layout.addWidget(self.completed_buys_label, 0, 1)
        
        stats_layout.addWidget(QLabel("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:"), 1, 0)
        self.spent_amount_label = QLabel("0.0")
        self.spent_amount_label.setFont(QFont("Arial", 11, QFont.Bold))
        stats_layout.addWidget(self.spent_amount_label, 1, 1)
        
        stats_layout.addWidget(QLabel("–ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:"), 2, 0)
        self.bought_tokens_label = QLabel("0.0")
        self.bought_tokens_label.setFont(QFont("Arial", 11, QFont.Bold))
        stats_layout.addWidget(self.bought_tokens_label, 2, 1)
        
        layout.addLayout(stats_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("üõí –ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏")
        self.start_btn.clicked.connect(self.start_auto_buy)
        self.start_btn.setEnabled(False)
        button_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.clicked.connect(self.stop_auto_buy)
        self.stop_btn.setEnabled(False)
        button_layout.addWidget(self.stop_btn)
        
        self.reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        self.reset_btn.clicked.connect(self.reset_stats)
        button_layout.addWidget(self.reset_btn)
        
        layout.addLayout(button_layout)
        
        group.setLayout(layout)
        return group
        
    def _create_log_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ª–æ–≥–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        group = QGroupBox("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
        layout = QVBoxLayout()
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumHeight(200)
        layout.addWidget(self.log_text)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥")
        clear_btn.clicked.connect(self.clear_log)
        layout.addWidget(clear_btn)
        
        group.setLayout(layout)
        return group
        
    def _on_token_changed(self, token: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        self.custom_token_input.setEnabled(token == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω")
        
    def connect_wallet(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        wallet_data = self.wallet_input.toPlainText().strip()
        
        if not wallet_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ SEED —Ñ—Ä–∞–∑—É!")
            return
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if ' ' in wallet_data:  # SEED —Ñ—Ä–∞–∑–∞
                    
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–µ—Ä–∏–≤–∞—Ü–∏—é –ø–æ BIP44: m/44'/60'/0'/0/0
                account_path = "m/44'/60'/0'/0/0"
                created = False
                # 1) –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ eth_account (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –¥–æ–ø. –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
                if hasattr(Account, 'from_mnemonic'):
                    try:
                        self.account = Account.from_mnemonic(wallet_data, account_path=account_path)  # type: ignore[arg-type]
                        created = True
                    except Exception:
                        created = False
                # 2) –§–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É mnemonic + bip_utils (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
                if not created:
                    try:
                        from mnemonic import Mnemonic
                        from bip_utils import Bip39SeedGenerator, Bip44, Bip44Coins, Bip44Changes  # type: ignore[import]
                        mnemo = Mnemonic("english")
                        if not mnemo.check(wallet_data):
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è SEED —Ñ—Ä–∞–∑–∞")
                        seed_bytes = Bip39SeedGenerator(wallet_data).Generate()
                        bip44_ctx = Bip44.FromSeed(seed_bytes, Bip44Coins.ETHEREUM).Purpose().Coin().Account(0).Change(Bip44Changes.CHAIN_EXT).AddressIndex(0)
                        private_key = bip44_ctx.PrivateKey().Raw().ToHex()
                        self.account = Account.from_key(private_key)
                        created = True
                    except Exception:
                        created = False
                # 3) –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                if not created:
                    QMessageBox.critical(
                        self,
                        "–û—à–∏–±–∫–∞",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏–∑ SEED —Ñ—Ä–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: mnemonic, bip_utils."
                    )
                    return
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
                private_key = wallet_data
                if private_key.startswith('0x'):
                    private_key = private_key[2:]
                    
                self.account = Account.from_key(private_key)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.wallet_address_label.setText(f"–ê–¥—Ä–µ—Å: {self.account.address}")
            self.connect_btn.setEnabled(False)
            self.disconnect_btn.setEnabled(True)
            self.refresh_btn.setEnabled(True)
            self.debug_balance_btn.setEnabled(True)
            self.start_btn.setEnabled(True)
            
            self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            self.update_balances()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫: {str(e)}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {str(e)}", "ERROR")
            
    def disconnect_wallet(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        self.account = None
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –µ—Å–ª–∏ –∏–¥—É—Ç
        if self.is_buying:
            self.stop_auto_buy()
            
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.wallet_input.clear()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.wallet_address_label.setText("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.connect_btn.setEnabled(True)
        self.disconnect_btn.setEnabled(False)
        self.refresh_btn.setEnabled(False)
        self.debug_balance_btn.setEnabled(False)
        self.start_btn.setEnabled(False)
        
        # –û—á–∏—â–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        self.bnb_balance_label.setText("0.0")
        self.plex_balance_label.setText("0.0")
        self.usdt_balance_label.setText("0.0")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.balance_timer.stop()
        self.auto_refresh_cb.setChecked(False)
        
        self.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω", "INFO")
        
    def refresh_all_balances(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤...", "INFO")
        
        if not self.account:
            self.log("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "ERROR")
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.web3 or not self.web3.is_connected():
                self.log("‚ö†Ô∏è Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...", "WARNING")
                self._init_web3()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º BNB –±–∞–ª–∞–Ω—Å
        try:
            checksum_address = Web3.to_checksum_address(self.account.address)
            bnb_balance = self.web3.eth.get_balance(checksum_address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            self.bnb_balance_label.setText(f"{bnb_formatted:.6f}")
            self.log(f"üí∞ BNB –±–∞–ª–∞–Ω—Å: {bnb_formatted:.6f}", "SUCCESS")
        except Exception as e:
            self.bnb_balance_label.setText("–û—à–∏–±–∫–∞")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BNB –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º PLEX ONE –±–∞–ª–∞–Ω—Å
        try:
            plex_balance = self._get_token_balance(CONTRACTS['PLEX_ONE'])
            self.plex_balance_label.setText(f"{plex_balance:.6f}")
            if plex_balance > 0:
                self.log(f"üí∞ PLEX ONE –±–∞–ª–∞–Ω—Å: {plex_balance:.6f}", "SUCCESS")
        except Exception as e:
            self.plex_balance_label.setText("–û—à–∏–±–∫–∞")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PLEX ONE –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º USDT –±–∞–ª–∞–Ω—Å
        try:
            usdt_balance = self._get_token_balance(CONTRACTS['USDT'])
            self.usdt_balance_label.setText(f"{usdt_balance:.6f}")
            if usdt_balance > 0:
                self.log(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: {usdt_balance:.6f}", "SUCCESS")
        except Exception as e:
            self.usdt_balance_label.setText("–û—à–∏–±–∫–∞")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è USDT –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        self.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
        
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}", "ERROR")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã:\n{str(e)}")

    def debug_balance(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        self.log("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–õ–ê–ù–°–ê ===", "INFO")
        
        if not self.account:
            self.log("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "ERROR")
            return
            
        self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
        
        if not self.web3:
            self.log("‚ùå Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "ERROR")
            return
            
        self.log("‚úÖ Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC", "SUCCESS")
        
        # BNB –±–∞–ª–∞–Ω—Å
        try:
            checksum_address = Web3.to_checksum_address(self.account.address)
            bnb_balance = self.web3.eth.get_balance(checksum_address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            self.log(f"üí∞ BNB –±–∞–ª–∞–Ω—Å: {bnb_formatted:.6f}", "SUCCESS")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BNB –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        # PLEX ONE –±–∞–ª–∞–Ω—Å
        try:
            self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω: PLEX ONE ({CONTRACTS['PLEX_ONE']})", "INFO")
            plex_checksum = Web3.to_checksum_address(CONTRACTS['PLEX_ONE'])
            contract_code = self.web3.eth.get_code(plex_checksum)
            if contract_code and contract_code != b'':
                plex_contract = self.web3.eth.contract(address=plex_checksum, abi=ERC20_ABI)
                plex_balance_raw = plex_contract.functions.balanceOf(checksum_address).call()
                plex_decimals = plex_contract.functions.decimals().call()
                plex_balance = plex_balance_raw / (10 ** plex_decimals)
                self.log(f"‚úÖ –ë–∞–ª–∞–Ω—Å PLEX ONE: {plex_balance:.6f}", "SUCCESS")
            else:
                self.log(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç PLEX ONE –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PLEX ONE –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        # USDT –±–∞–ª–∞–Ω—Å
        try:
            self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω: USDT ({CONTRACTS['USDT']})", "INFO")
            usdt_checksum = Web3.to_checksum_address(CONTRACTS['USDT'])
            contract_code = self.web3.eth.get_code(usdt_checksum)
            if contract_code and contract_code != b'':
                usdt_contract = self.web3.eth.contract(address=usdt_checksum, abi=ERC20_ABI)
                usdt_balance_raw = usdt_contract.functions.balanceOf(checksum_address).call()
                usdt_decimals = usdt_contract.functions.decimals().call()
                usdt_balance = usdt_balance_raw / (10 ** usdt_decimals)
                self.log(f"‚úÖ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.6f}", "SUCCESS")
            else:
                self.log(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç USDT –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è USDT –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
        
        self.log("üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===", "INFO")

    def _get_token_balance(self, token_address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            if not self.account or not self.web3:
                self.log("‚ùå –ö–æ—à–µ–ª–µ–∫ –∏–ª–∏ Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "ERROR")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
            if not self.web3.is_connected():
                self.log("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC —Å–µ—Ç–∏", "ERROR")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            if not Web3.is_address(token_address):
                self.log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}", "ERROR")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π
            checksum_address = Web3.to_checksum_address(token_address)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                code = self.web3.eth.get_code(checksum_address)
                if code == b'':
                    self.log(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {checksum_address}", "ERROR")
                    return 0
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {str(e)}", "ERROR")
                return 0
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            token_contract = self.web3.eth.contract(
                address=checksum_address,
                abi=ERC20_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º decimals
            try:
                decimals = token_contract.functions.decimals().call()
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è decimals: {str(e)}", "ERROR")
                decimals = 18  # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ 18 decimals
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            wallet_address = Web3.to_checksum_address(self.account.address)
            try:
                balance = token_contract.functions.balanceOf(wallet_address).call()
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}", "ERROR")
                return 0
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_balance = balance / (10 ** decimals)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 0 –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            if formatted_balance > 0:
                self.log(f"‚úÖ –ë–∞–ª–∞–Ω—Å {checksum_address[:10]}...: {formatted_balance:.6f}", "SUCCESS")
            
            return formatted_balance
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞: {str(e)}", "ERROR")
            return 0

    def update_balances(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤"""
        if not self.account or not self.web3:
            return
            
        try:
            address = self.account.address
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å BNB
            bnb_balance_wei = self.web3.eth.get_balance(address)
            bnb_balance = self.web3.from_wei(bnb_balance_wei, 'ether')
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å PLEX ONE
            try:
                plex_contract = self.web3.eth.contract(
                    address=CONTRACTS['PLEX_ONE'],
                    abi=ERC20_ABI
                )
                plex_balance_raw = plex_contract.functions.balanceOf(address).call()
                plex_decimals = plex_contract.functions.decimals().call()
                plex_balance = plex_balance_raw / (10 ** plex_decimals)
            except Exception as e:
                plex_balance = 0.0
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ PLEX: {str(e)}", "WARNING")
                
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            try:
                usdt_contract = self.web3.eth.contract(
                    address=CONTRACTS['USDT'],
                    abi=ERC20_ABI
                )
                usdt_balance_raw = usdt_contract.functions.balanceOf(address).call()
                usdt_decimals = usdt_contract.functions.decimals().call()
                usdt_balance = usdt_balance_raw / (10 ** usdt_decimals)
            except Exception as e:
                usdt_balance = 0.0
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {str(e)}", "WARNING")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            self.balances = {
                'bnb': float(bnb_balance),
                'plex': float(plex_balance),
                'usdt': float(usdt_balance)
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            self.balance_updated.emit(self.balances)
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}", "ERROR")
            
    def _update_balance_display(self, balances: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        self.bnb_balance_label.setText(f"{balances.get('bnb', 0):.6f}")
        self.plex_balance_label.setText(f"{balances.get('plex', 0):.2f}")
        self.usdt_balance_label.setText(f"{balances.get('usdt', 0):.2f}")
        
    def _toggle_auto_refresh(self, enabled: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        if enabled and self.account:
            self.balance_timer.start(30000)  # 30 —Å–µ–∫—É–Ω–¥
            self.log("‚úÖ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ", "INFO")
        else:
            self.balance_timer.stop()
            self.log("üîÑ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ", "INFO")
            
    def start_auto_buy(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫"""
        if not self.account:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!")
            return
            
        if self.is_buying:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∫—É–ø–∫–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã!")
            return
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self._validate_buy_settings():
            return
            
        self.is_buying = True
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ–∫—É–ø–æ–∫
        self.buy_thread = threading.Thread(target=self._buy_worker, daemon=True)
        self.buy_thread.start()
        
        self.log("üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã", "SUCCESS")
        
    def stop_auto_buy(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫"""
        self.is_buying = False
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        
        self.log("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "WARNING")
        
    def _validate_buy_settings(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if self.token_combo.currentText() == "–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω":
            custom_token = self.custom_token_input.text().strip()
            if not custom_token or not Web3.is_address(custom_token):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        buy_with = self.buy_with_combo.currentText()
        amount = self.buy_amount_input.value()
        
        if buy_with == "BNB" and self.balances.get('bnb', 0) < amount:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            return False
        elif buy_with == "USDT" and self.balances.get('usdt', 0) < amount:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            return False
            
        return True
        
    def _buy_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫"""
        completed_buys = 0
        max_buys = self.max_buys_input.value()
        interval = self.interval_input.value()
        
        while self.is_buying and completed_buys < max_buys:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
                result = self._execute_buy()
                
                if result['success']:
                    completed_buys += 1
                    self.purchase_completed.emit({
                        'buy_number': completed_buys,
                        'tx_hash': result.get('tx_hash', ''),
                        'amount_spent': result.get('amount_spent', 0),
                        'tokens_bought': result.get('tokens_bought', 0)
                    })
                    
                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if self.is_buying and completed_buys < max_buys:
                    time.sleep(interval)
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏: {str(e)}", "ERROR")
                time.sleep(interval)
                
        # –ü–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if self.is_buying:
            self.is_buying = False
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.log(f"üèÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_buys}/{max_buys}", "SUCCESS")
            
    def _retry_call(self, func, max_retries: int = 3, delay: float = 2.0):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è retry –¥–ª—è –≤—ã–∑–æ–≤–æ–≤"""
        last_error = None
        
        for attempt in range(max_retries):
            try:
                return func()
            except Exception as e:
                last_error = e
                if attempt < max_retries - 1:
                    self.log(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}", "WARNING")
                    self.log(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...", "INFO")
                    time.sleep(delay * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
        raise last_error

    def _get_amounts_out_with_retry(self, amount_in: int, path: List[str]) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ —Å retry"""
        def _get():
            path_checksum = [Web3.to_checksum_address(addr) for addr in path]
            router_contract = self.web3.eth.contract(
                address=CONTRACTS['PANCAKE_ROUTER'],
                abi=PANCAKE_ROUTER_ABI
            )
            return router_contract.functions.getAmountsOut(amount_in, path_checksum).call()
        
        return self._retry_call(_get, max_retries=3, delay=2.0)

    def _validate_buy_params(self, token_address: str, amount: float, buy_with: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not self.web3 or not self.web3.is_connected():
                raise Exception("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
            if not self.account:
                raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
            if not token_address or not token_address.startswith('0x'):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if buy_with == 'BNB':
                bnb_balance = self.web3.eth.get_balance(self.account.address)
                bnb_balance_eth = self.web3.from_wei(bnb_balance, 'ether')
                if bnb_balance_eth < amount:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB. –ë–∞–ª–∞–Ω—Å: {bnb_balance_eth:.6f}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount}")
            else:  # USDT
                usdt_contract = self.web3.eth.contract(address=CONTRACTS['USDT'], abi=ERC20_ABI)
                usdt_balance_wei = usdt_contract.functions.balanceOf(self.account.address).call()
                usdt_balance = usdt_balance_wei / (10 ** 6)  # USDT decimals
                if usdt_balance < amount:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT. –ë–∞–ª–∞–Ω—Å: {usdt_balance:.4f}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount}")
                
            return {
                'valid': True,
                'bnb_balance': bnb_balance_eth if buy_with == 'BNB' else None,
                'usdt_balance': usdt_balance if buy_with == 'USDT' else None
            }
            
        except Exception as e:
            return {
                'valid': False,
                'error': str(e)
            }

    def _execute_buy(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ PancakeSwap —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.log("=== –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ ===", "INFO")
            
            if not self.account or not self.web3:
                return {
                    'success': False,
                    'error': '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏
            buy_amount = self.buy_amount_input.value()
            buy_with = self.buy_with_combo.currentText()  # –í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (BNB –∏–ª–∏ USDT)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.log(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É: –°—É–º–º–∞ {buy_amount}, –í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã: {buy_with}", "INFO")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            selected_token = self.token_combo.currentText()
            self.log(f"üõí –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {selected_token}", "INFO")
            
            if selected_token == 'PLEX ONE':
                token_address = CONTRACTS['PLEX_ONE']
                self.log(f"üìã –ê–¥—Ä–µ—Å PLEX ONE: {token_address}", "INFO")
            elif selected_token == 'USDT':
                token_address = CONTRACTS['USDT']
                self.log(f"üìã –ê–¥—Ä–µ—Å USDT: {token_address}", "INFO")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω
                token_address = self.custom_token_input.text().strip()
                self.log(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}", "INFO")
                if not token_address or not Web3.is_address(token_address):
                    self.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞", "ERROR")
                    return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ–∫—É–ø–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–º –ø–ª–∞—Ç–∏–º
            if buy_with == 'USDT' and selected_token == 'USDT':
                self.log("‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å USDT –∑–∞ USDT", "ERROR")
                return {'success': False, 'error': '–ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–º –ø–ª–∞—Ç–∏—Ç–µ'}
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∫—É–ø–∫–∏
            validation = self._validate_buy_params(token_address, buy_amount, buy_with)
            if not validation['valid']:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation['error']}", "ERROR")
                return {'success': False, 'error': validation['error']}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
            self.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞...", "INFO")
            try:
                if buy_with == 'BNB':
                    amount_wei = self.web3.to_wei(buy_amount, 'ether')
                    path = [CONTRACTS['WBNB'], Web3.to_checksum_address(token_address)]
                else:  # USDT
                    amount_wei = int(buy_amount * (10 ** 6))  # USDT decimals
                    path = [CONTRACTS['USDT'], Web3.to_checksum_address(token_address)]
                
                amounts_out = self._get_amounts_out_with_retry(amount_wei, path)
                if not amounts_out or amounts_out[-1] == 0:
                    self.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏", "ERROR")
                    return {'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞'}
                
                expected_tokens = amounts_out[-1] / (10 ** 9) if selected_token == 'PLEX ONE' else amounts_out[-1] / (10 ** 18)
                self.log(f"üîç –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å: {expected_tokens:.6f} {selected_token}", "INFO")
                
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}", "WARNING")
                self.log("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫—É–ø–∫—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", "WARNING")
            
            self.log(f"üõí –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ {selected_token} –∑–∞ {buy_with} —á–µ—Ä–µ–∑ PancakeSwap...", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç PancakeSwap Router
            router_address = CONTRACTS['PANCAKE_ROUTER']
            self.log(f"üìã PancakeSwap Router: {router_address}", "INFO")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            deadline = int(time.time()) + 300  # 5 –º–∏–Ω—É—Ç
            
            if buy_with == 'BNB':
                self.log("üí∞ –†–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏: BNB -> Token (swapExactETHForTokens)", "INFO")
                # –ü–æ–∫—É–ø–∫–∞ –∑–∞ BNB (ETH -> Token)
                router_abi = [
                    {
                        "inputs": [
                            {"internalType": "uint256", "name": "amountOutMin", "type": "uint256"},
                            {"internalType": "address[]", "name": "path", "type": "address[]"},
                            {"internalType": "address", "name": "to", "type": "address"},
                            {"internalType": "uint256", "name": "deadline", "type": "uint256"}
                        ],
                        "name": "swapExactETHForTokens",
                        "outputs": [{"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}],
                        "stateMutability": "payable",
                        "type": "function"
                    }
                ]
                
                router_contract = self.web3.eth.contract(
                    address=router_address,
                    abi=router_abi
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –æ–±–º–µ–Ω–∞: BNB -> Token
                # –î–ª—è PLEX ONE –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ WBNB
                if token_address.lower() == CONTRACTS['PLEX_ONE'].lower():
                    path = [
                        CONTRACTS['WBNB'],  # WBNB
                        CONTRACTS['PLEX_ONE']  # PLEX ONE
                    ]
                    self.log(f"üîÑ –ü—É—Ç—å –æ–±–º–µ–Ω–∞: WBNB -> PLEX ONE (–ø—Ä—è–º–æ–π)", "INFO")
                else:
                    path = [
                        CONTRACTS['WBNB'],  # WBNB
                        Web3.to_checksum_address(token_address)
                    ]
                    self.log(f"üîÑ –ü—É—Ç—å –æ–±–º–µ–Ω–∞: WBNB -> {selected_token}", "INFO")
                
                amount_wei = self.web3.to_wei(buy_amount, 'ether')
                self.log(f"üí∞ –°—É–º–º–∞ –≤ wei: {amount_wei} ({buy_amount} BNB)", "INFO")
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = router_contract.functions.swapExactETHForTokens(
                    0,  # amountOutMin = 0 (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'value': amount_wei,
                    'gas': self.get_gas_limit(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address)
                })
                
            else:  # buy_with == 'USDT'
                self.log("üíµ –†–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏: USDT -> Token (approve + swapExactTokensForTokens)", "INFO")
                # –ü–æ–∫—É–ø–∫–∞ –∑–∞ USDT (Token -> Token)
                
                # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å approve –¥–ª—è USDT
                usdt_address = CONTRACTS['USDT']
                self.log(f"üìã USDT –∞–¥—Ä–µ—Å: {usdt_address}", "INFO")
                erc20_abi = json.loads('[{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]')
                
                usdt_contract = self.web3.eth.contract(address=usdt_address, abi=erc20_abi)
                # USDT –∏–º–µ–µ—Ç 6 decimals, –Ω–µ 18
                amount_in_units = int(buy_amount * (10 ** 6))
                
                # Approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                self.log("üìù –î–µ–ª–∞–µ–º approve –¥–ª—è USDT...", "INFO")
                approve_tx = usdt_contract.functions.approve(
                    router_address,
                    amount_in_units
                ).build_transaction({
                    'from': self.account.address,
                    'gas': self.get_gas_limit(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': self.web3.eth.get_transaction_count(self.account.address)
                })
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º approve —Å retry
                self.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...", "INFO")
                signed_approve = self.web3.eth.account.sign_transaction(approve_tx, self.account.key)
                approve_hash = self.web3.eth.send_raw_transaction(signed_approve.rawTransaction)
                
                if not approve_hash:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                    
                self.log(f"üì§ Approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {approve_hash.hex()}", "INFO")
                self.log(f"üîó –°—Å—ã–ª–∫–∞: https://bscscan.com/tx/{approve_hash.hex()}", "INFO")
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                self.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è approve...", "INFO")
                approve_receipt = self.web3.eth.wait_for_transaction_receipt(approve_hash, timeout=180)
                
                if approve_receipt and approve_receipt['status'] == 1:
                    self.log(f"‚úÖ Approve —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. Gas used: {approve_receipt['gasUsed']}", "SUCCESS")
                else:
                    raise Exception("Approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è nonce –≤ —Å–µ—Ç–∏
                time.sleep(1)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –ø–æ—Å–ª–µ approve (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +1)
                current_nonce = self.web3.eth.get_transaction_count(self.account.address)
                self.log(f"üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –ø–æ—Å–ª–µ approve: {current_nonce}", "INFO")
                
                # –¢–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                router_abi = [
                    {
                        "inputs": [
                            {"internalType": "uint256", "name": "amountIn", "type": "uint256"},
                            {"internalType": "uint256", "name": "amountOutMin", "type": "uint256"},
                            {"internalType": "address[]", "name": "path", "type": "address[]"},
                            {"internalType": "address", "name": "to", "type": "address"},
                            {"internalType": "uint256", "name": "deadline", "type": "uint256"}
                        ],
                        "name": "swapExactTokensForTokens",
                        "outputs": [{"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}],
                        "stateMutability": "nonpayable",
                        "type": "function"
                    }
                ]
                
                router_contract = self.web3.eth.contract(
                    address=router_address,
                    abi=router_abi
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –æ–±–º–µ–Ω–∞: USDT -> Token
                # –î–ª—è PLEX ONE –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ USDT
                if token_address.lower() == CONTRACTS['PLEX_ONE'].lower():
                    path = [
                        CONTRACTS['USDT'],  # USDT
                        CONTRACTS['PLEX_ONE']  # PLEX ONE
                    ]
                    self.log(f"üîÑ –ü—É—Ç—å –æ–±–º–µ–Ω–∞: USDT -> PLEX ONE (–ø—Ä—è–º–æ–π)", "INFO")
                else:
                    path = [
                        usdt_address,  # USDT
                        Web3.to_checksum_address(token_address)
                    ]
                    self.log(f"üîÑ –ü—É—Ç—å –æ–±–º–µ–Ω–∞: USDT -> {selected_token}", "INFO")
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º nonce –ø–æ—Å–ª–µ approve)
                transaction = router_contract.functions.swapExactTokensForTokens(
                    amount_in_units,
                    0,  # amountOutMin = 0 (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                    path,
                    self.account.address,
                    deadline
                ).build_transaction({
                    'from': self.account.address,
                    'gas': self.get_gas_limit(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
                    'gasPrice': self.get_gas_price_wei(),
                    'nonce': current_nonce  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce
                })
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {buy_amount} {buy_with} -> {selected_token}", "INFO")
            self.log(f"üîç Gas limit: {transaction['gas']}, Gas price: {transaction['gasPrice']}", "INFO")
            
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            if not tx_hash:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                
            self.log(f"üì§ Swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}", "INFO")
            self.log(f"üîó –°—Å—ã–ª–∫–∞: https://bscscan.com/tx/{tx_hash.hex()}", "INFO")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...", "INFO")
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
            
            if tx_receipt and tx_receipt['status'] == 1:
                gas_used = tx_receipt['gasUsed']
                gas_cost_bnb = self.web3.from_wei(gas_used * transaction['gasPrice'], 'ether')
                
                self.log(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "SALE")
                self.log(f"üîç Gas used: {gas_used}", "INFO")
                self.log(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞: {gas_cost_bnb:.6f} BNB", "INFO")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                time.sleep(3)
                token_contract = self.web3.eth.contract(address=token_address, abi=ERC20_ABI)
                new_balance_wei = token_contract.functions.balanceOf(self.account.address).call()
                decimals = token_contract.functions.decimals().call()
                new_balance = new_balance_wei / (10 ** decimals)
                self.log(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {selected_token}: {new_balance:.6f}", "PROFIT")
                
                return {
                    'success': True,
                    'tx_hash': tx_hash.hex(),
                    'amount_spent': buy_amount,
                    'gas_used': gas_used,
                    'tokens_bought': new_balance
                }
            else:
                self.log("‚ùå Swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å", "ERROR")
                if tx_receipt:
                    self.log(f"‚ùå Receipt status: {tx_receipt.get('status')}", "ERROR")
                    if 'logs' in tx_receipt and tx_receipt['logs']:
                        self.log(f"‚ùå Logs: {tx_receipt['logs']}", "ERROR")
                return {
                    'success': False,
                    'error': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
                }
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}", "ERROR")
            return {
                'success': False,
                'error': str(e)
            }
            
    def _handle_purchase_completed(self, purchase_info: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏"""
        buy_number = purchase_info['buy_number']
        tx_hash = purchase_info['tx_hash']
        amount_spent = purchase_info['amount_spent']
        tokens_bought = purchase_info['tokens_bought']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.completed_buys_label.setText(str(buy_number))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã (—ç—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ)
        current_spent = float(self.spent_amount_label.text() or "0")
        current_bought = float(self.bought_tokens_label.text() or "0")
        
        self.spent_amount_label.setText(f"{current_spent + amount_spent:.6f}")
        self.bought_tokens_label.setText(f"{current_bought + tokens_bought:.2f}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.log(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ #{buy_number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Tx: {tx_hash[:20]}...", "SUCCESS")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        self.update_balances()
        
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.completed_buys_label.setText("0")
        self.spent_amount_label.setText("0.0")
        self.bought_tokens_label.setText("0.0")
        self.log("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞", "INFO")
        
    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞"""
        self.log_text.clear()
        
    def log(self, message: str, level: str = 'INFO'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ –≤–∫–ª–∞–¥–∫–∏
        self.log_text.append(formatted_message)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.End)
        self.log_text.setTextCursor(cursor)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –ª–æ–≥ —á–µ—Ä–µ–∑ BaseTab
        super().log(message, level)
