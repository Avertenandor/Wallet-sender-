"""
–í–∫–ª–∞–¥–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
"""

import threading
import time
from typing import List, Dict, Any, Optional
from datetime import datetime

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QProgressBar,
    QSpinBox, QDoubleSpinBox, QComboBox, QTextEdit, QSplitter,
    QHeaderView, QAbstractItemView, QFileDialog, QMessageBox,
    QCheckBox, QRadioButton, QButtonGroup, QFormLayout, QGridLayout
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QTimer
from PyQt5.QtGui import QColor, QFont

from web3 import Web3
from eth_account import Account

from .base_tab import BaseTab
from ...core.wallet_manager import WalletManager
from ...services.job_router import get_job_router
from ...core.nonce_manager import get_nonce_manager
from ...services.token_service import TokenService
from ...services.transaction_service import TransactionService
from ...constants import PLEX_CONTRACT, USDT_CONTRACT
from ...utils.logger import get_logger

logger = get_logger(__name__)

try:
    from mnemonic import Mnemonic
except ImportError:
    Mnemonic = None
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: pip install mnemonic")

# –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ BSC
CONTRACTS = {
    'PLEX_ONE': '0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1',
    'USDT': '0x55d398326f99059ff775485246999027b3197955',
    'WBNB': '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'
}

# ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
ERC20_ABI = [
    {"constant":True,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":False,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":False,"stateMutability":"nonpayable","type":"function"},
    {"constant":True,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":True,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":True,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":True,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":False,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":False,"stateMutability":"nonpayable","type":"function"},
    {"constant":True,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":False,"stateMutability":"view","type":"function"}
]


class MassDistributionTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    address_status_update = pyqtSignal(int, str)  # row, status
    transaction_completed = pyqtSignal(dict)  # transaction info
    distribution_finished = pyqtSignal()
    balance_updated = pyqtSignal(dict)  # balance updates
    
    def __init__(self, main_window, parent=None, slot_number=1):
        # –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –î–û –≤—ã–∑–æ–≤–∞ super())
        self.slot_number = slot_number
        
        super().__init__(main_window, parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        self.web3 = None
        self.account = None
        self.balances = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JobRouter –∏ NonceManager
        self.job_router = get_job_router()
        self.nonce_manager = get_nonce_manager()
        self.active_jobs = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.balance_timer = QTimer()
        self.balance_timer.timeout.connect(self.update_balances)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.balance_updated.connect(self._update_balance_display)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        self._init_web3()
        
    def _init_web3(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # BSC Mainnet RPC
            rpc_url = 'https://bsc-dataseed.binance.org/'
            self.web3 = Web3(Web3.HTTPProvider(rpc_url))
            
            if self.web3.is_connected():
                self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "SUCCESS")
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC", "ERROR")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3: {str(e)}", "ERROR")
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–æ—Ç–∞
        slot_header = QGroupBox(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ {self.slot_number} - –°–ª–æ—Ç {self.slot_number}")
        header_layout = QVBoxLayout(slot_header)
        slot_label = QLabel("üî∂ –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Å–ª–æ—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        slot_label.setStyleSheet("font-weight: bold; color: #FF9800;")
        header_layout.addWidget(slot_label)
        layout.addWidget(slot_header)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_group = self._create_wallet_group()
        layout.addWidget(wallet_group)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        balance_group = self._create_balance_group()
        layout.addWidget(balance_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        settings_group = QGroupBox(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–°–ª–æ—Ç {self.slot_number})")
        settings_layout = QVBoxLayout(settings_group)
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞
        token_layout = QHBoxLayout()
        token_layout.addWidget(QLabel("–¢–æ–∫–µ–Ω:"))
        
        self.token_combo = QComboBox()
        self.token_combo.addItems(['PLEX ONE', 'USDT', '–î—Ä—É–≥–æ–π'])
        token_layout.addWidget(self.token_combo)
        
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.custom_token_input.setEnabled(False)
        token_layout.addWidget(self.custom_token_input)
        
        settings_layout.addLayout(token_layout)
        
        # –°—É–º–º–∞ –Ω–∞ –∞–¥—Ä–µ—Å
        amount_layout = QHBoxLayout()
        amount_layout.addWidget(QLabel("–°—É–º–º–∞ –Ω–∞ –∞–¥—Ä–µ—Å:"))
        
        self.amount_input = QDoubleSpinBox()
        self.amount_input.setRange(0.00000001, 1000000)
        self.amount_input.setDecimals(8)
        self.amount_input.setValue(1.0)
        amount_layout.addWidget(self.amount_input)
        
        settings_layout.addLayout(amount_layout)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
        cycles_layout = QHBoxLayout()
        cycles_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:"))
        
        self.cycles_input = QSpinBox()
        self.cycles_input.setRange(1, 100)
        self.cycles_input.setValue(1)
        cycles_layout.addWidget(self.cycles_input)
        
        cycles_layout.addWidget(QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):"))
        
        self.interval_input = QSpinBox()
        self.interval_input.setRange(0, 3600)
        self.interval_input.setValue(2)
        cycles_layout.addWidget(self.interval_input)
        
        settings_layout.addLayout(cycles_layout)
        
        layout.addWidget(settings_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞
        gas_group = self.create_gas_settings_group()
        layout.addWidget(gas_group)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏
        addresses_group = QGroupBox(f"–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–°–ª–æ—Ç {self.slot_number})")
        addresses_layout = QVBoxLayout(addresses_group)
        
        # –ö–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        import_buttons_layout = QHBoxLayout()
        
        self.import_file_btn = QPushButton("–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞")
        self.import_file_btn.clicked.connect(self.import_from_file)
        import_buttons_layout.addWidget(self.import_file_btn)
        
        self.import_clipboard_btn = QPushButton("–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞")
        self.import_clipboard_btn.clicked.connect(self.import_from_clipboard)
        import_buttons_layout.addWidget(self.import_clipboard_btn)
        
        self.clear_addresses_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_addresses_btn.clicked.connect(self.clear_addresses)
        import_buttons_layout.addWidget(self.clear_addresses_btn)
        
        addresses_layout.addLayout(import_buttons_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤
        self.addresses_table = QTableWidget(0, 3)
        self.addresses_table.setHorizontalHeaderLabels(['–ê–¥—Ä–µ—Å', '–°—Ç–∞—Ç—É—Å', 'Tx Hash'])
        
        header = self.addresses_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        
        self.addresses_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        addresses_layout.addWidget(self.addresses_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QHBoxLayout()
        self.total_addresses_label = QLabel("–í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: 0")
        stats_layout.addWidget(self.total_addresses_label)
        
        self.processed_label = QLabel("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0")
        stats_layout.addWidget(self.processed_label)
        
        self.success_label = QLabel("–£—Å–ø–µ—à–Ω–æ: 0")
        stats_layout.addWidget(self.success_label)
        
        self.failed_label = QLabel("–û—à–∏–±–æ–∫: 0")
        stats_layout.addWidget(self.failed_label)
        
        addresses_layout.addLayout(stats_layout)
        
        layout.addWidget(addresses_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        
        self.start_btn = QPushButton(f"–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É (–°–ª–æ—Ç {self.slot_number})")
        self.start_btn.clicked.connect(self.start_distribution)
        control_layout.addWidget(self.start_btn)
        
        self.pause_btn = QPushButton("–ü–∞—É–∑–∞")
        self.pause_btn.setEnabled(False)
        self.pause_btn.clicked.connect(self.pause_distribution)
        control_layout.addWidget(self.pause_btn)
        
        self.stop_btn = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        self.stop_btn.clicked.connect(self.stop_distribution)
        control_layout.addWidget(self.stop_btn)
        
        self.export_btn = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.export_btn.clicked.connect(self.export_results)
        control_layout.addWidget(self.export_btn)
        
        layout.addLayout(control_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        layout.addWidget(self.progress_bar)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.addresses: List[str] = []
        self.is_distributing = False
        self.is_paused = False
        self.stop_flag = threading.Event()
        self.distribution_thread = None
        self.slot_id = f"slot{self.slot_number}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–ª–æ—Ç–∞
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.token_combo.currentTextChanged.connect(self.on_token_changed)
        self.address_status_update.connect(self.update_address_status)
        self.transaction_completed.connect(self.on_transaction_completed)
        self.distribution_finished.connect(self.on_distribution_finished)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
        self.wallet_manager = None
        self.token_service = None
        self.tx_service = None
        
        self.log(f"–í–∫–ª–∞–¥–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ {self.slot_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def on_token_changed(self, token: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        self.custom_token_input.setEnabled(token == "–î—Ä—É–≥–æ–π")
        
    def import_from_file(self):
        """–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∞–¥—Ä–µ—Å–∞–º–∏ ({self.slot_id})",
            "",
            "Text Files (*.txt);;CSV Files (*.csv);;Excel Files (*.xlsx);;All Files (*.*)"
        )
        
        if not file_path:
            return
            
        try:
            addresses = []
            
            if file_path.endswith('.xlsx'):
                # –ò–º–ø–æ—Ä—Ç –∏–∑ Excel
                try:
                    import openpyxl
                    wb = openpyxl.load_workbook(file_path)
                    sheet = wb.active
                    
                    for row in sheet.iter_rows(values_only=True):
                        if row and row[0]:
                            addr = str(row[0]).strip()
                            if self.is_valid_address(addr):
                                addresses.append(addr)
                except ImportError:
                    self.log("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "ERROR")
                    return
            else:
                # –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ/CSV —Ñ–∞–π–ª–∞
                with open(file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç—ã–µ)
                        if ',' in line:
                            addr = line.split(',')[0].strip()
                        else:
                            addr = line.strip()
                        
                        if self.is_valid_address(addr):
                            addresses.append(addr)
            
            self.add_addresses(addresses)
            self.log(f"[{self.slot_id}] –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞", "SUCCESS")
            
        except Exception as e:
            self.log(f"[{self.slot_id}] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}", "ERROR")
            
    def import_from_clipboard(self):
        """–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            from PyQt5.QtWidgets import QApplication
            clipboard = QApplication.clipboard()
            text = clipboard.text()
            
            if not text:
                self.log("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç", "WARNING")
                return
                
            addresses = []
            for line in text.split('\n'):
                addr = line.strip()
                if self.is_valid_address(addr):
                    addresses.append(addr)
                    
            self.add_addresses(addresses)
            self.log(f"[{self.slot_id}] –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", "SUCCESS")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {e}", "ERROR")
            
    def is_valid_address(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞"""
        if not address:
            return False
            
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if not address.startswith('0x'):
            return False
            
        if len(address) != 42:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hex —Å–∏–º–≤–æ–ª—ã
        try:
            int(address, 16)
            return True
        except ValueError:
            return False
            
    def add_addresses(self, addresses: List[str]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        for addr in addresses:
            if addr not in self.addresses:
                self.addresses.append(addr)
                
                row = self.addresses_table.rowCount()
                self.addresses_table.insertRow(row)
                
                # –ê–¥—Ä–µ—Å
                self.addresses_table.setItem(row, 0, QTableWidgetItem(addr))
                
                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem("–û–∂–∏–¥–∞–µ—Ç")
                self.addresses_table.setItem(row, 1, status_item)
                
                # Tx Hash
                self.addresses_table.setItem(row, 2, QTableWidgetItem(""))
                
        self.update_statistics()
        
    def clear_addresses(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.addresses.clear()
            self.addresses_table.setRowCount(0)
            self.update_statistics()
            self.log("–°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –æ—á–∏—â–µ–Ω")
            
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = len(self.addresses)
        processed = 0
        success = 0
        failed = 0
        
        for row in range(self.addresses_table.rowCount()):
            status = self.addresses_table.item(row, 1).text()
            if status != "–û–∂–∏–¥–∞–µ—Ç":
                processed += 1
            if status == "‚úì –£—Å–ø–µ—à–Ω–æ":
                success += 1
            elif status == "‚úó –û—à–∏–±–∫–∞":
                failed += 1
                
        self.total_addresses_label.setText(f"–í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total}")
        self.processed_label.setText(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        self.success_label.setText(f"–£—Å–ø–µ—à–Ω–æ: {success}")
        self.failed_label.setText(f"–û—à–∏–±–æ–∫: {failed}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if total > 0:
            progress = int((processed / total) * 100)
            self.progress_bar.setValue(progress)
            
    def start_distribution(self):
        """–ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        if self.is_distributing:
            self.log("–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!", "WARNING")
            return
            
        if not self.addresses:
            self.log("–°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç–æ–π! –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å–∞.", "ERROR")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        token_type = self.token_combo.currentText()
        amount = self.amount_input.value()
        cycles = self.cycles_input.value()
        interval = self.interval_input.value()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        if token_type == "PLEX ONE":
            token_address = Web3.to_checksum_address(CONTRACTS['PLEX_ONE'])
        elif token_type == "USDT":
            token_address = Web3.to_checksum_address(CONTRACTS['USDT'])
        else:
            token_address = self.custom_token_input.text().strip()
            if not token_address or not Web3.is_address(token_address):
                self.log("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!", "ERROR")
                return
            token_address = Web3.to_checksum_address(token_address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
        if not self.account:
            self.log("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á.", "ERROR")
            return
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        self._init_services()
        
        self.log(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É {token_type} (–°–ª–æ—Ç {self.slot_number})", "SUCCESS")
        self.log(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {amount} —Ç–æ–∫–µ–Ω–æ–≤, {cycles} —Ü–∏–∫–ª–æ–≤, –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}—Å", "INFO")
        self.log(f"üìã –ê–¥—Ä–µ—Å–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(self.addresses)}", "INFO")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
        self.is_distributing = True
        self.start_btn.setEnabled(False)
        self.pause_btn.setEnabled(True)
        self.stop_btn.setEnabled(True)
        self.progress_bar.setMaximum(len(self.addresses) * cycles)
        self.progress_bar.setValue(0)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        self.stop_flag.clear()
        self.distribution_thread = threading.Thread(
            target=self._distribution_worker,
            args=(token_type, token_address, amount, cycles, interval),
            daemon=False  # –í–∞–∂–Ω–æ: –Ω–µ daemon –ø–æ—Ç–æ–∫
        )
        self.distribution_thread.start()
        
        
    def _distribution_worker(self, token_type: str, token_address: str, amount: float, cycles: int, interval: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            total_sent = 0
            total_errors = 0
            
            self.log(f"üîÑ –ù–∞—á–∞—Ç —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–°–ª–æ—Ç {self.slot_number})", "INFO")
            
            for cycle in range(1, cycles + 1):
                if self.stop_flag.is_set():
                    self.log(f"‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ü–∏–∫–ª–µ {cycle}", "WARNING")
                    break
                    
                self.log(f"üîÑ –¶–∏–∫–ª {cycle}/{cycles}", "INFO")
                
                for i, address in enumerate(self.addresses):
                    if self.stop_flag.is_set():
                        break
                        
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
                    while self.is_paused and not self.stop_flag.is_set():
                        time.sleep(0.5)
                        
                    if self.stop_flag.is_set():
                        break
                        
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥—Ä–µ—Å–∞
                    self.address_status_update.emit(i, "–û—Ç–ø—Ä–∞–≤–∫–∞...")
                    
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                        if token_type == "BNB":
                            result = self._send_bnb(address, amount)
                        else:
                            result = self._send_token(address, amount, token_address)
                            
                        if result and result.get('success'):
                            total_sent += 1
                            tx_hash = result.get('tx_hash', '')
                            self.address_status_update.emit(i, f"–£—Å–ø–µ—à–Ω–æ: {tx_hash[:10]}...")
                            self.transaction_completed.emit({
                                'address': address,
                                'cycle': cycle,
                                'tx_hash': tx_hash,
                                'status': 'success',
                                'amount': amount,
                                'token': token_type
                            })
                            self.log(f"‚úÖ {address}: {amount} {token_type}, tx: {tx_hash[:20]}...", "SUCCESS")
                        else:
                            total_errors += 1
                            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
                            self.address_status_update.emit(i, f"–û—à–∏–±–∫–∞: {error}")
                            self.log(f"‚ùå {address}: {error}", "ERROR")
                            
                    except Exception as e:
                        total_errors += 1
                        error_msg = str(e)
                        self.address_status_update.emit(i, f"–û—à–∏–±–∫–∞: {error_msg}")
                        self.log(f"‚ùå {address}: {error_msg}", "ERROR")
                        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {address}")
                        
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    current_progress = (cycle - 1) * len(self.addresses) + i + 1
                    QTimer.singleShot(0, lambda p=current_progress: self.progress_bar.setValue(p))
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    if not self.stop_flag.is_set() and i < len(self.addresses) - 1:
                        time.sleep(interval)
                        
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª)
                if cycle < cycles and not self.stop_flag.is_set():
                    self.log(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {interval} —Å–µ–∫—É–Ω–¥", "INFO")
                    time.sleep(interval)
                    
            self.log(f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}, –æ—à–∏–±–æ–∫: {total_errors}", "SUCCESS")
            
        except Exception as e:
            self.log(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}", "ERROR")
            logger.exception("–û—à–∏–±–∫–∞ –≤ _distribution_worker")
            
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            QTimer.singleShot(0, self.distribution_finished.emit)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞...
    # (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º, –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ç.–¥.)
    
    def _create_wallet_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        group = QGroupBox("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞")
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_type_layout = QHBoxLayout()
        self.seed_radio = QRadioButton("SEED —Ñ—Ä–∞–∑–∞")
        self.private_key_radio = QRadioButton("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        self.seed_radio.setChecked(True)
        
        self.button_group = QButtonGroup()
        self.button_group.addButton(self.seed_radio)
        self.button_group.addButton(self.private_key_radio)
        
        connect_type_layout.addWidget(self.seed_radio)
        connect_type_layout.addWidget(self.private_key_radio)
        connect_type_layout.addStretch()
        layout.addLayout(connect_type_layout)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ seed/private key
        self.wallet_input = QTextEdit()
        self.wallet_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ SEED —Ñ—Ä–∞–∑—É (12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞) –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...")
        self.wallet_input.setMaximumHeight(60)
        layout.addWidget(self.wallet_input)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.connect_btn = QPushButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
        self.connect_btn.clicked.connect(self.connect_wallet)
        button_layout.addWidget(self.connect_btn)
        
        self.disconnect_btn = QPushButton("üîå –û—Ç–∫–ª—é—á–∏—Ç—å")
        self.disconnect_btn.clicked.connect(self.disconnect_wallet)
        self.disconnect_btn.setEnabled(False)
        button_layout.addWidget(self.disconnect_btn)
        
        layout.addLayout(button_layout)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_address_label = QLabel("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.wallet_address_label.setFont(QFont("Consolas", 10))
        layout.addWidget(self.wallet_address_label)
        
        group.setLayout(layout)
        return group
        
    def _create_balance_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        group = QGroupBox("–ë–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤")
        layout = QGridLayout()
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
        layout.addWidget(QLabel("BNB:"), 0, 0)
        self.bnb_balance_label = QLabel("0.0")
        self.bnb_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.bnb_balance_label, 0, 1)
        
        layout.addWidget(QLabel("PLEX ONE:"), 1, 0)
        self.plex_balance_label = QLabel("0.0")
        self.plex_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.plex_balance_label, 1, 1)
        
        layout.addWidget(QLabel("USDT:"), 2, 0)
        self.usdt_balance_label = QLabel("0.0")
        self.usdt_balance_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(self.usdt_balance_label, 2, 1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        self.refresh_btn.clicked.connect(self.update_balances)
        self.refresh_btn.setEnabled(False)
        layout.addWidget(self.refresh_btn, 3, 0, 1, 2)
        
        # –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.auto_refresh_cb = QCheckBox("–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫")
        self.auto_refresh_cb.toggled.connect(self._toggle_auto_refresh)
        layout.addWidget(self.auto_refresh_cb, 4, 0, 1, 2)
        
        group.setLayout(layout)
        return group

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–æ–º
    def connect_wallet(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        if not self.web3 or not self.web3.is_connected():
            self.log("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC", "ERROR")
            return
            
        wallet_input = self.wallet_input.toPlainText().strip()
        
        if not wallet_input:
            self.log("‚ùå –í–≤–µ–¥–∏—Ç–µ SEED —Ñ—Ä–∞–∑—É –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á", "ERROR")
            return
            
        try:
            if self.seed_radio.isChecked():
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SEED —Ñ—Ä–∞–∑—É
                if not Mnemonic:
                    self.log("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "ERROR")
                    return
                    
                mnemo = Mnemonic("english")
                if not mnemo.check(wallet_input):
                    self.log("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è SEED —Ñ—Ä–∞–∑–∞", "ERROR")
                    return
                    
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ seed
                seed = mnemo.to_seed(wallet_input)
                private_key = seed[:32].hex()
                
            else:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                private_key = wallet_input
                if private_key.startswith('0x'):
                    private_key = private_key[2:]
                    
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            self.account = Account.from_key(private_key)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.wallet_address_label.setText(f"–ê–¥—Ä–µ—Å: {self.account.address}")
            self.connect_btn.setEnabled(False)
            self.disconnect_btn.setEnabled(True)
            self.refresh_btn.setEnabled(True)
            
            self.log(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}", "SUCCESS")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
            self.update_balances()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "ERROR")
            
    def disconnect_wallet(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        self.account = None
        self.balances = {}
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.balance_timer.stop()
        self.auto_refresh_cb.setChecked(False)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.wallet_address_label.setText("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.connect_btn.setEnabled(True)
        self.disconnect_btn.setEnabled(False)
        self.refresh_btn.setEnabled(False)
        
        # –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤
        self.bnb_balance_label.setText("0.0")
        self.plex_balance_label.setText("0.0")
        self.usdt_balance_label.setText("0.0")
        
        self.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω", "INFO")
        
    def update_balances(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤"""
        if not self.account or not self.web3:
            return
            
        try:
            address = self.account.address
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ BNB
            bnb_balance = self.web3.eth.get_balance(address)
            bnb_formatted = self.web3.from_wei(bnb_balance, 'ether')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ PLEX ONE
            plex_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(CONTRACTS['PLEX_ONE']),
                abi=ERC20_ABI
            )
            plex_balance = plex_contract.functions.balanceOf(address).call()
            plex_decimals = plex_contract.functions.decimals().call()
            plex_formatted = plex_balance / (10 ** plex_decimals)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT
            usdt_contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(CONTRACTS['USDT']),
                abi=ERC20_ABI
            )
            usdt_balance = usdt_contract.functions.balanceOf(address).call()
            usdt_decimals = usdt_contract.functions.decimals().call()
            usdt_formatted = usdt_balance / (10 ** usdt_decimals)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
            self.balances = {
                'bnb': float(bnb_formatted),
                'plex': float(plex_formatted),
                'usdt': float(usdt_formatted)
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            self.balance_updated.emit(self.balances)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}", "ERROR")
            
    def _update_balance_display(self, balances: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        self.bnb_balance_label.setText(f"{balances.get('bnb', 0):.6f}")
        self.plex_balance_label.setText(f"{balances.get('plex', 0):.2f}")
        self.usdt_balance_label.setText(f"{balances.get('usdt', 0):.2f}")
        
    def _toggle_auto_refresh(self, enabled: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        if enabled and self.account:
            self.balance_timer.start(30000)  # 30 —Å–µ–∫—É–Ω–¥
            self.log("‚úÖ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ", "INFO")
        else:
            self.balance_timer.stop()
            self.log("üîÑ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ", "INFO")
            
    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º"""
        try:
            if not self.wallet_manager:
                self.wallet_manager = WalletManager()
            if not self.token_service:
                self.token_service = TokenService(self.web3)
            if not self.tx_service:
                self.tx_service = TransactionService(self.web3)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}", "ERROR")
        
    def _send_bnb(self, to_address: str, amount: float) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ BNB"""
        try:
            if not self.account or not self.web3:
                return {'success': False, 'error': '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ Wei
            amount_wei = self.web3.to_wei(amount, 'ether')
            
            # –ü–æ–ª—É—á–∞–µ–º nonce —á–µ—Ä–µ–∑ NonceManager
            nonce = self.nonce_manager.get_nonce(self.account.address)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞ –∏–∑ UI
            gas_price = self.get_gas_price_wei()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = {
                'to': Web3.to_checksum_address(to_address),
                'value': amount_wei,
                'gas': 21000,
                'gasPrice': gas_price,
                'nonce': nonce,
                'chainId': 56  # BSC Mainnet
            }
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)
            
            if tx_receipt['status'] == 1:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º nonce –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.nonce_manager.increment_nonce(self.account.address)
                return {
                    'success': True,
                    'tx_hash': tx_hash.hex(),
                    'gas_used': tx_receipt['gasUsed']
                }
            else:
                return {'success': False, 'error': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ç—å—é'}
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ BNB –Ω–∞ {to_address}")
            return {'success': False, 'error': str(e)}
            
    def _send_token(self, to_address: str, amount: float, token_address: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ ERC20 —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.account or not self.web3:
                return {'success': False, 'error': '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
                
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
            contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=ERC20_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º decimals —Ç–æ–∫–µ–Ω–∞
            decimals = contract.functions.decimals().call()
            amount_in_units = int(amount * (10 ** decimals))
            
            # –ü–æ–ª—É—á–∞–µ–º nonce —á–µ—Ä–µ–∑ NonceManager
            nonce = self.nonce_manager.get_nonce(self.account.address)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞ –∏–∑ UI
            gas_price = self.get_gas_price_wei()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            gas_limit = self.get_gas_limit()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é transfer
            transaction = contract.functions.transfer(
                Web3.to_checksum_address(to_address),
                amount_in_units
            ).build_transaction({
                'from': self.account.address,
                'gas': gas_limit,
                'gasPrice': gas_price,
                'nonce': nonce,
                'chainId': 56  # BSC Mainnet
            })
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)
            
            if tx_receipt['status'] == 1:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º nonce –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.nonce_manager.increment_nonce(self.account.address)
                return {
                    'success': True,
                    'tx_hash': tx_hash.hex(),
                    'gas_used': tx_receipt['gasUsed']
                }
            else:
                return {'success': False, 'error': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ç—å—é'}
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ {to_address}")
            return {'success': False, 'error': str(e)}
        
    @pyqtSlot(int, str)
    def update_address_status(self, row: int, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥—Ä–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if row < self.addresses_table.rowCount():
            status_item = self.addresses_table.item(row, 1)
            if status_item:
                status_item.setText(status)
                
                # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
                if "–£—Å–ø–µ—à–Ω–æ" in status:
                    status_item.setBackground(QColor(0, 100, 0))
                elif "–û—à–∏–±–∫–∞" in status:
                    status_item.setBackground(QColor(100, 0, 0))
                elif "–û—Ç–ø—Ä–∞–≤–∫–∞" in status:
                    status_item.setBackground(QColor(100, 100, 0))
                    
        self.update_statistics()
        
    @pyqtSlot(dict)
    def on_transaction_completed(self, tx_info: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–¥—Ä–µ—Å–æ–º
        address = tx_info.get('address', '')
        tx_hash = tx_info.get('tx_hash', '')
        status = tx_info.get('status', 'error')
        
        for row in range(self.addresses_table.rowCount()):
            addr_item = self.addresses_table.item(row, 0)
            if addr_item and addr_item.text() == address:
                if status == 'success':
                    self.update_address_status(row, "‚úì –£—Å–ø–µ—à–Ω–æ")
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    if row < self.addresses_table.rowCount():
                        hash_item = self.addresses_table.item(row, 2)
                        if hash_item:
                            hash_item.setText(tx_hash[:10] + "..." if tx_hash else "")
                            hash_item.setToolTip(tx_hash)
                else:
                    error = tx_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    self.update_address_status(row, f"‚úó –û—à–∏–±–∫–∞")
                break
        
    @pyqtSlot()
    def on_distribution_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.is_distributing = False
        self.is_paused = False
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.start_btn.setEnabled(True)
        self.pause_btn.setEnabled(False)
        self.stop_btn.setEnabled(False)
        
        self.update_statistics()
        self.log(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–°–ª–æ—Ç {self.slot_number})", "SUCCESS")
        
        # –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        QMessageBox.information(
            self,
            "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {len(self.addresses)}\n"
            f"–£—Å–ø–µ—à–Ω–æ: {self.count_status('‚úì –£—Å–ø–µ—à–Ω–æ')}\n"
            f"–û—à–∏–±–æ–∫: {self.count_status('‚úó –û—à–∏–±–∫–∞')}"
        )
        
    def count_status(self, status_prefix: str) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
        count = 0
        for row in range(self.addresses_table.rowCount()):
            status = self.addresses_table.item(row, 1).text()
            if status.startswith(status_prefix):
                count += 1
        return count
        
    def pause_distribution(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.is_paused = not self.is_paused
        
        if self.is_paused:
            self.pause_btn.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            self.log("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "WARNING")
        else:
            self.pause_btn.setText("–ü–∞—É–∑–∞")
            self.log("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞", "SUCCESS")
        
    def stop_distribution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.stop_flag.set()
            self.is_paused = False
            self.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...", "WARNING")
        
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            f"mass_distribution_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV Files (*.csv)"
        )
        
        if not file_path:
            return
            
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write("Address,Status,Tx Hash\n")
                
                for row in range(self.addresses_table.rowCount()):
                    address = self.addresses_table.item(row, 0).text()
                    status = self.addresses_table.item(row, 1).text()
                    tx_hash = self.addresses_table.item(row, 2).text()
                    
                    f.write(f'"{address}","{status}","{tx_hash}"\n')
                    
            self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}", "SUCCESS")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
