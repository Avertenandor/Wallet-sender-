"""
–í–∫–ª–∞–¥–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JobRouter
"""

import json
from datetime import datetime
from typing import Optional, Dict, Any

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QPushButton, QLabel,
    QLineEdit, QTextEdit, QDoubleSpinBox,
    QTableWidget, QTableWidgetItem, QHeaderView,
    QMessageBox, QComboBox, QFormLayout, QRadioButton, QButtonGroup
)
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtGui import QFont

from web3 import Web3
from eth_account import Account

from .base_tab import BaseTab
from ...utils.logger import get_logger
from ...services.job_router import get_job_router
from ...core.nonce_manager import get_nonce_manager

logger = get_logger(__name__)

try:
    from mnemonic import Mnemonic
except ImportError:
    Mnemonic = None
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ BSC
CONTRACTS = {
    'PLEX_ONE': '0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1',
    'USDT': '0x55d398326f99059ff775485246999027b3197955'
}

# ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π)
ERC20_ABI = json.loads('[{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]')


class DirectSendTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    transaction_completed = pyqtSignal(dict)
    
    def __init__(self, main_window, parent=None):
        # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        self.account = None
        self.web3 = None
        self.is_sending = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JobRouter –∏ NonceManager
        self.job_router = get_job_router()
        self.nonce_manager = get_nonce_manager()
        
        # –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
        self.current_jobs = {}
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        super().__init__(main_window, parent)
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_group = self._create_wallet_group()
        layout.addWidget(wallet_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_group = self._create_send_group()
        layout.addWidget(send_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∞–∑–∞
        gas_group = self.create_gas_settings_group()
        layout.addWidget(gas_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.send_btn = QPushButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_btn.clicked.connect(self.send_transaction)
        self.send_btn.setEnabled(False)
        buttons_layout.addWidget(self.send_btn)
        
        self.refresh_balance_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        self.refresh_balance_btn.clicked.connect(self.refresh_balance)
        self.refresh_balance_btn.setEnabled(False)
        buttons_layout.addWidget(self.refresh_balance_btn)
        
        self.cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        self.cancel_btn.clicked.connect(self.cancel_current_jobs)
        self.cancel_btn.setEnabled(False)
        buttons_layout.addWidget(self.cancel_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        self.balance_label = QLabel("–ë–∞–ª–∞–Ω—Å: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.balance_label.setFont(QFont("Arial", 10))
        layout.addWidget(self.balance_label)
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫
        history_group = self._create_history_group()
        layout.addWidget(history_group)
        
    def _create_wallet_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        group = QGroupBox("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞")
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_type_layout = QHBoxLayout()
        self.seed_radio = QRadioButton("SEED —Ñ—Ä–∞–∑–∞")
        self.private_key_radio = QRadioButton("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        self.seed_radio.setChecked(True)
        
        self.button_group = QButtonGroup()
        self.button_group.addButton(self.seed_radio)
        self.button_group.addButton(self.private_key_radio)
        
        connect_type_layout.addWidget(self.seed_radio)
        connect_type_layout.addWidget(self.private_key_radio)
        connect_type_layout.addStretch()
        layout.addLayout(connect_type_layout)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.wallet_input = QTextEdit()
        self.wallet_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ SEED —Ñ—Ä–∞–∑—É –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...")
        self.wallet_input.setMaximumHeight(60)
        layout.addWidget(self.wallet_input)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.connect_btn = QPushButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
        self.connect_btn.clicked.connect(self.connect_wallet)
        button_layout.addWidget(self.connect_btn)
        
        self.disconnect_btn = QPushButton("üîå –û—Ç–∫–ª—é—á–∏—Ç—å")
        self.disconnect_btn.clicked.connect(self.disconnect_wallet)
        self.disconnect_btn.setEnabled(False)
        button_layout.addWidget(self.disconnect_btn)
        
        layout.addLayout(button_layout)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_address_label = QLabel("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.wallet_address_label.setFont(QFont("Consolas", 10))
        layout.addWidget(self.wallet_address_label)
        
        group.setLayout(layout)
        return group
        
    def _create_send_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        layout = QFormLayout()
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞
        self.token_combo = QComboBox()
        self.token_combo.addItems(["BNB", "PLEX ONE", "USDT", "–î—Ä—É–≥–æ–π..."])
        self.token_combo.currentTextChanged.connect(self._on_token_changed)
        layout.addRow("–¢–æ–∫–µ–Ω:", self.token_combo)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞...")
        self.custom_token_input.setVisible(False)
        layout.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", self.custom_token_input)
        
        # –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        self.recipient_input = QLineEdit()
        self.recipient_input.setPlaceholderText("0x...")
        layout.addRow("–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", self.recipient_input)
        
        # –°—É–º–º–∞
        self.amount_input = QDoubleSpinBox()
        self.amount_input.setDecimals(6)
        self.amount_input.setMaximum(999999999.0)
        self.amount_input.setSuffix(" —Ç–æ–∫–µ–Ω–æ–≤")
        layout.addRow("–°—É–º–º–∞:", self.amount_input)
        
        group.setLayout(layout)
        return group
        
    def _create_history_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        group = QGroupBox("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫")
        layout = QVBoxLayout()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(5)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–¢–æ–∫–µ–Ω", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å", "–°—É–º–º–∞", "–°—Ç–∞—Ç—É—Å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.history_table.horizontalHeader()
        header.setStretchLastSection(True)
        
        layout.addWidget(self.history_table)
        
        group.setLayout(layout)
        return group
        
    def _on_token_changed(self, token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        is_custom = token == "–î—Ä—É–≥–æ–π..."
        self.custom_token_input.setVisible(is_custom)
        
    def connect_wallet(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        wallet_data = self.wallet_input.toPlainText().strip()
        
        if not wallet_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ SEED —Ñ—Ä–∞–∑—É!")
            return
            
        try:
            if self.seed_radio.isChecked():
                # SEED —Ñ—Ä–∞–∑–∞ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–µ—Ä–∏–≤–∞—Ü–∏—è –ø–æ BIP44 (m/44'/60'/0'/0/0)
                account_path = "m/44'/60'/0'/0/0"
                created = False
                if hasattr(Account, 'from_mnemonic'):
                    try:
                        self.account = Account.from_mnemonic(wallet_data, account_path=account_path)  # type: ignore[arg-type]
                        created = True
                    except Exception:
                        created = False
                if not created:
                    if Mnemonic is None:
                        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–î–ª—è SEED —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ mnemonic. –õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á.")
                        return
                    try:
                        from bip_utils import Bip39SeedGenerator, Bip44, Bip44Coins, Bip44Changes  # type: ignore[import]
                        words = wallet_data.split()
                        if len(words) not in [12, 24]:
                            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "SEED —Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞!")
                            return
                        mnemo = Mnemonic("english")
                        if not mnemo.check(wallet_data):
                            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω–∞—è SEED —Ñ—Ä–∞–∑–∞!")
                            return
                        seed_bytes = Bip39SeedGenerator(wallet_data).Generate()
                        bip44_ctx = Bip44.FromSeed(seed_bytes, Bip44Coins.ETHEREUM).Purpose().Coin().Account(0).Change(Bip44Changes.CHAIN_EXT).AddressIndex(0)
                        private_key = bip44_ctx.PrivateKey().Raw().ToHex()
                        self.account = Account.from_key(private_key)
                        created = True
                    except Exception as e:
                        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏–∑ SEED:\n{e}")
                        return
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
                private_key = wallet_data
                if private_key.startswith('0x'):
                    private_key = private_key[2:]
                    
                self.account = Account.from_key(private_key)
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web3
            from ...core.web3_provider import Web3Provider
            web3_provider = Web3Provider()
            self.web3 = web3_provider.w3
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.wallet_address_label.setText(f"–ê–¥—Ä–µ—Å: {self.account.address}")
            self.connect_btn.setEnabled(False)
            self.disconnect_btn.setEnabled(True)
            self.refresh_balance_btn.setEnabled(True)
            self.send_btn.setEnabled(True)
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n–ê–¥—Ä–µ—Å: {self.account.address}")
            self.log(f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.account.address}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            self.refresh_balance()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫:\n{str(e)}")
            self.log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}", "ERROR")
            
    def disconnect_wallet(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        self.account = None
        self.web3 = None
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.wallet_input.clear()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.wallet_address_label.setText("–ê–¥—Ä–µ—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.connect_btn.setEnabled(True)
        self.disconnect_btn.setEnabled(False)
        self.refresh_balance_btn.setEnabled(False)
        self.send_btn.setEnabled(False)
        
        # –û—á–∏—â–∞–µ–º –±–∞–ª–∞–Ω—Å
        self.balance_label.setText("–ë–∞–ª–∞–Ω—Å: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        self.log("–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
        
    def refresh_balance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        if not self.account or not self.web3:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å BNB
            balance_wei = self.web3.eth.get_balance(self.account.address)
            balance_bnb = self.web3.from_wei(balance_wei, 'ether')
            
            self.balance_label.setText(f"–ë–∞–ª–∞–Ω—Å: {balance_bnb:.6f} BNB")
            self.log(f"–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {balance_bnb:.6f} BNB")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}", "ERROR")
            self.balance_label.setText("–ë–∞–ª–∞–Ω—Å: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è")
            
    def send_transaction(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ JobRouter"""
        if not self.account or not self.web3:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        recipient = self.recipient_input.text().strip()
        if not recipient or not self.web3.is_address(recipient):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
            return
            
        amount = self.amount_input.value()
        if amount <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
            return
            
        token_type = self.token_combo.currentText()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        token_address = None
        if token_type == "BNB":
            token_address = None  # –ù–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
        elif token_type == "PLEX ONE":
            token_address = CONTRACTS['PLEX_ONE']
        elif token_type == "USDT":
            token_address = CONTRACTS['USDT']
        elif token_type == "–î—Ä—É–≥–æ–π...":
            token_address = self.custom_token_input.text().strip()
            if not token_address or not self.web3.is_address(token_address):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!")
                return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_btn.setEnabled(False)
        self.send_btn.setText("–û—Ç–ø—Ä–∞–≤–∫–∞...")
        self.cancel_btn.setEnabled(True)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è JobRouter
        job_data = {
            'type': 'send_token' if token_address else 'send_bnb',
            'from_address': self.account.address,
            'to_address': recipient,
            'amount': amount,
            'token_address': token_address,
            'private_key': self.account.key.hex(),
            'gas_price': self.get_gas_price_wei(),
            'gas_limit': self.get_gas_limit(),
            'token_name': token_type
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        job_id = self.job_router.add_job(
            job_data,
            callback=self._on_transaction_complete,
            progress_callback=self._on_transaction_progress
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        self.current_jobs[job_id] = {
            'token': token_type,
            'recipient': recipient,
            'amount': amount
        }
        
        self.log(f"–ó–∞–¥–∞—á–∞ {job_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {amount} {token_type} –Ω–∞ {recipient[:10]}...")
    
    def _on_transaction_progress(self, job_id: str, progress: float, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        if job_id in self.current_jobs:
            self.send_btn.setText(f"–û—Ç–ø—Ä–∞–≤–∫–∞... {int(progress*100)}%")
            self.log(f"[{job_id}] {message} ({int(progress*100)}%)")
    
    def _on_transaction_complete(self, job_id: str, success: bool, result: Any):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        if job_id not in self.current_jobs:
            return
            
        job_info = self.current_jobs[job_id]
        
        if success:
            tx_hash = result.get('tx_hash', '')
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._add_to_history(
                job_info['token'],
                job_info['recipient'],
                job_info['amount'],
                "‚úÖ –£—Å–ø–µ—à–Ω–æ",
                tx_hash
            )
            self.log(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {tx_hash}", "SUCCESS")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            msg = QMessageBox(self)
            msg.setWindowTitle("–£—Å–ø–µ—Ö")
            msg.setText(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\nTx Hash: {tx_hash[:20]}...")
            msg.setDetailedText(
                f"–ü–æ–ª–Ω—ã–π —Ö—ç—à: {tx_hash}\n\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {job_info['recipient']}\n"
                f"–°—É–º–º–∞: {job_info['amount']} {job_info['token']}"
            )
            msg.exec_()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            self.refresh_balance()
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            self.recipient_input.clear()
            self.amount_input.setValue(0)
        else:
            error_msg = str(result)
            self._add_to_history(
                job_info['token'],
                job_info['recipient'],
                job_info['amount'],
                "‚ùå –û—à–∏–±–∫–∞",
                ""
            )
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}", "ERROR")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n\n{error_msg}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
        del self.current_jobs[job_id]
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if not self.current_jobs:
            self.send_btn.setEnabled(True)
            self.send_btn.setText("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
            self.cancel_btn.setEnabled(False)
    
    def cancel_current_jobs(self):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á"""
        if not self.current_jobs:
            return
            
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for job_id in list(self.current_jobs.keys()):
            success = self.job_router.cancel_job(job_id)
            if success:
                job_info = self.current_jobs[job_id]
                self._add_to_history(
                    job_info['token'],
                    job_info['recipient'],
                    job_info['amount'],
                    "‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ",
                    ""
                )
                self.log(f"–ó–∞–¥–∞—á–∞ {job_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                del self.current_jobs[job_id]
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.send_btn.setEnabled(True)
        self.send_btn.setText("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.cancel_btn.setEnabled(False)
    
    def _send_bnb(self, to_address: str, amount: float, gas_price: int, gas_limit: int) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ BNB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NonceManager"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ Wei
            amount_wei = self.web3.to_wei(amount, 'ether')
            
            # –ü–æ–ª—É—á–∞–µ–º nonce —á–µ—Ä–µ–∑ NonceManager
            nonce = self.nonce_manager.get_nonce(self.account.address)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = {
                'to': Web3.to_checksum_address(to_address),
                'value': amount_wei,
                'gas': gas_limit if gas_limit else 21000,
                'gasPrice': gas_price,
                'nonce': nonce,
                'chainId': 56  # BSC Mainnet
            }
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)
            
            if tx_receipt['status'] == 1:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º nonce –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.nonce_manager.increment_nonce(self.account.address)
                return tx_hash.hex()
            else:
                raise Exception("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ç—å—é")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ BNB")
            raise
            
    def _send_token(self, to_address: str, amount: float, token_address: str, gas_price: int, gas_limit: int) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ ERC20 —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NonceManager"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
            contract = self.web3.eth.contract(
                address=Web3.to_checksum_address(token_address),
                abi=ERC20_ABI
            )
            
            # –ü–æ–ª—É—á–∞–µ–º decimals —Ç–æ–∫–µ–Ω–∞
            decimals = contract.functions.decimals().call()
            amount_in_units = int(amount * (10 ** decimals))
            
            # –ü–æ–ª—É—á–∞–µ–º nonce —á–µ—Ä–µ–∑ NonceManager
            nonce = self.nonce_manager.get_nonce(self.account.address)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é transfer
            transaction = contract.functions.transfer(
                Web3.to_checksum_address(to_address),
                amount_in_units
            ).build_transaction({
                'from': self.account.address,
                'gas': gas_limit if gas_limit else 100000,
                'gasPrice': gas_price,
                'nonce': nonce,
                'chainId': 56  # BSC Mainnet
            })
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signed_txn = self.web3.eth.account.sign_transaction(transaction, self.account.key)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)
            
            if tx_receipt['status'] == 1:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º nonce –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.nonce_manager.increment_nonce(self.account.address)
                return tx_hash.hex()
            else:
                raise Exception("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ç—å—é")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞")
            raise
        
    def _add_to_history(self, token: str, recipient: str, amount: float, status: str, tx_hash: str = ""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        row = self.history_table.rowCount()
        self.history_table.insertRow(row)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.history_table.setItem(row, 0, QTableWidgetItem(datetime.now().strftime("%H:%M:%S")))
        self.history_table.setItem(row, 1, QTableWidgetItem(token))
        self.history_table.setItem(row, 2, QTableWidgetItem(recipient[:10] + "..."))
        self.history_table.setItem(row, 3, QTableWidgetItem(f"{amount:.6f}"))
        self.history_table.setItem(row, 4, QTableWidgetItem(status))
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.history_table.scrollToBottom()
