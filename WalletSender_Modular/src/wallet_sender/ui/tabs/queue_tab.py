"""
–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import threading
import time
import json
from typing import Dict, List, Optional, Any
from datetime import datetime
from enum import Enum

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QProgressBar,
    QSpinBox, QDoubleSpinBox, QComboBox, QTextEdit, QHeaderView,
    QAbstractItemView, QMessageBox, QMenu, QApplication,
    QFileDialog, QCheckBox, QSplitter
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QTimer
from PyQt5.QtGui import QColor

from .base_tab import BaseTab
from ...database.database import DatabaseManager
from ...utils.logger import get_logger

logger = get_logger(__name__)


class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á"""
    PENDING = "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
    RUNNING = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    PAUSED = "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    COMPLETED = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    FAILED = "–û—à–∏–±–∫–∞"
    CANCELLED = "–û—Ç–º–µ–Ω–µ–Ω–æ"


class TaskType(Enum):
    """–¢–∏–ø—ã –∑–∞–¥–∞—á"""
    SEND_TOKEN = "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"
    SEND_BNB = "–û—Ç–ø—Ä–∞–≤–∫–∞ BNB"
    MASS_DISTRIBUTION = "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"
    REWARD = "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã"
    SWAP = "–û–±–º–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤"
    CHECK_BALANCE = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"
    OTHER = "–î—Ä—É–≥–æ–µ"


class QueueTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    task_added_signal = pyqtSignal(dict)
    task_updated_signal = pyqtSignal(str, str, str)  # task_id, status, message
    task_completed_signal = pyqtSignal(str, bool)  # task_id, success
    queue_updated_signal = pyqtSignal()
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.database = DatabaseManager()
        self.task_queue = []
        self.current_task = None
        self.is_processing = False
        self.stop_processing_event = threading.Event()
        self.pause_processing_event = threading.Event()
        self.processing_thread = None
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.task_added_signal.connect(self._on_task_added)
        self.task_updated_signal.connect(self._on_task_updated)
        self.task_completed_signal.connect(self._on_task_completed)
        self.queue_updated_signal.connect(self._update_queue_display)
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á")
        header_layout = QVBoxLayout(header)
        header_label = QLabel("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –æ–ø–µ—Ä–∞—Ü–∏–π")
        header_label.setStyleSheet("font-weight: bold; color: #4CAF50;")
        header_layout.addWidget(header_label)
        layout.addWidget(header)
        
        # Splitter –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        splitter = QSplitter(Qt.Vertical)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
        active_widget = self._create_active_queue_panel()
        splitter.addWidget(active_widget)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_widget = self._create_completed_tasks_panel()
        splitter.addWidget(completed_widget)
        
        splitter.setSizes([400, 300])
        layout.addWidget(splitter)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = self._create_control_panel()
        layout.addWidget(control_panel)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_panel = self._create_statistics_panel()
        layout.addWidget(stats_panel)
        
        # –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        log_group = QGroupBox("–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        log_layout = QVBoxLayout(log_group)
        
        self.execution_log = QTextEdit()
        self.execution_log.setReadOnly(True)
        self.execution_log.setMaximumHeight(100)
        log_layout.addWidget(self.execution_log)
        
        layout.addWidget(log_group)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self._load_tasks_from_database()
        
    def _create_active_queue_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        header_layout.addWidget(QLabel("üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å"))
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.filter_combo = QComboBox()
        self.filter_combo.addItems(['–í—Å–µ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞'])
        self.filter_combo.currentTextChanged.connect(self._apply_filter)
        header_layout.addWidget(QLabel("–§–∏–ª—å—Ç—Ä:"))
        header_layout.addWidget(self.filter_combo)
        
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        self.active_table = QTableWidget(0, 9)
        self.active_table.setHorizontalHeaderLabels([
            'ID', '–¢–∏–ø', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–æ–≥—Ä–µ—Å—Å',
            '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–°–æ–∑–¥–∞–Ω–æ', '–ù–∞—á–∞—Ç–æ', '–î–µ–π—Å—Ç–≤–∏—è'
        ])
        
        header = self.active_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(0, QHeaderView.Fixed)
            header.resizeSection(0, 50)
            header.setSectionResizeMode(2, QHeaderView.Stretch)
            header.setSectionResizeMode(8, QHeaderView.Fixed)
            header.resizeSection(8, 100)
        
        self.active_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.active_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.active_table.customContextMenuRequested.connect(self._show_active_context_menu)
        
        layout.addWidget(self.active_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
        buttons_layout = QHBoxLayout()
        
        self.add_task_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.add_task_btn.clicked.connect(self.add_task_dialog)
        buttons_layout.addWidget(self.add_task_btn)
        
        self.clear_queue_btn = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
        self.clear_queue_btn.clicked.connect(self.clear_queue)
        buttons_layout.addWidget(self.clear_queue_btn)
        
        self.export_queue_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—á–µ—Ä–µ–¥–∏")
        self.export_queue_btn.clicked.connect(self.export_queue)
        buttons_layout.addWidget(self.export_queue_btn)
        
        self.import_queue_btn = QPushButton("üì• –ò–º–ø–æ—Ä—Ç –æ—á–µ—Ä–µ–¥–∏")
        self.import_queue_btn.clicked.connect(self.import_queue)
        buttons_layout.addWidget(self.import_queue_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        return widget
        
    def _create_completed_tasks_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        header_layout.addWidget(QLabel("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"))
        
        self.auto_clear_completed = QCheckBox("–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑:")
        header_layout.addWidget(self.auto_clear_completed)
        
        self.clear_after_hours = QSpinBox()
        self.clear_after_hours.setRange(1, 168)
        self.clear_after_hours.setValue(24)
        self.clear_after_hours.setSuffix(" —á")
        self.clear_after_hours.setEnabled(False)
        header_layout.addWidget(self.clear_after_hours)
        
        self.auto_clear_completed.toggled.connect(self.clear_after_hours.setEnabled)
        
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        self.completed_table = QTableWidget(0, 8)
        self.completed_table.setHorizontalHeaderLabels([
            'ID', '–¢–∏–ø', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', 
            '–ù–∞—á–∞—Ç–æ', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–†–µ–∑—É–ª—å—Ç–∞—Ç'
        ])
        
        header = self.completed_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(0, QHeaderView.Fixed)
            header.resizeSection(0, 50)
            header.setSectionResizeMode(2, QHeaderView.Stretch)
        
        self.completed_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.completed_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.completed_table.customContextMenuRequested.connect(self._show_completed_context_menu)
        
        layout.addWidget(self.completed_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏
        completed_buttons_layout = QHBoxLayout()
        
        self.clear_completed_btn = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
        self.clear_completed_btn.clicked.connect(self.clear_completed_tasks)
        completed_buttons_layout.addWidget(self.clear_completed_btn)
        
        self.export_completed_btn = QPushButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞")
        self.export_completed_btn.clicked.connect(self.export_completed_report)
        completed_buttons_layout.addWidget(self.export_completed_btn)
        
        completed_buttons_layout.addStretch()
        layout.addLayout(completed_buttons_layout)
        
        return widget
        
    def _create_control_panel(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
        layout = QHBoxLayout(group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.start_btn = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        self.start_btn.clicked.connect(self.start_processing)
        layout.addWidget(self.start_btn)
        
        self.pause_btn = QPushButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.pause_btn.setEnabled(False)
        self.pause_btn.clicked.connect(self.pause_processing)
        layout.addWidget(self.pause_btn)
        
        self.resume_btn = QPushButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        self.resume_btn.setEnabled(False)
        self.resume_btn.clicked.connect(self.resume_processing)
        layout.addWidget(self.resume_btn)
        
        self.stop_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        self.stop_btn.clicked.connect(self.stop_processing)
        layout.addWidget(self.stop_btn)
        
        layout.addStretch()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏:"))
        
        self.task_delay = QDoubleSpinBox()
        self.task_delay.setRange(0, 60)
        self.task_delay.setValue(1)
        self.task_delay.setSingleStep(0.5)
        self.task_delay.setSuffix(" —Å–µ–∫")
        layout.addWidget(self.task_delay)
        
        self.auto_retry = QCheckBox("–ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        self.auto_retry.setChecked(True)
        layout.addWidget(self.auto_retry)
        
        self.max_retries = QSpinBox()
        self.max_retries.setRange(1, 10)
        self.max_retries.setValue(3)
        self.max_retries.setPrefix("–ú–∞–∫—Å: ")
        self.max_retries.setEnabled(self.auto_retry.isChecked())
        layout.addWidget(self.max_retries)
        
        self.auto_retry.toggled.connect(self.max_retries.setEnabled)
        
        return group
        
    def _create_statistics_panel(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        layout = QHBoxLayout(group)
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.total_tasks_label = QLabel("–í—Å–µ–≥–æ –∑–∞–¥–∞—á: 0")
        layout.addWidget(self.total_tasks_label)
        
        self.pending_tasks_label = QLabel("–í –æ–∂–∏–¥–∞–Ω–∏–∏: 0")
        layout.addWidget(self.pending_tasks_label)
        
        self.running_tasks_label = QLabel("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: 0")
        layout.addWidget(self.running_tasks_label)
        
        self.completed_tasks_label = QLabel("–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 0")
        layout.addWidget(self.completed_tasks_label)
        
        self.failed_tasks_label = QLabel("–û—à–∏–±–æ–∫: 0")
        layout.addWidget(self.failed_tasks_label)
        
        layout.addStretch()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.overall_progress = QProgressBar()
        self.overall_progress.setMaximumWidth(200)
        layout.addWidget(QLabel("–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:"))
        layout.addWidget(self.overall_progress)
        
        return group
        
    def add_task(self, task_type: TaskType, description: str, 
                 params: Dict[str, Any], priority: int = 5) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        task = {
            'id': f"TASK_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{len(self.task_queue)}",
            'type': task_type.value,
            'description': description,
            'params': params,
            'priority': priority,
            'status': TaskStatus.PENDING.value,
            'progress': 0,
            'created_at': datetime.now(),
            'started_at': None,
            'completed_at': None,
            'result': None,
            'error': None,
            'retries': 0
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        inserted = False
        for i, existing_task in enumerate(self.task_queue):
            if existing_task['priority'] < priority:
                self.task_queue.insert(i, task)
                inserted = True
                break
                
        if not inserted:
            self.task_queue.append(task)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self._save_task_to_database(task)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        self.task_added_signal.emit(task)
        
        self._log_execution(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task['id']} - {description}")
        
        return task['id']
        
    def add_task_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        from PyQt5.QtWidgets import QDialog, QFormLayout, QDialogButtonBox, QTextEdit
        
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        dialog.resize(500, 400)
        
        layout = QFormLayout(dialog)
        
        # –¢–∏–ø –∑–∞–¥–∞—á–∏
        type_combo = QComboBox()
        type_combo.addItems([t.value for t in TaskType])
        layout.addRow("–¢–∏–ø –∑–∞–¥–∞—á–∏:", type_combo)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description_input = QLineEdit()
        layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_input)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_spin = QSpinBox()
        priority_spin.setRange(1, 10)
        priority_spin.setValue(5)
        layout.addRow("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", priority_spin)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (JSON)
        layout.addRow(QLabel("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã (JSON):"))
        params_input = QTextEdit()
        params_input.setPlainText('{\n  \n}')
        layout.addRow(params_input)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel,
            parent=dialog
        )
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addRow(buttons)
        
        if dialog.exec_() == QDialog.Accepted:
            try:
                # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                params_text = params_input.toPlainText()
                params = json.loads(params_text) if params_text.strip() else {}
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task_type = TaskType(type_combo.currentText())
                description = description_input.text() or f"–ó–∞–¥–∞—á–∞ {task_type.value}"
                priority = priority_spin.value()
                
                task_id = self.add_task(task_type, description, params, priority)
                
                self.log(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}", "SUCCESS")
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å:\n{task_id}")
                
            except json.JSONDecodeError as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n{str(e)}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:\n{str(e)}")
                
    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        if self.is_processing:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
            
        if not self.task_queue:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø—É—Å—Ç–∞!")
            return
            
        self.is_processing = True
        self.stop_processing_event.clear()
        self.pause_processing_event.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.start_btn.setEnabled(False)
        self.pause_btn.setEnabled(True)
        self.stop_btn.setEnabled(True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processing_thread = threading.Thread(
            target=self._processing_worker,
            daemon=True
        )
        self.processing_thread.start()
        
        self.log("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏", "SUCCESS")
        
    def pause_processing(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.is_processing:
            self.pause_processing_event.set()
            self.pause_btn.setEnabled(False)
            self.resume_btn.setEnabled(True)
            self.log("‚è∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "WARNING")
            
    def resume_processing(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.is_processing:
            self.pause_processing_event.clear()
            self.pause_btn.setEnabled(True)
            self.resume_btn.setEnabled(False)
            self.log("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", "SUCCESS")
            
    def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.is_processing:
            self.stop_processing_event.set()
            self.pause_processing_event.clear()
            self.log("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...", "WARNING")
            
    def _processing_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
        try:
            while self.task_queue and not self.stop_processing_event.is_set():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
                while self.pause_processing_event.is_set():
                    if self.stop_processing_event.is_set():
                        break
                    time.sleep(0.1)
                    
                if self.stop_processing_event.is_set():
                    break
                    
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É —Å —Å—Ç–∞—Ç—É—Å–æ–º PENDING
                next_task = None
                for task in self.task_queue:
                    if task['status'] == TaskStatus.PENDING.value:
                        next_task = task
                        break
                        
                if not next_task:
                    self._log_execution("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                    break
                    
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                self.current_task = next_task
                self._execute_task(next_task)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                time.sleep(self.task_delay.value())
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            self._log_execution(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
        finally:
            self.is_processing = False
            self.current_task = None
            QTimer.singleShot(0, self._on_processing_finished)
            
    def _execute_task(self, task: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task['status'] = TaskStatus.RUNNING.value
            task['started_at'] = datetime.now()
            self.task_updated_signal.emit(task['id'], TaskStatus.RUNNING.value, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
            # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            
            self._log_execution(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task['id']}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for i in range(0, 101, 20):
                if self.stop_processing_event.is_set():
                    task['status'] = TaskStatus.CANCELLED.value
                    self.task_updated_signal.emit(task['id'], TaskStatus.CANCELLED.value, "–û—Ç–º–µ–Ω–µ–Ω–æ")
                    return
                    
                task['progress'] = i
                self.task_updated_signal.emit(task['id'], TaskStatus.RUNNING.value, f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}%")
                time.sleep(0.5)
                
            # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
            task['status'] = TaskStatus.COMPLETED.value
            task['completed_at'] = datetime.now()
            task['progress'] = 100
            task['result'] = "–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            
            self.task_completed_signal.emit(task['id'], True)
            self._log_execution(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['id']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task['id']}: {e}")
            
            task['status'] = TaskStatus.FAILED.value
            task['error'] = str(e)
            task['retries'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä
            if self.auto_retry.isChecked() and task['retries'] < self.max_retries.value():
                task['status'] = TaskStatus.PENDING.value
                self._log_execution(f"üîÑ –ü–æ–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ {task['id']} (–ø–æ–ø—ã—Ç–∫–∞ {task['retries']})")
            else:
                self.task_completed_signal.emit(task['id'], False)
                self._log_execution(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ {task['id']}: {str(e)}")
                
    def _on_processing_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.start_btn.setEnabled(True)
        self.pause_btn.setEnabled(False)
        self.resume_btn.setEnabled(False)
        self.stop_btn.setEnabled(False)
        
        self.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "SUCCESS")
        self._update_statistics()
        
    @pyqtSlot(dict)
    def _on_task_added(self, task: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö
        row = self.active_table.rowCount()
        self.active_table.insertRow(row)
        
        self.active_table.setItem(row, 0, QTableWidgetItem(task['id']))
        self.active_table.setItem(row, 1, QTableWidgetItem(task['type']))
        self.active_table.setItem(row, 2, QTableWidgetItem(task['description']))
        
        status_item = QTableWidgetItem(task['status'])
        self._set_status_color(status_item, task['status'])
        self.active_table.setItem(row, 3, status_item)
        
        self.active_table.setItem(row, 4, QTableWidgetItem(f"{task['progress']}%"))
        self.active_table.setItem(row, 5, QTableWidgetItem(str(task['priority'])))
        
        created_str = task['created_at'].strftime('%H:%M:%S')
        self.active_table.setItem(row, 6, QTableWidgetItem(created_str))
        
        self.active_table.setItem(row, 7, QTableWidgetItem("-"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_widget = QWidget()
        actions_layout = QHBoxLayout(actions_widget)
        actions_layout.setContentsMargins(0, 0, 0, 0)
        
        cancel_btn = QPushButton("‚ùå")
        cancel_btn.setMaximumSize(25, 25)
        cancel_btn.clicked.connect(lambda: self._cancel_task(task['id']))
        actions_layout.addWidget(cancel_btn)
        
        self.active_table.setCellWidget(row, 8, actions_widget)
        
        self._update_statistics()
        
    @pyqtSlot(str, str, str)
    def _on_task_updated(self, task_id: str, status: str, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ —Ç–∞–±–ª–∏—Ü–µ
        for row in range(self.active_table.rowCount()):
            if self.active_table.item(row, 0).text() == task_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                status_item = self.active_table.item(row, 3)
                status_item.setText(status)
                self._set_status_color(status_item, status)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                task = next((t for t in self.task_queue if t['id'] == task_id), None)
                if task:
                    self.active_table.item(row, 4).setText(f"{task['progress']}%")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                    if task['started_at']:
                        started_str = task['started_at'].strftime('%H:%M:%S')
                        self.active_table.item(row, 7).setText(started_str)
                        
                break
                
        self._update_statistics()
        
    @pyqtSlot(str, bool)
    def _on_task_completed(self, task_id: str, success: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É
        task = next((t for t in self.task_queue if t['id'] == task_id), None)
        if not task:
            return
            
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        self._move_to_completed(task)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        for row in range(self.active_table.rowCount()):
            if self.active_table.item(row, 0).text() == task_id:
                self.active_table.removeRow(row)
                break
                
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        self.task_queue.remove(task)
        
        self._update_statistics()
        
    def _move_to_completed(self, task: Dict):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"""
        row = self.completed_table.rowCount()
        self.completed_table.insertRow(row)
        
        self.completed_table.setItem(row, 0, QTableWidgetItem(task['id']))
        self.completed_table.setItem(row, 1, QTableWidgetItem(task['type']))
        self.completed_table.setItem(row, 2, QTableWidgetItem(task['description']))
        
        status_item = QTableWidgetItem(task['status'])
        self._set_status_color(status_item, task['status'])
        self.completed_table.setItem(row, 3, status_item)
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        started_str = task['started_at'].strftime('%H:%M:%S') if task['started_at'] else "-"
        self.completed_table.setItem(row, 4, QTableWidgetItem(started_str))
        
        # –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        completed_str = task['completed_at'].strftime('%H:%M:%S') if task['completed_at'] else "-"
        self.completed_table.setItem(row, 5, QTableWidgetItem(completed_str))
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if task['started_at'] and task['completed_at']:
            duration = task['completed_at'] - task['started_at']
            duration_str = str(duration).split('.')[0]
        else:
            duration_str = "-"
        self.completed_table.setItem(row, 6, QTableWidgetItem(duration_str))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_str = task.get('result', task.get('error', '-'))
        self.completed_table.setItem(row, 7, QTableWidgetItem(result_str))
        
    def _set_status_color(self, item: QTableWidgetItem, status: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        colors = {
            TaskStatus.PENDING.value: QColor('#444444'),
            TaskStatus.RUNNING.value: QColor('#004444'),
            TaskStatus.PAUSED.value: QColor('#444400'),
            TaskStatus.COMPLETED.value: QColor('#004400'),
            TaskStatus.FAILED.value: QColor('#440000'),
            TaskStatus.CANCELLED.value: QColor('#440044')
        }
        
        if status in colors:
            item.setBackground(colors[status])
            
    def _update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = len(self.task_queue) + self.completed_table.rowCount()
        pending = sum(1 for t in self.task_queue if t['status'] == TaskStatus.PENDING.value)
        running = sum(1 for t in self.task_queue if t['status'] == TaskStatus.RUNNING.value)
        
        completed = 0
        failed = 0
        
        for row in range(self.completed_table.rowCount()):
            status = self.completed_table.item(row, 3).text()
            if status == TaskStatus.COMPLETED.value:
                completed += 1
            elif status == TaskStatus.FAILED.value:
                failed += 1
                
        self.total_tasks_label.setText(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}")
        self.pending_tasks_label.setText(f"–í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}")
        self.running_tasks_label.setText(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {running}")
        self.completed_tasks_label.setText(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
        self.failed_tasks_label.setText(f"–û—à–∏–±–æ–∫: {failed}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if total > 0:
            progress = int((completed / total) * 100)
            self.overall_progress.setValue(progress)
            
    def _update_queue_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏"""
        self._update_statistics()
        
    def _apply_filter(self, filter_text: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        for row in range(self.active_table.rowCount()):
            status = self.active_table.item(row, 3).text()
            
            if filter_text == "–í—Å–µ":
                self.active_table.setRowHidden(row, False)
            else:
                self.active_table.setRowHidden(row, status != filter_text)
                
    def _cancel_task(self, task_id: str):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏"""
        task = next((t for t in self.task_queue if t['id'] == task_id), None)
        if task:
            if task['status'] == TaskStatus.RUNNING.value:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É!")
                return
                
            task['status'] = TaskStatus.CANCELLED.value
            self.task_completed_signal.emit(task_id, False)
            self.log(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞", "WARNING")
            
    def _show_active_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if self.active_table.currentRow() < 0:
            return
            
        menu = QMenu()
        
        view_details = menu.addAction("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")
        edit_task = menu.addAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        menu.addSeparator()
        move_up = menu.addAction("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        move_down = menu.addAction("‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        menu.addSeparator()
        cancel_task = menu.addAction("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
        
        action = menu.exec_(self.active_table.viewport().mapToGlobal(position))
        
        if action:
            row = self.active_table.currentRow()
            task_id = self.active_table.item(row, 0).text()
            
            if action == view_details:
                self._show_task_details(task_id)
            elif action == edit_task:
                self._edit_task(task_id)
            elif action == move_up:
                self._change_task_priority(task_id, 1)
            elif action == move_down:
                self._change_task_priority(task_id, -1)
            elif action == cancel_task:
                self._cancel_task(task_id)
                
    def _show_completed_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if self.completed_table.currentRow() < 0:
            return
            
        menu = QMenu()
        
        view_details = menu.addAction("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")
        retry_task = menu.addAction("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É")
        menu.addSeparator()
        remove_task = menu.addAction("üóë –£–¥–∞–ª–∏—Ç—å")
        
        action = menu.exec_(self.completed_table.viewport().mapToGlobal(position))
        
        if action:
            row = self.completed_table.currentRow()
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            
    def _show_task_details(self, task_id: str):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∑–∞–¥–∞—á–∏"""
        task = next((t for t in self.task_queue if t['id'] == task_id), None)
        if not task:
            return
            
        details = f"""
ID –∑–∞–¥–∞—á–∏: {task['id']}
–¢–∏–ø: {task['type']}
–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}
–°—Ç–∞—Ç—É—Å: {task['status']}
–ü—Ä–æ–≥—Ä–µ—Å—Å: {task['progress']}%
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task['priority']}
–°–æ–∑–¥–∞–Ω–æ: {task['created_at']}
–ù–∞—á–∞—Ç–æ: {task['started_at'] or '–ù–µ –Ω–∞—á–∞—Ç–æ'}
–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task['completed_at'] or '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}
–ü–æ–ø—ã—Ç–æ–∫: {task['retries']}

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
{json.dumps(task['params'], indent=2, ensure_ascii=False)}
        """
        
        QMessageBox.information(self, "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏", details)
        
    def _edit_task(self, task_id: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task = next((t for t in self.task_queue if t['id'] == task_id), None)
        if not task:
            return
            
        if task['status'] != TaskStatus.PENDING.value:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏!")
            return
            
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def _change_task_priority(self, task_id: str, delta: int):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
        task = next((t for t in self.task_queue if t['id'] == task_id), None)
        if task:
            task['priority'] = max(1, min(10, task['priority'] + delta))
            
            # –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏
            self.task_queue.sort(key=lambda t: t['priority'], reverse=True)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self._refresh_active_table()
            
            self.log(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {task['priority']}", "INFO")
            
    def _refresh_active_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        self.active_table.setRowCount(0)
        
        for task in self.task_queue:
            self._on_task_added(task)
            
    def clear_queue(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        if not self.task_queue:
            return
            
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å ({len(self.task_queue)} –∑–∞–¥–∞—á)?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks_to_remove = [t for t in self.task_queue 
                             if t['status'] != TaskStatus.RUNNING.value]
            
            for task in tasks_to_remove:
                self.task_queue.remove(task)
                
            self.active_table.setRowCount(0)
            self._refresh_active_table()
            
            self.log(f"–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ({len(tasks_to_remove)} –∑–∞–¥–∞—á)", "INFO")
            
    def clear_completed_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if self.completed_table.rowCount() == 0:
            return
            
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({self.completed_table.rowCount()})?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.completed_table.setRowCount(0)
            self.log("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã", "INFO")
            self._update_statistics()
            
    def export_queue(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–∞–π–ª"""
        if not self.task_queue:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")
            return
            
        path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –æ—á–µ—Ä–µ–¥–∏",
            f"queue_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            "JSON Files (*.json)"
        )
        
        if path:
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                export_data = []
                for task in self.task_queue:
                    task_copy = task.copy()
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
                    for key in ['created_at', 'started_at', 'completed_at']:
                        if task_copy[key]:
                            task_copy[key] = task_copy[key].isoformat()
                    export_data.append(task_copy)
                    
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)
                    
                self.log(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(export_data)} –∑–∞–¥–∞—á", "SUCCESS")
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–û—á–µ—Ä–µ–¥—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤:\n{path}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
                
    def import_queue(self):
        """–ò–º–ø–æ—Ä—Ç –æ—á–µ—Ä–µ–¥–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        path, _ = QFileDialog.getOpenFileName(
            self,
            "–ò–º–ø–æ—Ä—Ç –æ—á–µ—Ä–µ–¥–∏",
            "",
            "JSON Files (*.json)"
        )
        
        if not path:
            return
            
        try:
            with open(path, 'r', encoding='utf-8') as f:
                import_data = json.load(f)
                
            imported = 0
            for task_data in import_data:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                for key in ['created_at', 'started_at', 'completed_at']:
                    if task_data[key]:
                        task_data[key] = datetime.fromisoformat(task_data[key])
                        
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                task_data['id'] = f"IMP_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{imported}"
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PENDING
                task_data['status'] = TaskStatus.PENDING.value
                task_data['progress'] = 0
                
                self.task_queue.append(task_data)
                self._on_task_added(task_data)
                imported += 1
                
            self.log(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported} –∑–∞–¥–∞—á", "SUCCESS")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported} –∑–∞–¥–∞—á")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:\n{str(e)}")
            
    def export_completed_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º"""
        if self.completed_table.rowCount() == 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
            return
            
        path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
            f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV Files (*.csv)"
        )
        
        if path:
            try:
                import csv
                
                with open(path, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = []
                    for col in range(self.completed_table.columnCount()):
                        headers.append(self.completed_table.horizontalHeaderItem(col).text())
                    writer.writerow(headers)
                    
                    # –î–∞–Ω–Ω—ã–µ
                    for row in range(self.completed_table.rowCount()):
                        row_data = []
                        for col in range(self.completed_table.columnCount()):
                            item = self.completed_table.item(row, col)
                            row_data.append(item.text() if item else '')
                        writer.writerow(row_data)
                        
                self.log(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –ø–æ {self.completed_table.rowCount()} –∑–∞–¥–∞—á–∞–º", "SUCCESS")
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\n{path}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
                
    def _log_execution(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        QTimer.singleShot(0, lambda: self.execution_log.append(f"[{timestamp}] {message}"))
        
    def _save_task_to_database(self, task: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î: {e}")
            
    def _load_tasks_from_database(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î
            # –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            self.task_queue = []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ –ë–î: {e}")
