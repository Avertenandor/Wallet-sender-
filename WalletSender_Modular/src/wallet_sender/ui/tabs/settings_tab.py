"""
–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π RPC –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
"""

from typing import Optional
import json
import time
from dataclasses import asdict

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QLabel, QGroupBox, QPushButton,
    QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QCheckBox, QTextEdit,
    QMessageBox, QTabWidget, QWidget, QFormLayout
)
from PyQt5.QtCore import Qt, pyqtSignal, QThread

from .base_tab import BaseTab
from ...core.models import Settings
from ...core.store import get_store
from ...core.rpc import get_rpc_pool
from ...utils.logger import get_logger

logger = get_logger(__name__)


class RPCTestThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    test_complete = pyqtSignal(dict)
    
    def __init__(self, rpc_url: str):
        super().__init__()
        self.rpc_url = rpc_url
        
    def run(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPC"""
        try:
            from web3 import Web3
            
            start_time = time.time()
            w3 = Web3(Web3.HTTPProvider(self.rpc_url, request_kwargs={'timeout': 5}))
            
            if w3.is_connected():
                chain_id = w3.eth.chain_id
                block_number = w3.eth.block_number
                gas_price = w3.eth.gas_price
                latency = (time.time() - start_time) * 1000
                
                result = {
                    'success': True,
                    'chain_id': chain_id,
                    'block_number': block_number,
                    'gas_price': gas_price,
                    'latency': round(latency, 2),
                    'url': self.rpc_url
                }
            else:
                result = {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
                    'url': self.rpc_url
                }
                
        except Exception as e:
            result = {
                'success': False,
                'error': str(e),
                'url': self.rpc_url
            }
            
        self.test_complete.emit(result)


class SettingsTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    settings_changed = pyqtSignal(Settings)
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        self.store = get_store()
        self.rpc_pool = get_rpc_pool()
        self.current_settings = None
        self.load_settings()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        header.setStyleSheet("QGroupBox { font-weight: bold; }")
        header_layout = QVBoxLayout(header)
        
        # –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ RPC
        self.tabs.addTab(self.create_rpc_tab(), "üåê RPC")
        
        # –í–∫–ª–∞–¥–∫–∞ –≥–∞–∑–∞
        self.tabs.addTab(self.create_gas_tab(), "‚õΩ –ì–∞–∑")
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        self.tabs.addTab(self.create_limits_tab(), "üö¶ –õ–∏–º–∏—Ç—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        self.tabs.addTab(self.create_tokens_tab(), "üí∞ –¢–æ–∫–µ–Ω—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ API –∫–ª—é—á–µ–π
        self.tabs.addTab(self.create_api_tab(), "üîë API")
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.tabs.addTab(self.create_general_tab(), "üìã –û–±—â–µ–µ")
        
        header_layout.addWidget(self.tabs)
        layout.addWidget(header)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_settings)
        buttons_layout.addWidget(self.save_btn)
        
        self.reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
        self.reset_btn.clicked.connect(self.reset_settings)
        buttons_layout.addWidget(self.reset_btn)
        
        self.export_btn = QPushButton("üì• –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.clicked.connect(self.export_settings)
        buttons_layout.addWidget(self.export_btn)
        
        self.import_btn = QPushButton("üì§ –ò–º–ø–æ—Ä—Ç")
        self.import_btn.clicked.connect(self.import_settings)
        buttons_layout.addWidget(self.import_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        logger.info("SettingsTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def create_rpc_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ RPC –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QFormLayout(widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π RPC
        self.rpc_primary = QLineEdit()
        self.rpc_primary.setPlaceholderText("https://bsc-dataseed.binance.org/")
        layout.addRow("–û—Å–Ω–æ–≤–Ω–æ–π RPC:", self.rpc_primary)
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC
        self.test_primary_btn = QPushButton("üß™ –¢–µ—Å—Ç")
        self.test_primary_btn.clicked.connect(lambda: self.test_rpc(self.rpc_primary.text()))
        layout.addRow("", self.test_primary_btn)
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π RPC
        self.rpc_fallback = QLineEdit()
        self.rpc_fallback.setPlaceholderText("https://bsc-dataseed1.defibit.io/")
        layout.addRow("–†–µ–∑–µ—Ä–≤–Ω—ã–π RPC:", self.rpc_fallback)
        
        # –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ RPC
        self.test_fallback_btn = QPushButton("üß™ –¢–µ—Å—Ç")
        self.test_fallback_btn.clicked.connect(lambda: self.test_rpc(self.rpc_fallback.text()))
        layout.addRow("", self.test_fallback_btn)
        
        # Chain ID
        self.chain_id = QSpinBox()
        self.chain_id.setRange(1, 999999)
        self.chain_id.setValue(56)
        layout.addRow("Chain ID:", self.chain_id)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        self.test_results = QTextEdit()
        self.test_results.setReadOnly(True)
        self.test_results.setMaximumHeight(100)
        layout.addRow("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:", self.test_results)
        
        # –¢–µ—Å—Ç –≤—Å–µ—Ö RPC
        self.test_all_btn = QPushButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ RPC")
        self.test_all_btn.clicked.connect(self.test_all_rpcs)
        layout.addRow("", self.test_all_btn)
        
        return widget
        
    def create_gas_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∞–∑–∞"""
        widget = QWidget()
        layout = QFormLayout(widget)

        # –†–µ–∂–∏–º –≥–∞–∑–∞
        self.gas_mode = QComboBox()
        self.gas_mode.addItems(["auto", "manual"])
        self.gas_mode.currentTextChanged.connect(self.on_gas_mode_changed)
        layout.addRow("–†–µ–∂–∏–º –≥–∞–∑–∞:", self.gas_mode)

        # –¶–µ–Ω–∞ –≥–∞–∑–∞ (Gwei) ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1)
        self.gas_price_gwei = QDoubleSpinBox()
        self.gas_price_gwei.setRange(0.01, 1000.0)
        self.gas_price_gwei.setDecimals(3)
        self.gas_price_gwei.setSingleStep(0.1)
        self.gas_price_gwei.setValue(0.1)
        self.gas_price_gwei.setSuffix(" Gwei")
        layout.addRow("–¶–µ–Ω–∞ –≥–∞–∑–∞:", self.gas_price_gwei)

        # –õ–∏–º–∏—Ç –≥–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.gas_limit_default = QSpinBox()
        self.gas_limit_default.setRange(21000, 1000000)
        self.gas_limit_default.setValue(100000)
        self.gas_limit_default.setSingleStep(1000)
        layout.addRow("–õ–∏–º–∏—Ç –≥–∞–∑–∞:", self.gas_limit_default)

        return widget
        
    def create_limits_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏ —Ä–µ—Ç—Ä–∞–µ–≤"""
        widget = QWidget()
        layout = QFormLayout(widget)
        
        # –ú–∞–∫—Å–∏–º—É–º RPS
        self.max_rps = QSpinBox()
        self.max_rps.setRange(1, 100)
        self.max_rps.setValue(10)
        self.max_rps.setSuffix(" –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        layout.addRow("–ú–∞–∫—Å. RPS:", self.max_rps)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        self.retries = QSpinBox()
        self.retries.setRange(0, 10)
        self.retries.setValue(3)
        self.retries.setSuffix(" –ø–æ–ø—ã—Ç–æ–∫")
        layout.addRow("–ü–æ–≤—Ç–æ—Ä—ã:", self.retries)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        self.backoff_ms = QSpinBox()
        self.backoff_ms.setRange(100, 10000)
        self.backoff_ms.setValue(1000)
        self.backoff_ms.setSingleStep(100)
        self.backoff_ms.setSuffix(" –º—Å")
        layout.addRow("–ó–∞–¥–µ—Ä–∂–∫–∞:", self.backoff_ms)
        
        # –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.timeout_ms = QSpinBox()
        self.timeout_ms.setRange(1000, 60000)
        self.timeout_ms.setValue(30000)
        self.timeout_ms.setSingleStep(1000)
        self.timeout_ms.setSuffix(" –º—Å")
        layout.addRow("–¢–∞–π–º–∞—É—Ç:", self.timeout_ms)
        
        return widget
        
    def create_tokens_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–∫–µ–Ω–æ–≤"""
        widget = QWidget()
        layout = QFormLayout(widget)
        
        # –¢–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_token = QComboBox()
        self.default_token.setEditable(True)
        self.default_token.addItems([
            "BNB",
            "0x55d398326f99059ff775485246999027b3197955",  # USDT
            "0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1"   # PLEX ONE
        ])
        layout.addRow("–¢–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", self.default_token)
        
        # Decimals –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        self.decimals_text = QTextEdit()
        self.decimals_text.setPlaceholderText(
            "–§–æ—Ä–º–∞—Ç: –∞–¥—Ä–µ—Å:decimals\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "0x55d398326f99059ff775485246999027b3197955:18\n"
            "0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1:18"
        )
        self.decimals_text.setMaximumHeight(150)
        layout.addRow("Decimals —Ç–æ–∫–µ–Ω–æ–≤:", self.decimals_text)
        
        return widget
        
    def create_api_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ API –∫–ª—é—á–µ–π"""
        widget = QWidget()
        layout = QFormLayout(widget)
        
        # Etherscan API –∫–ª—é—á–∏
        self.etherscan_keys = QTextEdit()
        self.etherscan_keys.setPlaceholderText(
            "–û–¥–∏–Ω –∫–ª—é—á –Ω–∞ —Å—Ç—Ä–æ–∫—É:\n"
            "RF1Q8SCFHFD1EVAP5A4WCMIM4DREA7UNUH\n"
            "U89HXHR9Y26CHMWAA9JUZ17YK2AAXS65CZ\n"
            "RAI3FTD9W53JPYZ2AHW8IBH9BXUC71NRH1"
        )
        self.etherscan_keys.setMaximumHeight(100)
        layout.addRow("Etherscan API –∫–ª—é—á–∏:", self.etherscan_keys)
        
        # –¢–µ—Å—Ç API –∫–ª—é—á–µ–π
        self.test_api_btn = QPushButton("üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏")
        self.test_api_btn.clicked.connect(self.test_api_keys)
        layout.addRow("", self.test_api_btn)
        
        return widget
        
    def create_general_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QFormLayout(widget)
        
        # –Ø–∑—ã–∫
        self.locale = QComboBox()
        self.locale.addItems(["ru_RU", "en_US"])
        layout.addRow("–Ø–∑—ã–∫:", self.locale)
        
        # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        self.timezone = QComboBox()
        self.timezone.addItems([
            "Europe/Moscow",
            "UTC",
            "Asia/Shanghai",
            "America/New_York"
        ])
        layout.addRow("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", self.timezone)
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤
        self.logs_dir = QLineEdit()
        self.logs_dir.setText("logs")
        layout.addRow("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤:", self.logs_dir)
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.exports_dir = QLineEdit()
        self.exports_dir.setText("exports")
        layout.addRow("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", self.exports_dir)
        
        # –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        self.autolock_min = QSpinBox()
        self.autolock_min.setRange(0, 120)
        self.autolock_min.setValue(30)
        self.autolock_min.setSuffix(" –º–∏–Ω")
        self.autolock_min.setSpecialValueText("–û—Ç–∫–ª—é—á–µ–Ω–æ")
        layout.addRow("–ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:", self.autolock_min)
        
        return widget
        
    def on_gas_mode_changed(self, mode: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –≥–∞–∑–∞"""
        self.gas_price_gwei.setEnabled(mode == "manual")
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î"""
        try:
            settings_dict = self.store.load_settings()
            
            if settings_dict:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Settings
                self.current_settings = Settings.from_dict(settings_dict)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.current_settings = Settings()
                
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ UI
            self.apply_settings_to_ui()
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.current_settings = Settings()
            
    def apply_settings_to_ui(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º UI"""
        if not self.current_settings:
            return
            
        # RPC
        self.rpc_primary.setText(self.current_settings.rpc_primary)
        self.rpc_fallback.setText(self.current_settings.rpc_fallback)
        self.chain_id.setValue(self.current_settings.chain_id)
        
        # –ì–∞–∑
        self.gas_mode.setCurrentText(self.current_settings.gas_mode)
        if self.current_settings.gas_price_wei not in (None, "", 0):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º wei (str|int) –≤ gwei (float)
            try:
                wei_val = int(self.current_settings.gas_price_wei)
                gwei_price = wei_val / 10**9
                self.gas_price_gwei.setValue(float(gwei_price))
            except Exception:
                # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                self.gas_price_gwei.setValue(5.0)
        self.gas_limit_default.setValue(self.current_settings.gas_limit_default)
        
        # –õ–∏–º–∏—Ç—ã
        self.max_rps.setValue(self.current_settings.max_rps)
        self.retries.setValue(self.current_settings.retries)
        self.backoff_ms.setValue(self.current_settings.backoff_ms)
        self.timeout_ms.setValue(self.current_settings.timeout_ms)
        
        # –¢–æ–∫–µ–Ω—ã
        if self.current_settings.default_token:
            self.default_token.setCurrentText(self.current_settings.default_token)
            
        # Decimals
        decimals_text = ""
        for addr, decimals in self.current_settings.decimals_map.items():
            decimals_text += f"{addr}:{decimals}\n"
        self.decimals_text.setPlainText(decimals_text.strip())
        
        # API –∫–ª—é—á–∏
        keys_text = "\n".join(self.current_settings.etherscan_keys)
        self.etherscan_keys.setPlainText(keys_text)
        
        # –û–±—â–µ–µ
        self.locale.setCurrentText(self.current_settings.locale)
        self.timezone.setCurrentText(self.current_settings.timezone)
        self.logs_dir.setText(self.current_settings.logs_dir)
        self.exports_dir.setText(self.current_settings.exports_dir)
        self.autolock_min.setValue(self.current_settings.autolock_min)
        
    def get_settings_from_ui(self) -> Settings:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ UI"""
        settings = Settings()
        
        # RPC
        settings.rpc_primary = self.rpc_primary.text() or settings.rpc_primary
        settings.rpc_fallback = self.rpc_fallback.text() or settings.rpc_fallback
        settings.chain_id = self.chain_id.value()
        
        # –ì–∞–∑
        settings.gas_mode = self.gas_mode.currentText()
        if settings.gas_mode == "manual":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º gwei (float) –≤ wei (int)
            settings.gas_price_wei = int(self.gas_price_gwei.value() * 10**9)
        settings.gas_limit_default = self.gas_limit_default.value()
        
        # –õ–∏–º–∏—Ç—ã
        settings.max_rps = self.max_rps.value()
        settings.retries = self.retries.value()
        settings.backoff_ms = self.backoff_ms.value()
        settings.timeout_ms = self.timeout_ms.value()
        
        # –¢–æ–∫–µ–Ω—ã
        token_text = self.default_token.currentText()
        if token_text and token_text != "BNB":
            settings.default_token = token_text
            
        # Decimals
        decimals_map = {}
        for line in self.decimals_text.toPlainText().split('\n'):
            line = line.strip()
            if ':' in line:
                addr, decimals = line.split(':', 1)
                try:
                    decimals_map[addr.strip()] = int(decimals.strip())
                except ValueError:
                    pass
        if decimals_map:
            settings.decimals_map = decimals_map
            
        # API –∫–ª—é—á–∏
        keys = []
        for line in self.etherscan_keys.toPlainText().split('\n'):
            key = line.strip()
            if key:
                keys.append(key)
        if keys:
            settings.etherscan_keys = keys
            
        # –û–±—â–µ–µ
        settings.locale = self.locale.currentText()
        settings.timezone = self.timezone.currentText()
        settings.logs_dir = self.logs_dir.text()
        settings.exports_dir = self.exports_dir.text()
        settings.autolock_min = self.autolock_min.value()
        
        return settings
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
            settings = self.get_settings_from_ui()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validate_settings(settings):
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.store.save_settings(settings.to_dict())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_settings = settings
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ RPC –ø—É–ª—É (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                if hasattr(self.rpc_pool, 'set_max_rps'):
                    self.rpc_pool.set_max_rps(settings.max_rps)
                elif hasattr(self.rpc_pool, 'set_rate_limit'):
                    self.rpc_pool.set_rate_limit(settings.max_rps)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç RPS –∫ RPC –ø—É–ª—É: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            self.settings_changed.emit(settings)
            
            self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "SUCCESS")
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", "ERROR")
            
    def validate_settings(self, settings: Settings) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ RPC
        if not settings.rpc_primary.startswith('http'):
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞",
                "–û—Å–Ω–æ–≤–Ω–æ–π RPC –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
            )
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ chain ID –¥–ª—è BSC
        if settings.chain_id != 56 and settings.chain_id != 97:
            reply = QMessageBox.question(
                self, "–í–Ω–∏–º–∞–Ω–∏–µ",
                f"Chain ID {settings.chain_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç BSC (56) –∏–ª–∏ BSC Testnet (97).\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.No:
                return False
                
        return True
        
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.current_settings = Settings()
            self.apply_settings_to_ui()
            self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", "INFO")
            
    def test_rpc(self, rpc_url: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not rpc_url:
            self.log_message("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "WARNING")
            return
            
        self.test_thread = RPCTestThread(rpc_url)
        self.test_thread.test_complete.connect(self.on_test_complete)
        self.test_thread.start()
        
        self.log_message(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {rpc_url}...", "INFO")
        
    def on_test_complete(self, result: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        if result['success']:
            msg = (
                f"‚úÖ {result['url']}\n"
                f"Chain ID: {result['chain_id']}\n"
                f"–ë–ª–æ–∫: {result['block_number']}\n"
                f"Gas: {result['gas_price'] // 10**9} Gwei\n"
                f"–ó–∞–¥–µ—Ä–∂–∫–∞: {result['latency']} –º—Å\n"
            )
            self.test_results.append(msg)
            self.log_message("RPC —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", "SUCCESS")
        else:
            msg = f"‚ùå {result['url']}\n–û—à–∏–±–∫–∞: {result['error']}\n"
            self.test_results.append(msg)
            self.log_message("RPC —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω", "ERROR")
            
    def test_all_rpcs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö RPC"""
        self.test_results.clear()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
        if self.rpc_primary.text():
            self.test_rpc(self.rpc_primary.text())
            
        if self.rpc_fallback.text():
            self.test_rpc(self.rpc_fallback.text())
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoints –≤ –ø—É–ª–µ
        stats = self.rpc_pool.test_all_endpoints()
        
        for name, info in stats.items():
            if info['status'] == 'online':
                msg = f"‚úÖ {name}: {info['response_time_ms']} –º—Å\n"
            else:
                msg = f"‚ùå {name}: {info.get('error', 'Offline')}\n"
            self.test_results.append(msg)
            
    def test_api_keys(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π"""
        keys = self.etherscan_keys.toPlainText().strip().split('\n')
        
        if not keys:
            self.log_message("–ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "WARNING")
            return
            
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç API –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ Etherscan V2
        self.log_message(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(keys)} –∫–ª—é—á–µ–π...", "INFO")
        
    def export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            from PyQt5.QtWidgets import QFileDialog
            
            file_path, _ = QFileDialog.getSaveFileName(
                self, "–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", "settings.json",
                "JSON —Ñ–∞–π–ª—ã (*.json)"
            )
            
            if file_path:
                settings = self.get_settings_from_ui()
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(settings.to_dict(), f, indent=2, ensure_ascii=False)
                    
                self.log_message(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}", "SUCCESS")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            self.log_message(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
            
    def import_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            from PyQt5.QtWidgets import QFileDialog
            
            file_path, _ = QFileDialog.getOpenFileName(
                self, "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", "",
                "JSON —Ñ–∞–π–ª—ã (*.json)"
            )
            
            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                self.current_settings = Settings.from_dict(data)
                self.apply_settings_to_ui()
                
                self.log_message(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}", "SUCCESS")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            self.log_message(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}", "ERROR")
