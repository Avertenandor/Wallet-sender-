"""
–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import json
from typing import Optional, Dict, Any, List
from pathlib import Path

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QPushButton, QLabel,
    QLineEdit, QTextEdit, QSpinBox, QDoubleSpinBox, QFormLayout,
    QMessageBox, QComboBox, QCheckBox, QTabWidget, QWidget,
    QListWidget, QListWidgetItem, QFileDialog, QDialog,
    QDialogButtonBox, QGridLayout, QScrollArea
)
from PyQt5.QtCore import pyqtSignal, Qt, QSettings
from PyQt5.QtGui import QFont, QIcon

from .base_tab import BaseTab
from ...config import get_config
from ...constants import CONTRACTS, BSC_MAINNET, DEFAULT_GAS_PRICE, DEFAULT_GAS_LIMIT
from ...utils.logger import get_logger

logger = get_logger(__name__)

class SettingsTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    settings_changed = pyqtSignal(str, object)  # key, value
    theme_changed = pyqtSignal(str)  # theme name
    language_changed = pyqtSignal(str)  # language code
    
    def __init__(self, main_window, parent=None):
        self.config = get_config()
        super().__init__(main_window, parent)
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        layout = QVBoxLayout(self)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.tabs = QTabWidget()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.tabs.addTab(self._create_general_settings(), "üè† –û—Å–Ω–æ–≤–Ω—ã–µ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏
        self.tabs.addTab(self._create_network_settings(), "üåê –°–µ—Ç—å")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞
        self.tabs.addTab(self._create_gas_settings(), "‚õΩ –ì–∞–∑")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        self.tabs.addTab(self._create_tokens_settings(), "üí∞ –¢–æ–∫–µ–Ω—ã")
        
        # API –∫–ª—é—á–∏
        self.tabs.addTab(self._create_api_settings(), "üîë API")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.tabs.addTab(self._create_ui_settings(), "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.tabs.addTab(self._create_security_settings(), "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.tabs.addTab(self._create_logging_settings(), "üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç
        self.tabs.addTab(self._create_import_export_settings(), "üíæ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
        
        layout.addWidget(self.tabs)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.save_btn.clicked.connect(self.save_settings)
        buttons_layout.addWidget(self.save_btn)
        
        self.reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º")
        self.reset_btn.clicked.connect(self.reset_to_defaults)
        buttons_layout.addWidget(self.reset_btn)
        
        self.reload_btn = QPushButton("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å")
        self.reload_btn.clicked.connect(self.reload_settings)
        buttons_layout.addWidget(self.reload_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
    def _create_general_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä—É–ø–ø–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        general_group = QGroupBox("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        general_layout = QFormLayout(general_group)
        
        # –í—ã–±–æ—Ä —Å–µ—Ç–∏
        self.network_combo = QComboBox()
        self.network_combo.addItems(["bsc_mainnet", "bsc_testnet"])
        current_network = self.config.get("network", "bsc_mainnet")
        self.network_combo.setCurrentText(current_network)
        general_layout.addRow("–°–µ—Ç—å:", self.network_combo)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.autosave_check = QCheckBox("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        self.autosave_check.setChecked(self.config.get("autosave", True))
        general_layout.addRow(self.autosave_check)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.confirm_operations_check = QCheckBox("–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π")
        self.confirm_operations_check.setChecked(self.config.get("confirm_operations", True))
        general_layout.addRow(self.confirm_operations_check)
        
        # –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.sound_notifications_check = QCheckBox("–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.sound_notifications_check.setChecked(self.config.get("sound_notifications", False))
        general_layout.addRow(self.sound_notifications_check)
        
        layout.addWidget(general_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞–≥—Ä–∞–¥
        rewards_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥")
        rewards_layout = QFormLayout(rewards_group)
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
        self.rewards_enabled_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥")
        rewards_settings = self.config.get("rewards", {})
        self.rewards_enabled_check.setChecked(rewards_settings.get("enabled", False))
        rewards_layout.addRow(self.rewards_enabled_check)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        self.min_reward_amount = QDoubleSpinBox()
        self.min_reward_amount.setRange(0.00001, 1000000)
        self.min_reward_amount.setDecimals(5)
        self.min_reward_amount.setValue(rewards_settings.get("min_amount", 0.01))
        rewards_layout.addRow("–ú–∏–Ω. —Å—É–º–º–∞:", self.min_reward_amount)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä–∞–¥—ã
        self.reward_percentage = QDoubleSpinBox()
        self.reward_percentage.setRange(0.01, 100)
        self.reward_percentage.setDecimals(2)
        self.reward_percentage.setValue(rewards_settings.get("reward_percentage", 1.0))
        self.reward_percentage.setSuffix(" %")
        rewards_layout.addRow("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä–∞–¥—ã:", self.reward_percentage)
        
        layout.addWidget(rewards_group)
        layout.addStretch()
        
        return widget
        
    def _create_network_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ç–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # RPC URLs
        rpc_group = QGroupBox("RPC —É–∑–ª—ã")
        rpc_layout = QVBoxLayout(rpc_group)
        
        # BSC Mainnet
        mainnet_layout = QHBoxLayout()
        mainnet_layout.addWidget(QLabel("BSC Mainnet:"))
        self.mainnet_rpc_input = QLineEdit()
        rpc_urls = self.config.get("rpc_urls", {})
        self.mainnet_rpc_input.setText(rpc_urls.get("bsc_mainnet", BSC_MAINNET['rpc_url']))
        mainnet_layout.addWidget(self.mainnet_rpc_input)
        
        self.test_mainnet_btn = QPushButton("–¢–µ—Å—Ç")
        self.test_mainnet_btn.clicked.connect(lambda: self.test_rpc(self.mainnet_rpc_input.text()))
        mainnet_layout.addWidget(self.test_mainnet_btn)
        
        rpc_layout.addLayout(mainnet_layout)
        
        # BSC Testnet
        testnet_layout = QHBoxLayout()
        testnet_layout.addWidget(QLabel("BSC Testnet:"))
        self.testnet_rpc_input = QLineEdit()
        self.testnet_rpc_input.setText(rpc_urls.get("bsc_testnet", "https://data-seed-prebsc-1-s1.binance.org:8545/"))
        testnet_layout.addWidget(self.testnet_rpc_input)
        
        self.test_testnet_btn = QPushButton("–¢–µ—Å—Ç")
        self.test_testnet_btn.clicked.connect(lambda: self.test_rpc(self.testnet_rpc_input.text()))
        testnet_layout.addWidget(self.test_testnet_btn)
        
        rpc_layout.addLayout(testnet_layout)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö RPC
        rpc_layout.addWidget(QLabel("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ RPC —É–∑–ª—ã:"))
        self.rpc_list = QListWidget()
        self.rpc_list.setMaximumHeight(150)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ RPC
        additional_rpcs = self.config.get("additional_rpcs", [])
        for rpc in additional_rpcs:
            self.rpc_list.addItem(rpc)
            
        rpc_layout.addWidget(self.rpc_list)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RPC
        rpc_buttons_layout = QHBoxLayout()
        
        self.add_rpc_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.add_rpc_btn.clicked.connect(self.add_rpc)
        rpc_buttons_layout.addWidget(self.add_rpc_btn)
        
        self.remove_rpc_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å")
        self.remove_rpc_btn.clicked.connect(self.remove_rpc)
        rpc_buttons_layout.addWidget(self.remove_rpc_btn)
        
        self.test_all_rpc_btn = QPushButton("üîç –¢–µ—Å—Ç –≤—Å–µ—Ö")
        self.test_all_rpc_btn.clicked.connect(self.test_all_rpcs)
        rpc_buttons_layout.addWidget(self.test_all_rpc_btn)
        
        rpc_layout.addLayout(rpc_buttons_layout)
        
        layout.addWidget(rpc_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        connection_layout = QFormLayout(connection_group)
        
        # –¢–∞–π–º–∞—É—Ç
        self.connection_timeout = QSpinBox()
        self.connection_timeout.setRange(5, 60)
        self.connection_timeout.setValue(self.config.get("connection_timeout", 30))
        self.connection_timeout.setSuffix(" —Å–µ–∫")
        connection_layout.addRow("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", self.connection_timeout)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        self.retry_count = QSpinBox()
        self.retry_count.setRange(1, 10)
        self.retry_count.setValue(self.config.get("retry_count", 3))
        connection_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:", self.retry_count)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ RPC
        self.auto_switch_rpc = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å RPC –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        self.auto_switch_rpc.setChecked(self.config.get("auto_switch_rpc", True))
        connection_layout.addRow(self.auto_switch_rpc)
        
        layout.addWidget(connection_group)
        layout.addStretch()
        
        return widget
        
    def _create_gas_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∞–∑–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        gas_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞")
        gas_layout = QFormLayout(gas_group)
        
        gas_settings = self.config.get("gas_settings", {})
        
        # –¶–µ–Ω–∞ –≥–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_gas_price = QDoubleSpinBox()
        self.default_gas_price.setRange(0.1, 1000)
        self.default_gas_price.setDecimals(1)
        self.default_gas_price.setValue(gas_settings.get("default_gas_price", DEFAULT_GAS_PRICE))
        self.default_gas_price.setSuffix(" Gwei")
        gas_layout.addRow("–¶–µ–Ω–∞ –≥–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", self.default_gas_price)
        
        # –õ–∏–º–∏—Ç –≥–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_gas_limit = QSpinBox()
        self.default_gas_limit.setRange(21000, 1000000)
        self.default_gas_limit.setValue(gas_settings.get("default_gas_limit", DEFAULT_GAS_LIMIT))
        gas_layout.addRow("–õ–∏–º–∏—Ç –≥–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", self.default_gas_limit)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞
        self.max_gas_price = QDoubleSpinBox()
        self.max_gas_price.setRange(1, 1000)
        self.max_gas_price.setDecimals(1)
        self.max_gas_price.setValue(gas_settings.get("max_gas_price", 50))
        self.max_gas_price.setSuffix(" Gwei")
        gas_layout.addRow("–ú–∞–∫—Å. —Ü–µ–Ω–∞ –≥–∞–∑–∞:", self.max_gas_price)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
        self.auto_estimate_gas = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –≥–∞–∑")
        self.auto_estimate_gas.setChecked(gas_settings.get("auto_estimate", False))
        gas_layout.addRow(self.auto_estimate_gas)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EIP-1559
        self.use_eip1559 = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EIP-1559 (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
        self.use_eip1559.setChecked(gas_settings.get("use_eip1559", False))
        gas_layout.addRow(self.use_eip1559)
        
        layout.addWidget(gas_group)
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–∞–∑–∞
        presets_group = QGroupBox("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        presets_layout = QVBoxLayout(presets_group)
        
        presets_buttons_layout = QHBoxLayout()
        
        self.gas_slow_btn = QPushButton("üê¢ –ú–µ–¥–ª–µ–Ω–Ω–æ (3 Gwei)")
        self.gas_slow_btn.clicked.connect(lambda: self.set_gas_preset(3))
        presets_buttons_layout.addWidget(self.gas_slow_btn)
        
        self.gas_normal_btn = QPushButton("üö∂ –û–±—ã—á–Ω–æ (5 Gwei)")
        self.gas_normal_btn.clicked.connect(lambda: self.set_gas_preset(5))
        presets_buttons_layout.addWidget(self.gas_normal_btn)
        
        self.gas_fast_btn = QPushButton("üèÉ –ë—ã—Å—Ç—Ä–æ (10 Gwei)")
        self.gas_fast_btn.clicked.connect(lambda: self.set_gas_preset(10))
        presets_buttons_layout.addWidget(self.gas_fast_btn)
        
        self.gas_instant_btn = QPushButton("‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ (20 Gwei)")
        self.gas_instant_btn.clicked.connect(lambda: self.set_gas_preset(20))
        presets_buttons_layout.addWidget(self.gas_instant_btn)
        
        presets_layout.addLayout(presets_buttons_layout)
        
        layout.addWidget(presets_group)
        layout.addStretch()
        
        return widget
        
    def _create_tokens_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–∫–µ–Ω–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        tokens_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏")
        tokens_layout = QVBoxLayout(tokens_group)
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_layout.addWidget(QLabel("–¢–æ–∫–µ–Ω—ã:"))
        self.tokens_list = QListWidget()
        self.tokens_list.setMaximumHeight(200)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        tokens = self.config.get("tokens", CONTRACTS)
        for name, address in tokens.items():
            item_text = f"{name}: {address}"
            self.tokens_list.addItem(item_text)
            
        tokens_layout.addWidget(self.tokens_list)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
        tokens_buttons_layout = QHBoxLayout()
        
        self.add_token_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
        self.add_token_btn.clicked.connect(self.add_token)
        tokens_buttons_layout.addWidget(self.add_token_btn)
        
        self.edit_token_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.edit_token_btn.clicked.connect(self.edit_token)
        tokens_buttons_layout.addWidget(self.edit_token_btn)
        
        self.remove_token_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å")
        self.remove_token_btn.clicked.connect(self.remove_token)
        tokens_buttons_layout.addWidget(self.remove_token_btn)
        
        tokens_layout.addLayout(tokens_buttons_layout)
        
        layout.addWidget(tokens_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PancakeSwap
        pancake_group = QGroupBox("PancakeSwap")
        pancake_layout = QFormLayout(pancake_group)
        
        # Router address
        self.pancake_router_input = QLineEdit()
        self.pancake_router_input.setText(
            self.config.get("pancakeswap_router", CONTRACTS['PANCAKESWAP_ROUTER'])
        )
        pancake_layout.addRow("Router –∞–¥—Ä–µ—Å:", self.pancake_router_input)
        
        # Slippage
        self.slippage_input = QDoubleSpinBox()
        self.slippage_input.setRange(0.1, 50)
        self.slippage_input.setDecimals(1)
        self.slippage_input.setValue(self.config.get("slippage", 2.0))
        self.slippage_input.setSuffix(" %")
        pancake_layout.addRow("Slippage:", self.slippage_input)
        
        layout.addWidget(pancake_group)
        layout.addStretch()
        
        return widget
        
    def _create_api_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        api_group = QGroupBox("BSCScan API")
        api_layout = QVBoxLayout(api_group)
        
        api_layout.addWidget(QLabel("API –∫–ª—é—á–∏:"))
        self.api_keys_list = QListWidget()
        self.api_keys_list.setMaximumHeight(150)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
        api_keys = self.config.get("bscscan_api_keys", [])
        for key in api_keys:
            # –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –∫–ª—é—á–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked_key = key[:8] + "..." + key[-8:] if len(key) > 16 else key
            self.api_keys_list.addItem(masked_key)
            
        api_layout.addWidget(self.api_keys_list)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏
        api_buttons_layout = QHBoxLayout()
        
        self.add_api_key_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á")
        self.add_api_key_btn.clicked.connect(self.add_api_key)
        api_buttons_layout.addWidget(self.add_api_key_btn)
        
        self.remove_api_key_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å")
        self.remove_api_key_btn.clicked.connect(self.remove_api_key)
        api_buttons_layout.addWidget(self.remove_api_key_btn)
        
        self.test_api_key_btn = QPushButton("üîç –¢–µ—Å—Ç")
        self.test_api_key_btn.clicked.connect(self.test_api_key)
        api_buttons_layout.addWidget(self.test_api_key_btn)
        
        api_layout.addLayout(api_buttons_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        api_settings_layout = QFormLayout()
        
        # Rate limit
        self.api_rate_limit = QSpinBox()
        self.api_rate_limit.setRange(1, 10)
        self.api_rate_limit.setValue(self.config.get("api_rate_limit", 5))
        self.api_rate_limit.setSuffix(" –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        api_settings_layout.addRow("Rate limit:", self.api_rate_limit)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –∫–ª—é—á–µ–π
        self.rotate_api_keys = QCheckBox("–†–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π")
        self.rotate_api_keys.setChecked(self.config.get("rotate_api_keys", True))
        api_settings_layout.addRow(self.rotate_api_keys)
        
        api_layout.addLayout(api_settings_layout)
        
        layout.addWidget(api_group)
        layout.addStretch()
        
        return widget
        
    def _create_ui_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        ui_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        ui_layout = QFormLayout(ui_group)
        
        ui_settings = self.config.get("ui", {})
        
        # –¢–µ–º–∞
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["dark", "light", "auto"])
        self.theme_combo.setCurrentText(ui_settings.get("theme", "dark"))
        ui_layout.addRow("–¢–µ–º–∞:", self.theme_combo)
        
        # –Ø–∑—ã–∫
        self.language_combo = QComboBox()
        self.language_combo.addItems(["ru", "en"])
        self.language_combo.setCurrentText(ui_settings.get("language", "ru"))
        ui_layout.addRow("–Ø–∑—ã–∫:", self.language_combo)
        
        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.window_width = QSpinBox()
        self.window_width.setRange(800, 3840)
        self.window_width.setValue(ui_settings.get("window_width", 1400))
        ui_layout.addRow("–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞:", self.window_width)
        
        self.window_height = QSpinBox()
        self.window_height.setRange(600, 2160)
        self.window_height.setValue(ui_settings.get("window_height", 900))
        ui_layout.addRow("–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞:", self.window_height)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.show_tooltips = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        self.show_tooltips.setChecked(ui_settings.get("show_tooltips", True))
        ui_layout.addRow(self.show_tooltips)
        
        self.minimize_to_tray = QCheckBox("–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π")
        self.minimize_to_tray.setChecked(ui_settings.get("minimize_to_tray", False))
        ui_layout.addRow(self.minimize_to_tray)
        
        self.start_minimized = QCheckBox("–ó–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–µ—Ä–Ω—É—Ç—ã–º")
        self.start_minimized.setChecked(ui_settings.get("start_minimized", False))
        ui_layout.addRow(self.start_minimized)
        
        layout.addWidget(ui_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü
        tables_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü")
        tables_layout = QFormLayout(tables_group)
        
        self.table_row_height = QSpinBox()
        self.table_row_height.setRange(20, 100)
        self.table_row_height.setValue(ui_settings.get("table_row_height", 30))
        tables_layout.addRow("–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫:", self.table_row_height)
        
        self.alternating_row_colors = QCheckBox("–ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫")
        self.alternating_row_colors.setChecked(ui_settings.get("alternating_row_colors", True))
        tables_layout.addRow(self.alternating_row_colors)
        
        layout.addWidget(tables_group)
        layout.addStretch()
        
        return widget
        
    def _create_security_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        security_group = QGroupBox("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        security_layout = QFormLayout(security_group)
        
        security_settings = self.config.get("security", {})
        
        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
        self.encrypt_keys = QCheckBox("–®–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏")
        self.encrypt_keys.setChecked(security_settings.get("encrypt_keys", True))
        security_layout.addRow(self.encrypt_keys)
        
        # –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        self.auto_lock = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
        self.auto_lock.setChecked(security_settings.get("auto_lock", False))
        security_layout.addRow(self.auto_lock)
        
        self.auto_lock_minutes = QSpinBox()
        self.auto_lock_minutes.setRange(1, 60)
        self.auto_lock_minutes.setValue(security_settings.get("auto_lock_minutes", 30))
        self.auto_lock_minutes.setSuffix(" –º–∏–Ω—É—Ç")
        self.auto_lock_minutes.setEnabled(self.auto_lock.isChecked())
        security_layout.addRow("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑:", self.auto_lock_minutes)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        self.auto_lock.toggled.connect(self.auto_lock_minutes.setEnabled)
        
        # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        self.clear_clipboard = QCheckBox("–û—á–∏—â–∞—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π")
        self.clear_clipboard.setChecked(security_settings.get("clear_clipboard", True))
        security_layout.addRow(self.clear_clipboard)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
        self.verify_addresses = QCheckBox("–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –∞–¥—Ä–µ—Å–æ–≤")
        self.verify_addresses.setChecked(security_settings.get("verify_addresses", True))
        security_layout.addRow(self.verify_addresses)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.tx_limit_enabled = QCheckBox("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        self.tx_limit_enabled.setChecked(security_settings.get("tx_limit_enabled", False))
        security_layout.addRow(self.tx_limit_enabled)
        
        self.tx_limit_amount = QDoubleSpinBox()
        self.tx_limit_amount.setRange(0.001, 10000)
        self.tx_limit_amount.setDecimals(3)
        self.tx_limit_amount.setValue(security_settings.get("tx_limit_amount", 100))
        self.tx_limit_amount.setSuffix(" BNB")
        self.tx_limit_amount.setEnabled(self.tx_limit_enabled.isChecked())
        security_layout.addRow("–ú–∞–∫—Å. —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", self.tx_limit_amount)
        
        self.tx_limit_enabled.toggled.connect(self.tx_limit_amount.setEnabled)
        
        layout.addWidget(security_group)
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        backup_group = QGroupBox("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        backup_layout = QFormLayout(backup_group)
        
        self.auto_backup = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.auto_backup.setChecked(security_settings.get("auto_backup", False))
        backup_layout.addRow(self.auto_backup)
        
        backup_path_layout = QHBoxLayout()
        self.backup_path = QLineEdit()
        self.backup_path.setText(security_settings.get("backup_path", "./backups"))
        backup_path_layout.addWidget(self.backup_path)
        
        self.browse_backup_btn = QPushButton("üìÅ")
        self.browse_backup_btn.clicked.connect(self.browse_backup_path)
        backup_path_layout.addWidget(self.browse_backup_btn)
        
        backup_layout.addRow("–ü—É—Ç—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:", backup_path_layout)
        
        layout.addWidget(backup_group)
        layout.addStretch()
        
        return widget
        
    def _create_logging_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        logging_group = QGroupBox("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        logging_layout = QFormLayout(logging_group)
        
        logging_settings = self.config.get("logging", {})
        
        # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_level_combo = QComboBox()
        self.log_level_combo.addItems(["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"])
        self.log_level_combo.setCurrentText(logging_settings.get("level", "INFO"))
        logging_layout.addRow("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", self.log_level_combo)
        
        # –§–∞–π–ª –ª–æ–≥–æ–≤
        log_file_layout = QHBoxLayout()
        self.log_file_input = QLineEdit()
        self.log_file_input.setText(logging_settings.get("file", "wallet_sender.log"))
        log_file_layout.addWidget(self.log_file_input)
        
        self.browse_log_btn = QPushButton("üìÅ")
        self.browse_log_btn.clicked.connect(self.browse_log_file)
        log_file_layout.addWidget(self.browse_log_btn)
        
        logging_layout.addRow("–§–∞–π–ª –ª–æ–≥–æ–≤:", log_file_layout)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        self.max_log_size = QSpinBox()
        self.max_log_size.setRange(1, 100)
        self.max_log_size.setValue(logging_settings.get("max_size", 10485760) // 1048576)  # –í MB
        self.max_log_size.setSuffix(" MB")
        logging_layout.addRow("–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", self.max_log_size)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        self.backup_count = QSpinBox()
        self.backup_count.setRange(1, 10)
        self.backup_count.setValue(logging_settings.get("backup_count", 5))
        logging_layout.addRow("–ö–æ–ª-–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:", self.backup_count)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        self.log_to_console = QCheckBox("–í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å")
        self.log_to_console.setChecked(logging_settings.get("log_to_console", True))
        logging_layout.addRow(self.log_to_console)
        
        self.log_transactions = QCheckBox("–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        self.log_transactions.setChecked(logging_settings.get("log_transactions", True))
        logging_layout.addRow(self.log_transactions)
        
        self.log_api_calls = QCheckBox("–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å API –≤—ã–∑–æ–≤—ã")
        self.log_api_calls.setChecked(logging_settings.get("log_api_calls", False))
        logging_layout.addRow(self.log_api_calls)
        
        layout.addWidget(logging_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        log_buttons_layout = QHBoxLayout()
        
        self.open_log_btn = QPushButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥ —Ñ–∞–π–ª")
        self.open_log_btn.clicked.connect(self.open_log_file)
        log_buttons_layout.addWidget(self.open_log_btn)
        
        self.clear_logs_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        self.clear_logs_btn.clicked.connect(self.clear_logs)
        log_buttons_layout.addWidget(self.clear_logs_btn)
        
        layout.addLayout(log_buttons_layout)
        layout.addStretch()
        
        return widget
        
    def _create_import_export_settings(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        export_group = QGroupBox("–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        export_layout = QVBoxLayout(export_group)
        
        export_layout.addWidget(QLabel("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª:"))
        
        export_buttons_layout = QHBoxLayout()
        
        self.export_all_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        self.export_all_btn.clicked.connect(self.export_all_settings)
        export_buttons_layout.addWidget(self.export_all_btn)
        
        self.export_selected_btn = QPushButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        self.export_selected_btn.clicked.connect(self.export_selected_settings)
        export_buttons_layout.addWidget(self.export_selected_btn)
        
        export_layout.addLayout(export_buttons_layout)
        
        layout.addWidget(export_group)
        
        # –ò–º–ø–æ—Ä—Ç
        import_group = QGroupBox("–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        import_layout = QVBoxLayout(import_group)
        
        import_layout.addWidget(QLabel("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞:"))
        
        import_buttons_layout = QHBoxLayout()
        
        self.import_btn = QPushButton("üì• –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        self.import_btn.clicked.connect(self.import_settings)
        import_buttons_layout.addWidget(self.import_btn)
        
        self.import_merge_btn = QPushButton("üîÄ –ò–º–ø–æ—Ä—Ç —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
        self.import_merge_btn.clicked.connect(self.import_merge_settings)
        import_buttons_layout.addWidget(self.import_merge_btn)
        
        import_layout.addLayout(import_buttons_layout)
        
        layout.addWidget(import_group)
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        profiles_group = QGroupBox("–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        profiles_layout = QVBoxLayout(profiles_group)
        
        profiles_layout.addWidget(QLabel("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:"))
        
        self.profiles_list = QListWidget()
        self.profiles_list.setMaximumHeight(150)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = self.config.get("profiles", {})
        for profile_name in profiles.keys():
            self.profiles_list.addItem(profile_name)
            
        profiles_layout.addWidget(self.profiles_list)
        
        profiles_buttons_layout = QHBoxLayout()
        
        self.save_profile_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        self.save_profile_btn.clicked.connect(self.save_profile)
        profiles_buttons_layout.addWidget(self.save_profile_btn)
        
        self.load_profile_btn = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        self.load_profile_btn.clicked.connect(self.load_profile)
        profiles_buttons_layout.addWidget(self.load_profile_btn)
        
        self.delete_profile_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        self.delete_profile_btn.clicked.connect(self.delete_profile)
        profiles_buttons_layout.addWidget(self.delete_profile_btn)
        
        profiles_layout.addLayout(profiles_buttons_layout)
        
        layout.addWidget(profiles_group)
        layout.addStretch()
        
        return widget
        
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.config.set("network", self.network_combo.currentText())
            self.config.set("autosave", self.autosave_check.isChecked())
            self.config.set("confirm_operations", self.confirm_operations_check.isChecked())
            self.config.set("sound_notifications", self.sound_notifications_check.isChecked())
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥
            self.config.set("rewards.enabled", self.rewards_enabled_check.isChecked())
            self.config.set("rewards.min_amount", self.min_reward_amount.value())
            self.config.set("rewards.reward_percentage", self.reward_percentage.value())
            
            # RPC URLs
            self.config.set("rpc_urls.bsc_mainnet", self.mainnet_rpc_input.text())
            self.config.set("rpc_urls.bsc_testnet", self.testnet_rpc_input.text())
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.config.set("connection_timeout", self.connection_timeout.value())
            self.config.set("retry_count", self.retry_count.value())
            self.config.set("auto_switch_rpc", self.auto_switch_rpc.isChecked())
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞
            self.config.set("gas_settings.default_gas_price", self.default_gas_price.value())
            self.config.set("gas_settings.default_gas_limit", self.default_gas_limit.value())
            self.config.set("gas_settings.max_gas_price", self.max_gas_price.value())
            self.config.set("gas_settings.auto_estimate", self.auto_estimate_gas.isChecked())
            self.config.set("gas_settings.use_eip1559", self.use_eip1559.isChecked())
            
            # UI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.config.set("ui.theme", self.theme_combo.currentText())
            self.config.set("ui.language", self.language_combo.currentText())
            self.config.set("ui.window_width", self.window_width.value())
            self.config.set("ui.window_height", self.window_height.value())
            self.config.set("ui.show_tooltips", self.show_tooltips.isChecked())
            self.config.set("ui.minimize_to_tray", self.minimize_to_tray.isChecked())
            self.config.set("ui.start_minimized", self.start_minimized.isChecked())
            self.config.set("ui.table_row_height", self.table_row_height.value())
            self.config.set("ui.alternating_row_colors", self.alternating_row_colors.isChecked())
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self.config.set("security.encrypt_keys", self.encrypt_keys.isChecked())
            self.config.set("security.auto_lock", self.auto_lock.isChecked())
            self.config.set("security.auto_lock_minutes", self.auto_lock_minutes.value())
            self.config.set("security.clear_clipboard", self.clear_clipboard.isChecked())
            self.config.set("security.verify_addresses", self.verify_addresses.isChecked())
            self.config.set("security.tx_limit_enabled", self.tx_limit_enabled.isChecked())
            self.config.set("security.tx_limit_amount", self.tx_limit_amount.value())
            self.config.set("security.auto_backup", self.auto_backup.isChecked())
            self.config.set("security.backup_path", self.backup_path.text())
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            self.config.set("logging.level", self.log_level_combo.currentText())
            self.config.set("logging.file", self.log_file_input.text())
            self.config.set("logging.max_size", self.max_log_size.value() * 1048576)  # –í –±–∞–π—Ç–∞—Ö
            self.config.set("logging.backup_count", self.backup_count.value())
            self.config.set("logging.log_to_console", self.log_to_console.isChecked())
            self.config.set("logging.log_transactions", self.log_transactions.isChecked())
            self.config.set("logging.log_api_calls", self.log_api_calls.isChecked())
            
            # –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.config.set("pancakeswap_router", self.pancake_router_input.text())
            self.config.set("slippage", self.slippage_input.value())
            self.config.set("api_rate_limit", self.api_rate_limit.value())
            self.config.set("rotate_api_keys", self.rotate_api_keys.isChecked())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self.config.save()
            
            self.log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "SUCCESS")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.theme_changed.emit(self.theme_combo.currentText())
            self.language_changed.emit(self.language_combo.currentText())
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", "ERROR")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{str(e)}")
            
    def reset_to_defaults(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.config.reset_to_defaults()
            self.reload_settings()
            self.log("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "INFO")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
            
    def reload_settings(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        self.config.load()
        self.init_ui()  # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.log("‚ôªÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", "INFO")
        
    def test_rpc(self, rpc_url: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            from web3 import Web3
            w3 = Web3(Web3.HTTPProvider(rpc_url))
            if w3.is_connected():
                block_number = w3.eth.block_number
                QMessageBox.information(
                    self, 
                    "–£—Å–ø–µ—Ö", 
                    f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–∫—É—â–∏–π –±–ª–æ–∫: {block_number}"
                )
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{str(e)}")
            
    def test_all_rpcs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö RPC —É–∑–ª–æ–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö RPC
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    def add_rpc(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ RPC —É–∑–ª–∞"""
        text, ok = QInputDialog.getText(
            self, 
            "–î–æ–±–∞–≤–∏—Ç—å RPC", 
            "–í–≤–µ–¥–∏—Ç–µ URL RPC —É–∑–ª–∞:"
        )
        if ok and text:
            self.rpc_list.addItem(text)
            
    def remove_rpc(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ RPC —É–∑–ª–∞"""
        current_item = self.rpc_list.currentItem()
        if current_item:
            self.rpc_list.takeItem(self.rpc_list.row(current_item))
            
    def add_token(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
        layout = QFormLayout(dialog)
        
        name_input = QLineEdit()
        address_input = QLineEdit()
        
        layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", name_input)
        layout.addRow("–ê–¥—Ä–µ—Å:", address_input)
        
        buttons = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel,
            parent=dialog
        )
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addWidget(buttons)
        
        if dialog.exec_() == QDialog.Accepted:
            name = name_input.text()
            address = address_input.text()
            if name and address:
                self.tokens_list.addItem(f"{name}: {address}")
                
    def edit_token(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    def remove_token(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        current_item = self.tokens_list.currentItem()
        if current_item:
            self.tokens_list.takeItem(self.tokens_list.row(current_item))
            
    def add_api_key(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞"""
        from PyQt5.QtWidgets import QInputDialog
        text, ok = QInputDialog.getText(
            self, 
            "–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", 
            "–í–≤–µ–¥–∏—Ç–µ BSCScan API –∫–ª—é—á:"
        )
        if ok and text:
            masked_key = text[:8] + "..." + text[-8:] if len(text) > 16 else text
            self.api_keys_list.addItem(masked_key)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥
            api_keys = self.config.get("bscscan_api_keys", [])
            api_keys.append(text)
            self.config.set("bscscan_api_keys", api_keys)
            
    def remove_api_key(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
        current_item = self.api_keys_list.currentItem()
        if current_item:
            self.api_keys_list.takeItem(self.api_keys_list.row(current_item))
            
    def test_api_key(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    def set_gas_preset(self, gwei: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≥–∞–∑–∞"""
        self.default_gas_price.setValue(gwei)
        
    def browse_backup_path(self):
        """–í—ã–±–æ—Ä –ø—É—Ç–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        if path:
            self.backup_path.setText(path)
            
    def browse_log_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        path, _ = QFileDialog.getSaveFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤",
            "",
            "Log Files (*.log);;All Files (*.*)"
        )
        if path:
            self.log_file_input.setText(path)
            
    def open_log_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        log_file = self.log_file_input.text()
        if Path(log_file).exists():
            import os
            os.startfile(log_file)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            log_file = self.log_file_input.text()
            try:
                open(log_file, 'w').close()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–§–∞–π–ª –ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤:\n{str(e)}")
                
    def export_all_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            "wallet_sender_settings.json",
            "JSON Files (*.json)"
        )
        if path:
            try:
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(self.config.config, f, indent=4, ensure_ascii=False)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{path}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
                
    def export_selected_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    def import_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        path, _ = QFileDialog.getOpenFileName(
            self,
            "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            "",
            "JSON Files (*.json)"
        )
        if path:
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    imported_config = json.load(f)
                self.config.config = imported_config
                self.config.save()
                self.reload_settings()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:\n{str(e)}")
                
    def import_merge_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    def save_profile(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        from PyQt5.QtWidgets import QInputDialog
        name, ok = QInputDialog.getText(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:"
        )
        if ok and name:
            profiles = self.config.get("profiles", {})
            profiles[name] = self.config.config.copy()
            self.config.set("profiles", profiles)
            self.profiles_list.addItem(name)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü—Ä–æ—Ñ–∏–ª—å '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            
    def load_profile(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        current_item = self.profiles_list.currentItem()
        if current_item:
            profile_name = current_item.text()
            profiles = self.config.get("profiles", {})
            if profile_name in profiles:
                self.config.config = profiles[profile_name].copy()
                self.config.save()
                self.reload_settings()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
                
    def delete_profile(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        current_item = self.profiles_list.currentItem()
        if current_item:
            profile_name = current_item.text()
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                profiles = self.config.get("profiles", {})
                if profile_name in profiles:
                    del profiles[profile_name]
                    self.config.set("profiles", profiles)
                    self.profiles_list.takeItem(self.profiles_list.row(current_item))
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —É–¥–∞–ª–µ–Ω!")
