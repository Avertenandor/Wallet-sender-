"""
–í–∫–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import threading
import time
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QProgressBar,
    QSpinBox, QDoubleSpinBox, QComboBox, QTextEdit, QHeaderView,
    QAbstractItemView, QDateEdit, QCheckBox, QMessageBox,
    QMenu, QApplication, QFileDialog
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QTimer, QDate
from PyQt5.QtGui import QColor, QDesktopServices, QUrl

from web3 import Web3
import requests
import csv

from .base_tab import BaseTab
from ...constants import PLEX_CONTRACT, USDT_CONTRACT, BSCSCAN_URL, BSCSCAN_KEYS
from ...utils.logger import get_logger

logger = get_logger(__name__)


class SearchTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    update_results_signal = pyqtSignal(list)
    search_finished_signal = pyqtSignal(int)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
    progress_signal = pyqtSignal(int, str)  # –ø—Ä–æ—Ü–µ–Ω—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.is_searching = False
        self.stop_search_event = threading.Event()
        self.search_thread = None
        self.current_api_key_index = 0
        self.search_results = []
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.update_results_signal.connect(self._update_results_table)
        self.search_finished_signal.connect(self._on_search_finished)
        self.progress_signal.connect(self._update_progress)
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BSC")
        header_layout = QVBoxLayout(header)
        header_label = QLabel("üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        header_label.setStyleSheet("font-weight: bold; color: #4CAF50;")
        header_layout.addWidget(header_label)
        layout.addWidget(header)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        search_group = self._create_search_params_group()
        layout.addWidget(search_group)
        
        # –§–∏–ª—å—Ç—Ä—ã
        filters_group = self._create_filters_group()
        layout.addWidget(filters_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        results_layout = QVBoxLayout(results_group)
        
        self.results_table = QTableWidget(0, 8)
        self.results_table.setHorizontalHeaderLabels([
            'Hash', '–û—Ç', '–ö–æ–º—É', '–°—É–º–º–∞', '–¢–æ–∫–µ–Ω', 
            '–í—Ä–µ–º—è', '–ë–ª–æ–∫', '–°—Ç–∞—Ç—É—Å'
        ])
        
        header = self.results_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(QHeaderView.ResizeToContents)
            header.setSectionResizeMode(0, QHeaderView.Stretch)
        
        self.results_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.results_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.results_table.customContextMenuRequested.connect(self._show_context_menu)
        
        results_layout.addWidget(self.results_table)
        layout.addWidget(results_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å
        progress_layout = QHBoxLayout()
        
        self.progress_bar = QProgressBar()
        progress_layout.addWidget(self.progress_bar)
        
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É")
        progress_layout.addWidget(self.status_label)
        
        layout.addLayout(progress_layout)
        
        # –õ–æ–≥ –ø–æ–∏—Å–∫–∞
        log_group = QGroupBox("–õ–æ–≥ –ø–æ–∏—Å–∫–∞")
        log_layout = QVBoxLayout(log_group)
        
        self.search_log = QTextEdit()
        self.search_log.setReadOnly(True)
        self.search_log.setMaximumHeight(100)
        log_layout.addWidget(self.search_log)
        
        layout.addWidget(log_group)
        
    def _create_search_params_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
        layout = QVBoxLayout(group)
        
        # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        addr_layout = QHBoxLayout()
        addr_layout.addWidget(QLabel("–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:"))
        self.address_input = QLineEdit()
        self.address_input.setPlaceholderText("0x...")
        addr_layout.addWidget(self.address_input)
        layout.addLayout(addr_layout)
        
        # –¢–æ–∫–µ–Ω
        token_layout = QHBoxLayout()
        token_layout.addWidget(QLabel("–¢–æ–∫–µ–Ω:"))
        
        self.token_combo = QComboBox()
        self.token_combo.addItems(['–í—Å–µ', 'PLEX ONE', 'USDT', 'BNB', '–î—Ä—É–≥–æ–π'])
        token_layout.addWidget(self.token_combo)
        
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
        self.custom_token_input.setEnabled(False)
        token_layout.addWidget(self.custom_token_input)
        
        self.token_combo.currentTextChanged.connect(
            lambda t: self.custom_token_input.setEnabled(t == "–î—Ä—É–≥–æ–π")
        )
        
        layout.addLayout(token_layout)
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        direction_layout = QHBoxLayout()
        direction_layout.addWidget(QLabel("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"))
        
        self.direction_combo = QComboBox()
        self.direction_combo.addItems(['–í—Å–µ', '–í—Ö–æ–¥—è—â–∏–µ', '–ò—Å—Ö–æ–¥—è—â–∏–µ'])
        direction_layout.addWidget(self.direction_combo)
        
        direction_layout.addStretch()
        layout.addLayout(direction_layout)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API
        api_layout = QHBoxLayout()
        
        api_layout.addWidget(QLabel("–ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü:"))
        self.max_pages = QSpinBox()
        self.max_pages.setRange(1, 100)
        self.max_pages.setValue(10)
        api_layout.addWidget(self.max_pages)
        
        api_layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:"))
        self.page_size = QSpinBox()
        self.page_size.setRange(10, 10000)
        self.page_size.setValue(1000)
        self.page_size.setSingleStep(100)
        api_layout.addWidget(self.page_size)
        
        api_layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):"))
        self.delay = QDoubleSpinBox()
        self.delay.setRange(0.1, 10)
        self.delay.setValue(1.0)
        self.delay.setSingleStep(0.5)
        api_layout.addWidget(self.delay)
        
        api_layout.addStretch()
        layout.addLayout(api_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.search_btn = QPushButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
        self.search_btn.clicked.connect(self.start_search)
        buttons_layout.addWidget(self.search_btn)
        
        self.stop_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        self.stop_btn.clicked.connect(self.stop_search)
        buttons_layout.addWidget(self.stop_btn)
        
        self.clear_btn = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_btn.clicked.connect(self.clear_results)
        buttons_layout.addWidget(self.clear_btn)
        
        self.export_btn = QPushButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        self.export_btn.clicked.connect(self.export_results)
        buttons_layout.addWidget(self.export_btn)
        
        self.import_rewards_btn = QPushButton("üéÅ –í –Ω–∞–≥—Ä–∞–¥—ã")
        self.import_rewards_btn.clicked.connect(self.import_to_rewards)
        buttons_layout.addWidget(self.import_rewards_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        return group
        
    def _create_filters_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        group = QGroupBox("–§–∏–ª—å—Ç—Ä—ã")
        layout = QVBoxLayout(group)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–º–º–µ
        amount_layout = QHBoxLayout()
        
        self.amount_filter_check = QCheckBox("–§–∏–ª—å—Ç—Ä –ø–æ —Å—É–º–º–µ:")
        amount_layout.addWidget(self.amount_filter_check)
        
        amount_layout.addWidget(QLabel("–û—Ç:"))
        self.min_amount = QDoubleSpinBox()
        self.min_amount.setRange(0, 1000000)
        self.min_amount.setDecimals(8)
        self.min_amount.setValue(0.01)
        self.min_amount.setEnabled(False)
        amount_layout.addWidget(self.min_amount)
        
        amount_layout.addWidget(QLabel("–î–æ:"))
        self.max_amount = QDoubleSpinBox()
        self.max_amount.setRange(0, 1000000)
        self.max_amount.setDecimals(8)
        self.max_amount.setValue(1000)
        self.max_amount.setEnabled(False)
        amount_layout.addWidget(self.max_amount)
        
        self.amount_filter_check.toggled.connect(self.min_amount.setEnabled)
        self.amount_filter_check.toggled.connect(self.max_amount.setEnabled)
        
        amount_layout.addStretch()
        layout.addLayout(amount_layout)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        date_layout = QHBoxLayout()
        
        self.date_filter_check = QCheckBox("–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ:")
        date_layout.addWidget(self.date_filter_check)
        
        date_layout.addWidget(QLabel("–°:"))
        self.date_from = QDateEdit()
        self.date_from.setCalendarPopup(True)
        self.date_from.setDate(QDate.currentDate().addDays(-30))
        self.date_from.setEnabled(False)
        date_layout.addWidget(self.date_from)
        
        date_layout.addWidget(QLabel("–ü–æ:"))
        self.date_to = QDateEdit()
        self.date_to.setCalendarPopup(True)
        self.date_to.setDate(QDate.currentDate())
        self.date_to.setEnabled(False)
        date_layout.addWidget(self.date_to)
        
        self.date_filter_check.toggled.connect(self.date_from.setEnabled)
        self.date_filter_check.toggled.connect(self.date_to.setEnabled)
        
        date_layout.addStretch()
        layout.addLayout(date_layout)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        extra_layout = QHBoxLayout()
        
        self.only_success = QCheckBox("–¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ")
        self.only_success.setChecked(True)
        extra_layout.addWidget(self.only_success)
        
        self.unique_senders = QCheckBox("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏")
        extra_layout.addWidget(self.unique_senders)
        
        self.min_tx_count = QSpinBox()
        self.min_tx_count.setRange(1, 100)
        self.min_tx_count.setValue(1)
        self.min_tx_count.setEnabled(False)
        
        self.min_tx_check = QCheckBox("–ú–∏–Ω. —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
        self.min_tx_check.toggled.connect(self.min_tx_count.setEnabled)
        extra_layout.addWidget(self.min_tx_check)
        extra_layout.addWidget(self.min_tx_count)
        
        extra_layout.addStretch()
        layout.addLayout(extra_layout)
        
        return group
        
    def start_search(self):
        """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if self.is_searching:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
        address = self.address_input.text().strip()
        if not address:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!")
            return
            
        if not Web3.is_address(address):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!")
            return
            
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
        self.is_searching = True
        self.stop_search_event.clear()
        self.search_results.clear()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.search_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.progress_bar.setValue(0)
        self.search_log.clear()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        self.search_thread = threading.Thread(
            target=self._search_worker,
            args=(address,),
            daemon=True
        )
        self.search_thread.start()
        
        self.log(f"üîç –ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address[:8]}...{address[-6:]}", "INFO")
        
    def stop_search(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"""
        if self.is_searching:
            self.stop_search_event.set()
            self.log("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞...", "WARNING")
            
    def _search_worker(self, address: str):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –ø–æ–∏—Å–∫–∞"""
        try:
            self._log_to_search("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            token_filter = self._get_token_filter()
            direction = self.direction_combo.currentText()
            max_pages = self.max_pages.value()
            page_size = self.page_size.value()
            delay = self.delay.value()
            
            all_transactions = []
            page = 1
            
            while page <= max_pages:
                if self.stop_search_event.is_set():
                    self._log_to_search("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int((page / max_pages) * 100)
                self.progress_signal.emit(progress, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{max_pages}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                params = {
                    'module': 'account',
                    'action': 'tokentx' if token_filter else 'txlist',
                    'address': address,
                    'page': page,
                    'offset': page_size,
                    'sort': 'desc',
                    'apikey': BSCSCAN_KEYS[self.current_api_key_index] if BSCSCAN_KEYS else ''
                }
                
                if token_filter:
                    params['contractaddress'] = token_filter
                    
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                try:
                    response = requests.get(BSCSCAN_URL, params=params, timeout=10)
                    data = response.json()
                    
                    if data.get('status') != '1':
                        self._log_to_search(f"–û—à–∏–±–∫–∞ API: {data.get('message', 'Unknown')}")
                        break
                        
                    transactions = data.get('result', [])
                    
                    if not transactions:
                        self._log_to_search("–ë–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        break
                        
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    filtered = self._filter_transactions(transactions, address, direction)
                    all_transactions.extend(filtered)
                    
                    self._log_to_search(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –Ω–∞–π–¥–µ–Ω–æ {len(filtered)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    
                except Exception as e:
                    self._log_to_search(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    self._rotate_api_key()
                    
                page += 1
                time.sleep(delay)
                
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            final_results = self._apply_filters(all_transactions)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.search_results = final_results
            self.update_results_signal.emit(final_results)
            
            self._log_to_search(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {len(final_results)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø–æ–∏—Å–∫–∞: {e}")
            self._log_to_search(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.search_finished_signal.emit(len(self.search_results))
            
    def _get_token_filter(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ–∫–µ–Ω–∞"""
        token = self.token_combo.currentText()
        if token == "PLEX ONE":
            return PLEX_CONTRACT
        elif token == "USDT":
            return USDT_CONTRACT
        elif token == "–î—Ä—É–≥–æ–π":
            return self.custom_token_input.text().strip()
        return None
        
    def _filter_transactions(self, transactions: List[Dict], address: str, direction: str) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        filtered = []
        
        for tx in transactions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if direction == "–í—Ö–æ–¥—è—â–∏–µ" and tx.get('to', '').lower() != address.lower():
                continue
            elif direction == "–ò—Å—Ö–æ–¥—è—â–∏–µ" and tx.get('from', '').lower() != address.lower():
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if self.only_success.isChecked():
                if tx.get('isError', '0') != '0' or tx.get('txreceipt_status', '1') != '1':
                    continue
                    
            filtered.append(tx)
            
        return filtered
        
    def _apply_filters(self, transactions: List[Dict]) -> List[Dict]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        filtered = transactions.copy()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–º–º–µ
        if self.amount_filter_check.isChecked():
            min_val = self.min_amount.value()
            max_val = self.max_amount.value()
            
            filtered = [
                tx for tx in filtered
                if min_val <= self._get_tx_value(tx) <= max_val
            ]
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if self.date_filter_check.isChecked():
            date_from = self.date_from.date().toPyDate()
            date_to = self.date_to.date().toPyDate()
            
            filtered = [
                tx for tx in filtered
                if self._check_tx_date(tx, date_from, date_to)
            ]
            
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏
        if self.unique_senders.isChecked():
            seen_senders = set()
            unique_filtered = []
            
            for tx in filtered:
                sender = tx.get('from', '').lower()
                if sender not in seen_senders:
                    seen_senders.add(sender)
                    unique_filtered.append(tx)
                    
            filtered = unique_filtered
            
        # –ú–∏–Ω–∏–º—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if self.min_tx_check.isChecked():
            min_count = self.min_tx_count.value()
            sender_counts = {}
            
            for tx in filtered:
                sender = tx.get('from', '').lower()
                sender_counts[sender] = sender_counts.get(sender, 0) + 1
                
            filtered = [
                tx for tx in filtered
                if sender_counts.get(tx.get('from', '').lower(), 0) >= min_count
            ]
            
        return filtered
        
    def _get_tx_value(self, tx: Dict) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            value = float(tx.get('value', 0))
            decimals = int(tx.get('tokenDecimal', 18))
            return value / (10 ** decimals)
        except:
            return 0
            
    def _check_tx_date(self, tx: Dict, date_from, date_to) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            timestamp = int(tx.get('timeStamp', 0))
            tx_date = datetime.fromtimestamp(timestamp).date()
            return date_from <= tx_date <= date_to
        except:
            return False
            
    def _rotate_api_key(self):
        """–†–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–∞"""
        if BSCSCAN_KEYS:
            self.current_api_key_index = (self.current_api_key_index + 1) % len(BSCSCAN_KEYS)
            self._log_to_search(f"–°–º–µ–Ω–∞ API –∫–ª—é—á–∞ –Ω–∞ #{self.current_api_key_index + 1}")
            
    def _log_to_search(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        QTimer.singleShot(0, lambda: self.search_log.append(message))
        
    @pyqtSlot(list)
    def _update_results_table(self, transactions: List[Dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            self.results_table.setRowCount(0)
            
            for tx in transactions[:1000]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                row = self.results_table.rowCount()
                self.results_table.insertRow(row)
                
                # Hash
                hash_item = QTableWidgetItem(tx.get('hash', '')[:10] + '...')
                self.results_table.setItem(row, 0, hash_item)
                
                # –û—Ç
                from_addr = tx.get('from', '')
                from_item = QTableWidgetItem(f"{from_addr[:6]}...{from_addr[-4:]}")
                self.results_table.setItem(row, 1, from_item)
                
                # –ö–æ–º—É
                to_addr = tx.get('to', '')
                to_item = QTableWidgetItem(f"{to_addr[:6]}...{to_addr[-4:]}")
                self.results_table.setItem(row, 2, to_item)
                
                # –°—É–º–º–∞
                value = self._get_tx_value(tx)
                value_item = QTableWidgetItem(f"{value:.8f}")
                self.results_table.setItem(row, 3, value_item)
                
                # –¢–æ–∫–µ–Ω
                token = tx.get('tokenSymbol', 'BNB')
                self.results_table.setItem(row, 4, QTableWidgetItem(token))
                
                # –í—Ä–µ–º—è
                timestamp = int(tx.get('timeStamp', 0))
                time_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M')
                self.results_table.setItem(row, 5, QTableWidgetItem(time_str))
                
                # –ë–ª–æ–∫
                block = tx.get('blockNumber', '')
                self.results_table.setItem(row, 6, QTableWidgetItem(block))
                
                # –°—Ç–∞—Ç—É—Å
                is_error = tx.get('isError', '0') != '0'
                status_item = QTableWidgetItem("‚ùå –û—à–∏–±–∫–∞" if is_error else "‚úÖ –£—Å–ø–µ—à–Ω–æ")
                if is_error:
                    status_item.setBackground(QColor('#440000'))
                else:
                    status_item.setBackground(QColor('#004400'))
                self.results_table.setItem(row, 7, status_item)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            
    @pyqtSlot(int, str)
    def _update_progress(self, value: int, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.setValue(value)
        self.status_label.setText(message)
        
    @pyqtSlot(int)
    def _on_search_finished(self, count: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        self.is_searching = False
        self.search_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setValue(100)
        self.status_label.setText(f"–ù–∞–π–¥–µ–Ω–æ: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        self.log(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "SUCCESS")
        
    def _show_context_menu(self, position):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        if self.results_table.currentRow() < 0:
            return
            
        menu = QMenu()
        
        copy_hash = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å hash")
        copy_from = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        copy_to = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        menu.addSeparator()
        open_bscscan = menu.addAction("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        menu.addSeparator()
        add_to_rewards = menu.addAction("üéÅ –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        
        action = menu.exec_(self.results_table.viewport().mapToGlobal(position))
        
        if action:
            row = self.results_table.currentRow()
            
            if row < len(self.search_results):
                tx = self.search_results[row]
                
                if action == copy_hash:
                    QApplication.clipboard().setText(tx.get('hash', ''))
                    self.log("Hash —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                    
                elif action == copy_from:
                    QApplication.clipboard().setText(tx.get('from', ''))
                    self.log("–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                    
                elif action == copy_to:
                    QApplication.clipboard().setText(tx.get('to', ''))
                    self.log("–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                    
                elif action == open_bscscan:
                    url = f"https://bscscan.com/tx/{tx.get('hash', '')}"
                    QDesktopServices.openUrl(QUrl(url))
                    self.log("–û—Ç–∫—Ä—ã—Ç–æ –≤ BscScan", "INFO")
                    
                elif action == add_to_rewards:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–≥—Ä–∞–¥—ã
                    self.log("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–≥—Ä–∞–¥—ã", "SUCCESS")
                    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results_table.setRowCount(0)
        self.search_results.clear()
        self.search_log.clear()
        self.progress_bar.setValue(0)
        self.status_label.setText("–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É")
        self.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã", "INFO")
        
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        if not self.search_results:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
            
        path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
            f"search_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV Files (*.csv)"
        )
        
        if path:
            try:
                with open(path, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    writer.writerow([
                        'Hash', 'From', 'To', 'Value', 'Token',
                        'Timestamp', 'Block', 'Status'
                    ])
                    
                    # –î–∞–Ω–Ω—ã–µ
                    for tx in self.search_results:
                        writer.writerow([
                            tx.get('hash', ''),
                            tx.get('from', ''),
                            tx.get('to', ''),
                            self._get_tx_value(tx),
                            tx.get('tokenSymbol', 'BNB'),
                            datetime.fromtimestamp(int(tx.get('timeStamp', 0))).isoformat(),
                            tx.get('blockNumber', ''),
                            'Error' if tx.get('isError', '0') != '0' else 'Success'
                        ])
                        
                self.log(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.search_results)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "SUCCESS")
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{path}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
                
    def import_to_rewards(self):
        """–ò–º–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –Ω–∞–≥—Ä–∞–¥—ã"""
        if not self.search_results:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞!")
            return
            
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥
        count = len(self.search_results)
        self.log(f"üéÅ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –Ω–∞–≥—Ä–∞–¥—ã", "SUCCESS")
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥")
