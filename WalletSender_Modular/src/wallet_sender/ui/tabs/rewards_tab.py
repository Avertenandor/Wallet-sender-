"""
–í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import json
import threading
from typing import Dict, List, Optional, Any
from datetime import datetime

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit, QWidget,
    QPushButton, QTableWidget, QTableWidgetItem, QProgressBar,
    QSpinBox, QDoubleSpinBox, QComboBox, QTextEdit, QHeaderView,
    QAbstractItemView, QMessageBox, QMenu, QApplication,
    QFileDialog, QDialog, QDialogButtonBox, QListWidget,
    QCheckBox, QSplitter
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QTimer
from PyQt5.QtGui import QColor

from web3 import Web3
import csv

from .base_tab import BaseTab
from ...core.wallet_manager import WalletManager
from ...services.token_service import TokenService
from ...services.job_router import get_job_router
from ...constants import PLEX_CONTRACT, USDT_CONTRACT
from ...database.database import Database
from ...utils.logger import get_logger

logger = get_logger(__name__)


class RewardsTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–≥—Ä–∞–¥"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    update_rewards_signal = pyqtSignal(list)
    sending_progress_signal = pyqtSignal(int, str)
    reward_sent_signal = pyqtSignal(str, bool, str)  # address, success, tx_hash
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.wallet_manager = None
        self.wallet_sender = None
        self.token_service = None
        self.database = Database()
        self.job_router = get_job_router()
        self.current_job_id = None
        self.current_job_tag = None

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.rewards_list = []
        self.selected_rewards = []
        self.is_sending = False
        self.rewards_configs = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±–µ–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á
        self.job_router.register_callback('job_progress', self._on_job_progress)
        self.job_router.register_callback('job_completed', self._on_job_completed)
        self.job_router.register_callback('job_failed', self._on_job_failed)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.update_rewards_signal.connect(self._update_rewards_table)
        self.sending_progress_signal.connect(self._update_sending_progress)
        self.reward_sent_signal.connect(self._on_reward_sent)
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥")
        header_layout = QVBoxLayout(header)
        header_label = QLabel("üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        header_label.setStyleSheet("font-weight: bold; color: #4CAF50;")
        header_layout.addWidget(header_label)
        layout.addWidget(header)
        
        # Splitter –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥
        left_widget = self._create_rewards_panel()
        splitter.addWidget(left_widget)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        right_widget = self._create_control_panel()
        splitter.addWidget(right_widget)
        
        splitter.setSizes([700, 400])
        layout.addWidget(splitter)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        status_group = self._create_status_panel()
        layout.addWidget(status_group)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        log_group = QGroupBox("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
        log_layout = QVBoxLayout(log_group)
        
        self.operation_log = QTextEdit()
        self.operation_log.setReadOnly(True)
        self.operation_log.setMaximumHeight(100)
        log_layout.addWidget(self.operation_log)
        
        layout.addWidget(log_group)
        
    @pyqtSlot(list)
    def _update_rewards_table(self, rewards: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.
        –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏: address, amount, token, source, created_at, status, tx_hash.
        """
        try:
            self.rewards_list = rewards or []
            self.rewards_table.setRowCount(0)
            for reward in self.rewards_list:
                row = self.rewards_table.rowCount()
                self.rewards_table.insertRow(row)
                # ‚úì —á–µ–∫–±–æ–∫—Å
                check_item = QTableWidgetItem()
                check_item.setCheckState(Qt.Checked)
                self.rewards_table.setItem(row, 0, check_item)
                # –ê–¥—Ä–µ—Å
                addr_item = QTableWidgetItem(reward.get('address', ''))
                addr_item.setData(Qt.UserRole, reward.get('address', ''))
                self.rewards_table.setItem(row, 1, addr_item)
                # –°—É–º–º–∞
                self.rewards_table.setItem(row, 2, QTableWidgetItem(str(reward.get('amount', ''))))
                # –¢–æ–∫–µ–Ω
                self.rewards_table.setItem(row, 3, QTableWidgetItem(reward.get('token', '')))
                # –ò—Å—Ç–æ—á–Ω–∏–∫
                self.rewards_table.setItem(row, 4, QTableWidgetItem(reward.get('source', '')))
                # –î–∞—Ç–∞
                self.rewards_table.setItem(row, 5, QTableWidgetItem(reward.get('created_at', '')))
                # –°—Ç–∞—Ç—É—Å
                self.rewards_table.setItem(row, 6, QTableWidgetItem(reward.get('status', 'New')))
                # TX Hash
                tx = reward.get('tx_hash', '')
                tx_item = QTableWidgetItem(f"{tx[:10]}..." if tx else '')
                tx_item.setData(Qt.UserRole, tx)
                self.rewards_table.setItem(row, 7, tx_item)
            self._update_statistics()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥: {e}")

    def _create_rewards_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–≥—Ä–∞–¥"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        layout.addWidget(QLabel("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"))
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥
        self.rewards_table = QTableWidget(0, 8)
        self.rewards_table.setHorizontalHeaderLabels([
            '‚úì', '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è', '–°—É–º–º–∞', '–¢–æ–∫–µ–Ω', 
            '–ò—Å—Ç–æ—á–Ω–∏–∫', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', 'TX Hash'
        ])
        
        header = self.rewards_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(0, QHeaderView.Fixed)
            header.resizeSection(0, 30)
            header.setSectionResizeMode(1, QHeaderView.Stretch)
            for i in range(2, 8):
                header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        
        self.rewards_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.rewards_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.rewards_table.customContextMenuRequested.connect(self._show_context_menu)
        
        layout.addWidget(self.rewards_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        buttons_layout = QHBoxLayout()
        
        self.add_reward_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
        self.add_reward_btn.clicked.connect(self.add_reward_manual)
        buttons_layout.addWidget(self.add_reward_btn)
        
        self.import_csv_btn = QPushButton("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ CSV")
        self.import_csv_btn.clicked.connect(self.import_from_csv)
        buttons_layout.addWidget(self.import_csv_btn)
        
        self.export_csv_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        self.export_csv_btn.clicked.connect(self.export_to_csv)
        buttons_layout.addWidget(self.export_csv_btn)
        
        self.clear_btn = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.clear_btn.clicked.connect(self.clear_rewards)
        buttons_layout.addWidget(self.clear_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        select_layout = QHBoxLayout()
        
        self.select_all_btn = QPushButton("‚òë –í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        self.select_all_btn.clicked.connect(self.select_all_rewards)
        select_layout.addWidget(self.select_all_btn)
        
        self.deselect_all_btn = QPushButton("‚òê –°–Ω—è—Ç—å –≤—ã–±–æ—Ä")
        self.deselect_all_btn.clicked.connect(self.deselect_all_rewards)
        select_layout.addWidget(self.deselect_all_btn)
        
        self.remove_selected_btn = QPushButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        self.remove_selected_btn.clicked.connect(self.remove_selected_rewards)
        select_layout.addWidget(self.remove_selected_btn)
        
        select_layout.addStretch()
        layout.addLayout(select_layout)
        
        return widget
        
    def _create_control_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥
        config_group = QGroupBox("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥")
        config_layout = QVBoxLayout(config_group)
        
        # –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        config_layout.addWidget(QLabel("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"))
        
        self.configs_list = QListWidget()
        self.configs_list.setMaximumHeight(100)
        self.configs_list.itemDoubleClicked.connect(self.load_config)
        config_layout.addWidget(self.configs_list)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        config_buttons_layout = QHBoxLayout()
        
        self.save_config_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_config_btn.clicked.connect(self.save_config)
        config_buttons_layout.addWidget(self.save_config_btn)
        
        self.load_config_btn = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å")
        self.load_config_btn.clicked.connect(self.load_config)
        config_buttons_layout.addWidget(self.load_config_btn)
        
        self.delete_config_btn = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")
        self.delete_config_btn.clicked.connect(self.delete_config)
        config_buttons_layout.addWidget(self.delete_config_btn)
        
        config_layout.addLayout(config_buttons_layout)
        
        layout.addWidget(config_group)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        sending_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏")
        sending_layout = QVBoxLayout(sending_group)
        
        # –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞
        token_layout = QHBoxLayout()
        token_layout.addWidget(QLabel("–¢–æ–∫–µ–Ω –Ω–∞–≥—Ä–∞–¥—ã:"))
        
        self.reward_token_combo = QComboBox()
        self.reward_token_combo.addItems(['PLEX ONE', 'USDT', 'BNB'])
        token_layout.addWidget(self.reward_token_combo)
        
        sending_layout.addLayout(token_layout)
        
        # –°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã
        amount_layout = QHBoxLayout()
        amount_layout.addWidget(QLabel("–°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã:"))
        
        self.reward_amount = QDoubleSpinBox()
        self.reward_amount.setRange(0.00001, 10000)
        self.reward_amount.setDecimals(8)
        self.reward_amount.setValue(0.1)
        amount_layout.addWidget(self.reward_amount)
        
        self.use_percentage = QCheckBox("% –æ—Ç —Å—É–º–º—ã TX")
        amount_layout.addWidget(self.use_percentage)
        
        self.percentage_amount = QDoubleSpinBox()
        self.percentage_amount.setRange(0.01, 100)
        self.percentage_amount.setDecimals(2)
        self.percentage_amount.setValue(1.0)
        self.percentage_amount.setSuffix(" %")
        self.percentage_amount.setEnabled(False)
        amount_layout.addWidget(self.percentage_amount)
        
        self.use_percentage.toggled.connect(self.percentage_amount.setEnabled)
        self.use_percentage.toggled.connect(lambda checked: self.reward_amount.setEnabled(not checked))
        
        sending_layout.addLayout(amount_layout)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
        gas_layout = QHBoxLayout()
        gas_layout.addWidget(QLabel("–¶–µ–Ω–∞ –≥–∞–∑–∞ (Gwei):"))
        
        self.gas_price = QDoubleSpinBox()
        self.gas_price.setRange(1, 100)
        self.gas_price.setDecimals(1)
        self.gas_price.setValue(5)
        gas_layout.addWidget(self.gas_price)
        
        gas_layout.addWidget(QLabel("–õ–∏–º–∏—Ç –≥–∞–∑–∞:"))
        
        self.gas_limit = QSpinBox()
        self.gas_limit.setRange(21000, 500000)
        self.gas_limit.setValue(100000)
        gas_layout.addWidget(self.gas_limit)
        
        sending_layout.addLayout(gas_layout)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        delay_layout = QHBoxLayout()
        delay_layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Å–µ–∫):"))
        
        self.send_delay = QDoubleSpinBox()
        self.send_delay.setRange(0.1, 60)
        self.send_delay.setValue(2)
        self.send_delay.setSingleStep(0.5)
        delay_layout.addWidget(self.send_delay)
        
        sending_layout.addLayout(delay_layout)
        
        layout.addWidget(sending_group)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_buttons_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")
        send_buttons_layout = QVBoxLayout(send_buttons_group)
        
        self.send_rewards_btn = QPushButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã")
        self.send_rewards_btn.clicked.connect(self.start_sending_rewards)
        send_buttons_layout.addWidget(self.send_rewards_btn)
        
        self.stop_sending_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
        self.stop_sending_btn.setEnabled(False)
        self.stop_sending_btn.clicked.connect(self.stop_sending_rewards)
        send_buttons_layout.addWidget(self.stop_sending_btn)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.sending_progress = QProgressBar()
        send_buttons_layout.addWidget(self.sending_progress)
        
        self.sending_status = QLabel("–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")
        send_buttons_layout.addWidget(self.sending_status)
        
        layout.addWidget(send_buttons_group)
        
        layout.addStretch()
        
        return widget
        
    def _create_status_panel(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        layout = QHBoxLayout(group)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.total_rewards_label = QLabel("–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: 0")
        layout.addWidget(self.total_rewards_label)
        
        # –í—ã–±—Ä–∞–Ω–æ
        self.selected_rewards_label = QLabel("–í—ã–±—Ä–∞–Ω–æ: 0")
        layout.addWidget(self.selected_rewards_label)
        
        # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.sent_rewards_label = QLabel("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0")
        layout.addWidget(self.sent_rewards_label)
        
        # –û—à–∏–±–∫–∏
        self.failed_rewards_label = QLabel("–û—à–∏–±–æ–∫: 0")
        layout.addWidget(self.failed_rewards_label)
        
        layout.addStretch()
        
        # –û–±—â–∞—è —Å—É–º–º–∞
        self.total_amount_label = QLabel("–û–±—â–∞—è —Å—É–º–º–∞: 0")
        layout.addWidget(self.total_amount_label)
        
        return group
        
    def add_reward_manual(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤—Ä—É—á–Ω—É—é"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
        dialog.resize(400, 300)
        
        layout = QVBoxLayout(dialog)
        
        # –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        layout.addWidget(QLabel("–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"))
        address_input = QLineEdit()
        address_input.setPlaceholderText("0x...")
        layout.addWidget(address_input)
        
        # –°—É–º–º–∞
        layout.addWidget(QLabel("–°—É–º–º–∞:"))
        amount_input = QDoubleSpinBox()
        amount_input.setRange(0.00001, 10000)
        amount_input.setDecimals(8)
        amount_input.setValue(0.1)
        layout.addWidget(amount_input)
        
        # –¢–æ–∫–µ–Ω
        layout.addWidget(QLabel("–¢–æ–∫–µ–Ω:"))
        token_combo = QComboBox()
        token_combo.addItems(['PLEX ONE', 'USDT', 'BNB'])
        layout.addWidget(token_combo)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫
        layout.addWidget(QLabel("–ò—Å—Ç–æ—á–Ω–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):"))
        source_input = QLineEdit()
        source_input.setPlaceholderText("TX hash –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
        layout.addWidget(source_input)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel,
            parent=dialog
        )
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addWidget(buttons)
        
        if dialog.exec_() == QDialog.Accepted:
            address = address_input.text().strip()
            
            if not address:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
                return
                
            if not Web3.is_address(address):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!")
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            reward = {
                'address': address,
                'amount': amount_input.value(),
                'token': token_combo.currentText(),
                'source': source_input.text() or 'Manual',
                'date_added': datetime.now(),
                'status': 'Pending',
                'tx_hash': ''
            }
            
            self.rewards_list.append(reward)
            self._add_reward_to_table(reward)
            self._update_statistics()
            
            self.log(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: {address[:8]}...{address[-6:]} - {reward['amount']} {reward['token']}", "SUCCESS")
            
    def import_from_csv(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        path, _ = QFileDialog.getOpenFileName(
            self,
            "–ò–º–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –∏–∑ CSV",
            "",
            "CSV Files (*.csv)"
        )
        
        if not path:
            return
            
        try:
            imported_count = 0
            
            with open(path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                
                for row in reader:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if 'address' not in row or 'amount' not in row:
                        continue
                        
                    address = row['address'].strip()
                    
                    if not Web3.is_address(address):
                        continue
                        
                    try:
                        amount = float(row['amount'])
                    except ValueError:
                        continue
                        
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                    reward = {
                        'address': address,
                        'amount': amount,
                        'token': row.get('token', 'PLEX ONE'),
                        'source': row.get('source', 'CSV Import'),
                        'date_added': datetime.now(),
                        'status': 'Pending',
                        'tx_hash': ''
                    }
                    
                    self.rewards_list.append(reward)
                    self._add_reward_to_table(reward)
                    imported_count += 1
                    
            self._update_statistics()
            
            self.log(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –Ω–∞–≥—Ä–∞–¥", "SUCCESS")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –Ω–∞–≥—Ä–∞–¥ –∏–∑ CSV")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CSV: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:\n{str(e)}")
            
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –≤ CSV —Ñ–∞–π–ª"""
        if not self.rewards_list:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
            
        path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –≤ CSV",
            f"rewards_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV Files (*.csv)"
        )
        
        if not path:
            return
            
        try:
            with open(path, 'w', newline='', encoding='utf-8') as f:
                fieldnames = ['address', 'amount', 'token', 'source', 'date_added', 'status', 'tx_hash']
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                
                writer.writeheader()
                
                for reward in self.rewards_list:
                    row = reward.copy()
                    if isinstance(row['date_added'], datetime):
                        row['date_added'] = row['date_added'].isoformat()
                    writer.writerow(row)
                    
            self.log(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.rewards_list)} –Ω–∞–≥—Ä–∞–¥", "SUCCESS")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
            
    def _add_reward_to_table(self, reward: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row = self.rewards_table.rowCount()
        self.rewards_table.insertRow(row)
        
        # –ß–µ–∫–±–æ–∫—Å
        checkbox = QTableWidgetItem()
        checkbox.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
        checkbox.setCheckState(Qt.Unchecked)
        self.rewards_table.setItem(row, 0, checkbox)
        
        # –ê–¥—Ä–µ—Å
        address = reward['address']
        address_item = QTableWidgetItem(f"{address[:8]}...{address[-6:]}")
        address_item.setData(Qt.UserRole, address)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
        self.rewards_table.setItem(row, 1, address_item)
        
        # –°—É–º–º–∞
        self.rewards_table.setItem(row, 2, QTableWidgetItem(f"{reward['amount']:.8f}"))
        
        # –¢–æ–∫–µ–Ω
        self.rewards_table.setItem(row, 3, QTableWidgetItem(reward['token']))
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫
        self.rewards_table.setItem(row, 4, QTableWidgetItem(reward['source']))
        
        # –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        date_str = reward['date_added'].strftime('%Y-%m-%d %H:%M') if isinstance(reward['date_added'], datetime) else str(reward['date_added'])
        self.rewards_table.setItem(row, 5, QTableWidgetItem(date_str))
        
        # –°—Ç–∞—Ç—É—Å
        status_item = QTableWidgetItem(reward['status'])
        if reward['status'] == 'Sent':
            status_item.setBackground(QColor('#004400'))
        elif reward['status'] == 'Failed':
            status_item.setBackground(QColor('#440000'))
        self.rewards_table.setItem(row, 6, status_item)
        
        # TX Hash
        tx_hash = reward.get('tx_hash', '')
        if tx_hash:
            tx_item = QTableWidgetItem(f"{tx_hash[:10]}...")
            tx_item.setData(Qt.UserRole, tx_hash)
        else:
            tx_item = QTableWidgetItem("")
        self.rewards_table.setItem(row, 7, tx_item)
        
    def _update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = len(self.rewards_list)
        selected = sum(1 for i in range(self.rewards_table.rowCount()) 
                      if self.rewards_table.item(i, 0).checkState() == Qt.Checked)
        sent = sum(1 for r in self.rewards_list if r['status'] == 'Sent')
        failed = sum(1 for r in self.rewards_list if r['status'] == 'Failed')
        
        self.total_rewards_label.setText(f"–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {total}")
        self.selected_rewards_label.setText(f"–í—ã–±—Ä–∞–Ω–æ: {selected}")
        self.sent_rewards_label.setText(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
        self.failed_rewards_label.setText(f"–û—à–∏–±–æ–∫: {failed}")
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        total_amount = 0
        for i in range(self.rewards_table.rowCount()):
            if self.rewards_table.item(i, 0).checkState() == Qt.Checked:
                amount_text = self.rewards_table.item(i, 2).text()
                try:
                    total_amount += float(amount_text)
                except:
                    pass
                    
        self.total_amount_label.setText(f"–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.8f}")
        
    def select_all_rewards(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã"""
        for i in range(self.rewards_table.rowCount()):
            self.rewards_table.item(i, 0).setCheckState(Qt.Checked)
        self._update_statistics()
        
    def deselect_all_rewards(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥"""
        for i in range(self.rewards_table.rowCount()):
            self.rewards_table.item(i, 0).setCheckState(Qt.Unchecked)
        self._update_statistics()
        
    def remove_selected_rewards(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"""
        rows_to_remove = []
        
        for i in range(self.rewards_table.rowCount()):
            if self.rewards_table.item(i, 0).checkState() == Qt.Checked:
                rows_to_remove.append(i)
                
        if not rows_to_remove:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
            
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å {len(rows_to_remove)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –£–¥–∞–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
            for row in reversed(rows_to_remove):
                self.rewards_table.removeRow(row)
                del self.rewards_list[row]
                
            self._update_statistics()
            self.log(f"–£–¥–∞–ª–µ–Ω–æ {len(rows_to_remove)} –Ω–∞–≥—Ä–∞–¥", "INFO")
            
    def clear_rewards(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥"""
        if not self.rewards_list:
            return
            
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.rewards_table.setRowCount(0)
            self.rewards_list.clear()
            self._update_statistics()
            self.log("–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –æ—á–∏—â–µ–Ω", "INFO")
            
    def start_sending_rewards(self):
        """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–≥—Ä–∞–¥ —á–µ—Ä–µ–∑ JobRouter"""
        if self.is_sending:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
            
        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        selected_rewards = []
        for i in range(self.rewards_table.rowCount()):
            if self.rewards_table.item(i, 0).checkState() == Qt.Checked:
                if i < len(self.rewards_list) and self.rewards_list[i]['status'] != 'Sent':
                    reward = self.rewards_list[i].copy()
                    reward['row_index'] = i  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
                    selected_rewards.append(reward)
                    
        if not selected_rewards:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        if not self.wallet_manager or not self.wallet_manager.get_private_key():
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞!")
            return
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏",
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {len(selected_rewards)} –Ω–∞–≥—Ä–∞–¥?\n\n"
            f"–¢–æ–∫–µ–Ω: {self.reward_token_combo.currentText()}\n"
            f"–ì–∞–∑: {self.gas_price.value()} Gwei",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply != QMessageBox.Yes:
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω
        token_name = self.reward_token_combo.currentText()
        if token_name == 'PLEX ONE':
            token_address = PLEX_CONTRACT
        elif token_name == 'USDT':
            token_address = USDT_CONTRACT
        else:
            token_address = 'BNB'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è JobRouter
        rewards_config = {
            'rewards': selected_rewards,
            'token_address': token_address,
            'token_name': token_name,
            'gas_price': self.gas_price.value(),
            'gas_limit': self.gas_limit.value(),
            'delay_between_tx': self.send_delay.value(),
            'use_percentage': self.use_percentage.isChecked(),
            'percentage_amount': self.percentage_amount.value() if self.use_percentage.isChecked() else None,
            'fixed_amount': self.reward_amount.value() if not self.use_percentage.isChecked() else None
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ –¥–ª—è –∑–∞–¥–∞—á–∏
        from datetime import datetime
        self.current_job_tag = f"rewards_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ JobRouter
            self.current_job_id = self.job_router.submit_rewards(
                rewards_config=rewards_config,
                sender_key=self.wallet_manager.get_private_key(),
                tag=self.current_job_tag,
                priority=7  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –Ω–∞–≥—Ä–∞–¥
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_sending = True
            self.selected_rewards = selected_rewards
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.send_rewards_btn.setEnabled(False)
            self.stop_sending_btn.setEnabled(True)
            self.sending_progress.setValue(0)
            
            self.log(f"üöÄ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {len(selected_rewards)} –Ω–∞–≥—Ä–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (ID: {self.current_job_id})", "SUCCESS")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            self.update_timer = QTimer()
            self.update_timer.timeout.connect(self._update_job_status)
            self.update_timer.start(1000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {str(e)}")
            self.is_sending = False
        
    def stop_sending_rewards(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–≥—Ä–∞–¥ —á–µ—Ä–µ–∑ JobRouter"""
        if self.is_sending and self.current_job_id:
            try:
                if self.job_router.cancel_job(self.current_job_id):
                    self.log(f"‚èπ –ó–∞–¥–∞—á–∞ #{self.current_job_id} –æ—Ç–º–µ–Ω–µ–Ω–∞", "WARNING")
                    self._on_sending_finished()
                else:
                    self.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", "ERROR")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏: {e}")
                self.log(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {str(e)}", "ERROR")
            
    def _update_job_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏"""
        if not self.current_job_id:
            return
            
        try:
            progress = self.job_router.get_progress(self.current_job_id)
            if progress:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                if progress['total'] > 0:
                    percent = int((progress['done'] / progress['total']) * 100)
                    self.sending_progress.setValue(percent)
                    self.sending_status.setText(
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {progress['done']}/{progress['total']} (–û—à–∏–±–æ–∫: {progress['failed']})"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if progress['is_completed']:
                    self.update_timer.stop()
                    self._on_sending_finished()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
    
    def _on_job_progress(self, job_id: int, progress: Dict):
        """–ö–æ–ª–±–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏"""
        if job_id != self.current_job_id:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
        if progress['total'] > 0:
            percent = int((progress['done'] / progress['total']) * 100)
            message = f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {progress['done']}/{progress['total']}"
            self.sending_progress_signal.emit(percent, message)
    
    def _on_job_completed(self, job_id: int):
        """–ö–æ–ª–±–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        if job_id != self.current_job_id:
            return
            
        self._log_operation("üèÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        self.sending_progress_signal.emit(100, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞–≥—Ä–∞–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ
        for reward in self.selected_rewards:
            if 'row_index' in reward:
                row = reward['row_index']
                if row < self.rewards_table.rowCount():
                    status_item = self.rewards_table.item(row, 6)
                    status_item.setText('Sent')
                    status_item.setBackground(QColor('#004400'))
        
        self._on_sending_finished()
    
    def _on_job_failed(self, job_id: int):
        """–ö–æ–ª–±–µ–∫ –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á–∏"""
        if job_id != self.current_job_id:
            return
            
        self._log_operation("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        self.sending_progress_signal.emit(100, "–û—à–∏–±–∫–∞")
        self._on_sending_finished()
            
    def _log_operation(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        QTimer.singleShot(0, lambda: self.operation_log.append(f"[{timestamp}] {message}"))
        
    @pyqtSlot(int, str)
    def _update_sending_progress(self, value: int, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.sending_progress.setValue(value)
        self.sending_status.setText(message)
        
    @pyqtSlot(str, bool, str)
    def _on_reward_sent(self, address: str, success: bool, tx_hash: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–≥—Ä–∞–¥—É –≤ —Å–ø–∏—Å–∫–µ
        for i, reward in enumerate(self.rewards_list):
            if reward['address'] == address:
                if success:
                    reward['status'] = 'Sent'
                    reward['tx_hash'] = tx_hash
                else:
                    reward['status'] = 'Failed'
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                if i < self.rewards_table.rowCount():
                    status_item = self.rewards_table.item(i, 6)
                    status_item.setText(reward['status'])
                    
                    if success:
                        status_item.setBackground(QColor('#004400'))
                        tx_item = self.rewards_table.item(i, 7)
                        tx_item.setText(f"{tx_hash[:10]}...")
                        tx_item.setData(Qt.UserRole, tx_hash)
                    else:
                        status_item.setBackground(QColor('#440000'))
                        
                break
                
        self._update_statistics()
        
    def _on_sending_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
        if hasattr(self, 'update_timer') and self.update_timer.isActive():
            self.update_timer.stop()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_sending = False
        self.current_job_id = None
        self.current_job_tag = None
        self.selected_rewards = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.send_rewards_btn.setEnabled(True)
        self.stop_sending_btn.setEnabled(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_statistics()
        
        self.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "SUCCESS")
        
    def _show_context_menu(self, position):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        if self.rewards_table.currentRow() < 0:
            return
            
        menu = QMenu()
        
        copy_address = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        copy_tx = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å TX hash")
        menu.addSeparator()
        open_bscscan = menu.addAction("üåê –û—Ç–∫—Ä—ã—Ç—å TX –≤ BscScan")
        menu.addSeparator()
        resend = menu.addAction("üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        remove = menu.addAction("‚ùå –£–¥–∞–ª–∏—Ç—å")
        
        action = menu.exec_(self.rewards_table.viewport().mapToGlobal(position))
        
        if action:
            row = self.rewards_table.currentRow()
            
            if action == copy_address:
                address = self.rewards_table.item(row, 1).data(Qt.UserRole)
                QApplication.clipboard().setText(address)
                self.log("–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                
            elif action == copy_tx:
                tx_hash = self.rewards_table.item(row, 7).data(Qt.UserRole)
                if tx_hash:
                    QApplication.clipboard().setText(tx_hash)
                    self.log("TX hash —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω", "INFO")
                else:
                    QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "TX hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
            elif action == open_bscscan:
                tx_hash = self.rewards_table.item(row, 7).data(Qt.UserRole)
                if tx_hash:
                    from PyQt5.QtGui import QDesktopServices
                    from PyQt5.QtCore import QUrl
                    url = f"https://bscscan.com/tx/{tx_hash}"
                    QDesktopServices.openUrl(QUrl(url))
                    self.log("–û—Ç–∫—Ä—ã—Ç–æ –≤ BscScan", "INFO")
                else:
                    QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "TX hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
            elif action == resend:
                if row < len(self.rewards_list):
                    self.rewards_list[row]['status'] = 'Pending'
                    self.rewards_list[row]['tx_hash'] = ''
                    
                    status_item = self.rewards_table.item(row, 6)
                    status_item.setText('Pending')
                    status_item.setBackground(QColor())
                    
                    tx_item = self.rewards_table.item(row, 7)
                    tx_item.setText('')
                    tx_item.setData(Qt.UserRole, '')
                    
                    self.log("–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏", "INFO")
                    
            elif action == remove:
                reply = QMessageBox.question(
                    self,
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                    "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.No
                )
                
                if reply == QMessageBox.Yes:
                    self.rewards_table.removeRow(row)
                    if row < len(self.rewards_list):
                        del self.rewards_list[row]
                    self._update_statistics()
                    self.log("–ù–∞–≥—Ä–∞–¥–∞ —É–¥–∞–ª–µ–Ω–∞", "INFO")
                    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥"""
        from PyQt5.QtWidgets import QInputDialog
        
        name, ok = QInputDialog.getText(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        )
        
        if ok and name:
            config = {
                'token': self.reward_token_combo.currentText(),
                'amount': self.reward_amount.value(),
                'use_percentage': self.use_percentage.isChecked(),
                'percentage': self.percentage_amount.value(),
                'gas_price': self.gas_price.value(),
                'gas_limit': self.gas_limit.value(),
                'delay': self.send_delay.value()
            }
            
            self.rewards_configs[name] = config
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            items = [self.configs_list.item(i).text() for i in range(self.configs_list.count())]
            if name not in items:
                self.configs_list.addItem(name)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self._save_configs_to_file()
            
            self.log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "SUCCESS")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥"""
        current_item = self.configs_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
            return
            
        name = current_item.text()
        if name in self.rewards_configs:
            config = self.rewards_configs[name]
            
            self.reward_token_combo.setCurrentText(config.get('token', 'PLEX ONE'))
            self.reward_amount.setValue(config.get('amount', 0.1))
            self.use_percentage.setChecked(config.get('use_percentage', False))
            self.percentage_amount.setValue(config.get('percentage', 1.0))
            self.gas_price.setValue(config.get('gas_price', 5))
            self.gas_limit.setValue(config.get('gas_limit', 100000))
            self.send_delay.setValue(config.get('delay', 2))
            
            self.log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "SUCCESS")
            
    def delete_config(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        current_item = self.configs_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
            
        name = current_item.text()
        
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é '{name}'?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            if name in self.rewards_configs:
                del self.rewards_configs[name]
                
            self.configs_list.takeItem(self.configs_list.row(current_item))
            self._save_configs_to_file()
            
            self.log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{name}' —É–¥–∞–ª–µ–Ω–∞", "INFO")
            
    def _save_configs_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            with open('rewards_configs.json', 'w', encoding='utf-8') as f:
                json.dump(self.rewards_configs, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            
    def _load_configs_from_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('rewards_configs.json', 'r', encoding='utf-8') as f:
                self.rewards_configs = json.load(f)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.configs_list.clear()
            for name in self.rewards_configs.keys():
                self.configs_list.addItem(name)
                
        except FileNotFoundError:
            self.rewards_configs = {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            self.rewards_configs = {}
