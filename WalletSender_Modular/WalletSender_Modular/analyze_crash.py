#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—Ä–∞—à–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
current_dir = Path(__file__).parent
src_path = current_dir / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

def analyze_crash():
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞"""
    
    print("=" * 60)
    print("[SEARCH] –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–†–ê–®–ê v2.4.20")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º execution_trace.txt
    print("\nüìù –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
    try:
        from wallet_sender.utils.crash_diagnostics import diagnose_crash_point
        crash_point = diagnose_crash_point()
        
        if crash_point:
            print(f"\n[TARGET] –ù–ê–ô–î–ï–ù–ê –¢–û–ß–ö–ê –ö–†–ê–®–ê: {crash_point}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∫—Ä–∞—à–∞
            if "AutoSalesWorker.run" in crash_point:
                print("\nüí° –ü—Ä–æ–±–ª–µ–º–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂")
                print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ UI –∏–∑ –ø–æ—Ç–æ–∫–∞")
                print("   ‚Ä¢ –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Web3")
                print("   ‚Ä¢ –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
                
            elif "DexSwapService" in crash_point:
                print("\nüí° –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –æ–±–º–µ–Ω–∞")
                print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   ‚Ä¢ –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Web3")
                print("   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–æ—É—Ç–µ—Ä–∞")
                print("   ‚Ä¢ –û—à–∏–±–∫–∞ nonce")
                
            elif "update_ui" in crash_point.lower():
                print("\nüí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI")
                print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   ‚Ä¢ –ú–µ–∂–ø–æ—Ç–æ—á–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ Qt")
                print("   ‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç")
                print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª/—Å–ª–æ—Ç")
                
    except FileNotFoundError:
        print("[ERROR] –§–∞–π–ª execution_trace.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º crash_log.txt
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ crash_log.txt...")
    try:
        with open("crash_log.txt", "r", encoding="utf-8") as f:
            content = f.read()
            if content:
                print("[OK] –ù–∞–π–¥–µ–Ω crash_log.txt")
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
                lines = content.split("\n")
                for i in range(len(lines)-1, -1, -1):
                    if "ERROR" in lines[i] or "CRASH" in lines[i]:
                        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {lines[i]}")
                        break
            else:
                print("üìÑ crash_log.txt –ø—É—Å—Ç")
    except FileNotFoundError:
        print("[ERROR] crash_log.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º wallet_sender_modular.log
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞...")
    try:
        with open("wallet_sender_modular.log", "r", encoding="utf-8") as f:
            lines = f.readlines()
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            last_lines = lines[-20:] if len(lines) > 20 else lines
            
            print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ:")
            for line in last_lines:
                if "ERROR" in line or "CRITICAL" in line:
                    print(f"   üî¥ {line.strip()}")
                elif "WARNING" in line:
                    print(f"   üü° {line.strip()}")
    except FileNotFoundError:
        print("[ERROR] wallet_sender_modular.log –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("[INFO] –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    if crash_point:
        print(f"\n1. –¢–æ—á–∫–∞ –∫—Ä–∞—à–∞: {crash_point}")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–∞:")
        print("   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è –∫ UI –∏–∑ –ø–æ—Ç–æ–∫–∞")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None")
        print("   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç:")
        print("   python test_crash_fix.py")
    else:
        print("\n1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑")
        print("2. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—à")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–Ω–æ–≤–∞")
    
    print("\n" + "=" * 60)

def test_components():
    """–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    try:
        from wallet_sender.ui.tabs.auto_sales_tab import AutoSalesTab
        print("[OK] AutoSalesTab –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AutoSalesTab: {e}")
    
    try:
        from wallet_sender.services.dex_swap_service import DexSwapService
        print("[OK] DexSwapService –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DexSwapService: {e}")
    
    # –¢–µ—Å—Ç Web3
    try:
        from wallet_sender.core.web3_provider import Web3Provider
        provider = Web3Provider()
        if provider.w3.is_connected():
            print("[OK] Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC")
        else:
            print("[ERROR] Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ Web3: {e}")

if __name__ == "__main__":
    analyze_crash()
    test_components()
    
    print("\nüí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –∫—Ä–∞—à –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    print("   2. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—à")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python analyze_crash.py")
    print("   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
