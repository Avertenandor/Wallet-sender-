#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç AutoSellExecutor.run() - –ø–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
"""

import sys
import traceback
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))

def test_auto_sell_executor_run():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AutoSellExecutor.run() —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –æ—à–∏–±–æ–∫"""
    print("üöÄ –¢–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø AutoSellExecutor.run()")
    print("=" * 50)
    
    try:
        from wallet_sender.core.job_engine import JobEngine, AutoSellExecutor
        from wallet_sender.core.store import get_store
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        engine = JobEngine()
        store = get_store()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
        safe_config = {
            'token_address': '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',  # BUSD BSC
            'sell_percentage': 1,  # –¢–æ–ª—å–∫–æ 1%
            'interval': 1,  # 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            'total_sells': 1,  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞
            'seller_keys': ['0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'],  # 32 –±–∞–π—Ç–∞
            'slippage': 10,  # –ë–æ–ª—å—à–æ–π slippage –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'target_token': 'BNB'
        }
        
        print("1. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ auto_sell...")
        job_id = store.create_job('Test Auto Sell Run', 'auto_sell', safe_config)
        job = store.get_job(job_id)
        
        print("2. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ AutoSellExecutor...")
        executor = AutoSellExecutor(job_id, job, engine)
        
        print("3. üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è executor.run()...")
        print("   –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º!")
        print("   –í—ã–ø–æ–ª–Ω—è–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
        print("4. üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Web3
        w3 = engine.rpc_pool.get_client()
        if not w3:
            print("‚ùå Web3 –Ω–µ –ø–æ–ª—É—á–µ–Ω - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç")
            return False
        print("   ‚úÖ Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ before run
        print(f"   Status before: {executor.status}")
        print(f"   Progress: {executor.done_count}/{executor.total_count}")
        print(f"   Failed: {executor.failed_count}")
        
        # –û–°–¢–û–†–û–ñ–ù–û: –≤—ã–ø–æ–ª–Ω—è–µ–º run() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å timeout
        print("5. ‚ö†Ô∏è –ó–ê–ü–£–°–ö EXECUTOR.RUN()...")
        
        import threading
        import queue
        
        result_queue = queue.Queue()
        exception_queue = queue.Queue()
        
        def run_executor():
            try:
                print("   [THREAD] –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run()...")
                executor.run()
                result_queue.put("SUCCESS")
                print("   [THREAD] run() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"   [THREAD] –û—à–∏–±–∫–∞ –≤ run(): {e}")
                exception_queue.put(e)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–æ—Ç–æ–∫–µ —Å timeout
        thread = threading.Thread(target=run_executor, daemon=True)
        thread.start()
        
        # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        thread.join(timeout=30)
        
        if thread.is_alive():
            print("‚ö†Ô∏è TIMEOUT: run() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º") 
            print("   - –ó–∞–≤–∏—Å—à–∏–π –ø—Ä–æ—Ü–µ—Å—Å")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not exception_queue.empty():
            exception = exception_queue.get()
            print(f"‚ùå –û–®–ò–ë–ö–ê –í RUN(): {exception}")
            traceback.print_exception(type(exception), exception, exception.__traceback__)
            return False
            
        if not result_queue.empty():
            result = result_queue.get()
            print(f"‚úÖ RUN() –ó–ê–í–ï–†–®–ï–ù: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            print("6. üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ executor:")
            print(f"   Status: {executor.status}")
            print(f"   Done: {executor.done_count}")
            print(f"   Failed: {executor.failed_count}")
            print(f"   Total: {executor.total_count}")
            
            return True
        
        print("‚ö†Ô∏è –ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê –æ—Ç run()")
        return False
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        traceback.print_exc()
        return False

def test_auto_sell_mock_run():
    """–¢–µ—Å—Ç AutoSellExecutor —Å –º–æ–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    print("\nüé≠ –¢–ï–°–¢ AutoSellExecutor –° –ú–û–ö–ê–ú–ò")
    print("=" * 40)
    
    try:
        from wallet_sender.core.job_engine import JobEngine, AutoSellExecutor
        from wallet_sender.core.store import get_store
        from unittest.mock import patch, MagicMock
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        engine = JobEngine()
        store = get_store()
        
        test_config = {
            'token_address': '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
            'sell_percentage': 10,
            'interval': 1,
            'total_sells': 1,
            'seller_keys': ['0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'],
            'slippage': 5,
            'target_token': 'BNB'
        }
        
        job_id = store.create_job('Test Mock Auto Sell', 'auto_sell', test_config)
        job = store.get_job(job_id)
        executor = AutoSellExecutor(job_id, job, engine)
        
        print("‚úÖ AutoSellExecutor —Å–æ–∑–¥–∞–Ω")
        
        # –ú–æ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        with patch.object(executor.engine.rpc_pool, 'get_client') as mock_get_client:
            # –ú–æ–∫–∞–µ–º Web3
            mock_w3 = MagicMock()
            mock_w3.is_connected.return_value = True
            mock_w3.eth.chain_id = 56  # BSC
            
            # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
            mock_contract = MagicMock()
            mock_contract.functions.balanceOf.return_value.call.return_value = 1000 * 10**18  # 1000 —Ç–æ–∫–µ–Ω–æ–≤
            mock_contract.functions.allowance.return_value.call.return_value = 0  # –ù—É–∂–µ–Ω approve
            
            mock_w3.eth.contract.return_value = mock_contract
            mock_w3.to_checksum_address.side_effect = lambda x: x  # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ –∞–¥—Ä–µ—Å
            
            # –ú–æ–∫–∞–µ–º nonce manager
            mock_ticket = MagicMock()
            mock_ticket.nonce = 100
            executor.engine.nonce_manager.reserve = MagicMock(return_value=mock_ticket)
            executor.engine.nonce_manager.complete = MagicMock()
            executor.engine.nonce_manager.fail = MagicMock()
            
            # –ú–æ–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            mock_w3.eth.send_raw_transaction.return_value.hex.return_value = "0xmockedhash123"
            mock_w3.eth.wait_for_transaction_receipt.return_value = {'status': 1}
            
            mock_get_client.return_value = mock_w3
            
            print("üé≠ –ú–æ–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º run()...")
            
            try:
                executor.run()
                print("‚úÖ run() –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –º–æ–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   Done: {executor.done_count}")
                print(f"   Failed: {executor.failed_count}")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–∂–µ —Å –º–æ–∫–∞–º–∏: {e}")
                traceback.print_exc()
                return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø AUTO_SELL")
    print("–î–∞—Ç–∞:", time.strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # –°–Ω–∞—á–∞–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç —Å –º–æ–∫–∞–º–∏
    mock_test_ok = test_auto_sell_mock_run()
    
    if mock_test_ok:
        print("\n" + "‚ö†Ô∏è" * 20)
        print("–í–ù–ò–ú–ê–ù–ò–ï: –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
        print("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)")
        
        # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        user_input = "N"  # input().lower().strip()
        
        if user_input == 'y':
            real_test_ok = test_auto_sell_executor_run()
        else:
            print("–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            real_test_ok = True
    else:
        print("\n‚ùå –¢–µ—Å—Ç —Å –º–æ–∫–∞–º–∏ –Ω–µ –ø—Ä–æ—à–µ–ª - —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        real_test_ok = False
    
    print("\n" + "=" * 60)
    if mock_test_ok and real_test_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üí° AutoSellExecutor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        if not mock_test_ok:
            print("üîß –ü—Ä–æ–±–ª–µ–º–∞ –≤ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–µ AutoSellExecutor")
        if not real_test_ok:
            print("üîß –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏")
    
    print("\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
