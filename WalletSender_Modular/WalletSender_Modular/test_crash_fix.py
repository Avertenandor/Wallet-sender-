#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫—Ä–∞—à —É—Å—Ç—Ä–∞–Ω–µ–Ω
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
current_dir = Path(__file__).parent
src_path = current_dir / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

def test_fix():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∞—à–∞"""
    
    print("=" * 60)
    print("[TEST] –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–†–ê–®–ê v2.4.20")
    print("=" * 60)
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    with open("execution_trace.txt", "w") as f:
        f.write("=== Test started ===\n")
    
    print("\nüìù –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π")
    try:
        from wallet_sender.ui.tabs.auto_sales_tab import AutoSalesTab, AutoSalesWorker
        from wallet_sender.services.dex_swap_service import DexSwapService
        from wallet_sender.core.web3_provider import Web3Provider
        print("[OK] –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    print("\nüìù –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ Web3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    try:
        provider = Web3Provider()
        if provider.w3.is_connected():
            print("[OK] Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("[WARN] Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Web3: {e}")
        return False
    
    print("\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ DexSwapService")
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π!)
        test_key = "0x" + "1" * 64
        router = "0x10ED43C718714eb63d5aA57B78B54704E256024E"
        
        service = DexSwapService(
            web3=provider.w3,
            router_address=router,
            private_key=test_key
        )
        print("[OK] DexSwapService —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        if hasattr(service, '_sync_nonce_with_network'):
            print("[OK] –ú–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ nonce –Ω–∞–π–¥–µ–Ω")
        if hasattr(service, '_wait_receipt_async'):
            print("[OK] –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DexSwapService: {e}")
        return False
    
    print("\nüìù –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞)")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
        worker = AutoSalesWorker(
            private_key=test_key,
            token_address="0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1",
            sell_amount=0.1,
            slippage=5,
            interval=60,
            cycles=1
        )
        print("[OK] AutoSalesWorker —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        if hasattr(worker, 'swap_service'):
            print("[OK] swap_service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        if hasattr(worker, 'is_running'):
            print("[OK] is_running —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\nüìù –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Qt –ø–æ—Ç–æ–∫–æ–≤")
    try:
        from PyQt5.QtCore import QThread
        from PyQt5.QtWidgets import QApplication
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        app = QApplication.instance()
        if not app:
            app = QApplication(sys.argv)
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        thread = QThread()
        print("[OK] Qt –ø–æ—Ç–æ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
        current = QThread.currentThread()
        main = app.thread()
        if current == main:
            print("[OK] –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Qt")
        else:
            print("[WARN] –ù–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Qt")
            
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ Qt: {e}")
        return False
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    print("\nüìù –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏...")
    try:
        from wallet_sender.utils.crash_diagnostics import diagnose_crash_point
        crash_point = diagnose_crash_point()
        
        if crash_point:
            print(f"[WARN] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {crash_point}")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ—Å—Ç–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫—Ä–∞—à–∞")
            return False
        else:
            print("[OK] –ö—Ä–∞—à–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É: {e}")
    
    print("\n" + "=" * 60)
    print("[OK] –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    print("=" * 60)
    print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    print("  python main.py")
    print("\n–ï—Å–ª–∏ –∫—Ä–∞—à –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è:")
    print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python analyze_crash.py")
    print("  2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    return True

def test_isolated_swap():
    """–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç swap –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("[TEST] –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ SWAP")
    print("=" * 60)
    
    try:
        from wallet_sender.services.dex_swap_service import DexSwapService
        from wallet_sender.core.web3_provider import Web3Provider
        
        print("\n1. –°–æ–∑–¥–∞–µ–º Web3...")
        provider = Web3Provider()
        
        print("2. –°–æ–∑–¥–∞–µ–º DexSwapService...")
        test_key = "0x" + "1" * 64
        service = DexSwapService(
            web3=provider.w3,
            router_address="0x10ED43C718714eb63d5aA57B78B54704E256024E",
            private_key=test_key
        )
        
        print("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º nonce...")
        nonce = service._reserve_nonce()
        print(f"   Nonce: {nonce}")
        
        print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º gas price...")
        gas = service._gas_price(None, "test")
        print(f"   Gas price: {gas} wei ({gas/10**9} gwei)")
        
        print("\n[OK] –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"\n[ERROR] –û—à–∏–±–∫–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    success = test_fix()
    
    if success:
        test_isolated_swap()
    
    print("\n" + "=" * 60)
    if success:
        print("[OK] –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("[ERROR] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    print("=" * 60)
