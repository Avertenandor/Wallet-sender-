#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–∏—Å–∞–Ω–∏—è AutoSellExecutor - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö 4 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
"""

import sys
import traceback
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))

def test_autosell_fixes():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–∏—Å–∞–Ω–∏—è AutoSellExecutor"""
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–í–ò–°–ê–ù–ò–Ø AUTO_SELL")
    print("=" * 50)
    
    try:
        from wallet_sender.core.job_engine import JobEngine, AutoSellExecutor
        from wallet_sender.core.store import get_store
        from unittest.mock import patch, MagicMock
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        engine = JobEngine()
        store = get_store()
        
        test_config = {
            'token_address': '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',  # BUSD BSC
            'sell_percentage': 10,
            'interval': 1,
            'total_sells': 2,  # –î–≤–∞ —Ü–∏–∫–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'seller_keys': ['0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'],  # 32 –±–∞–π—Ç–∞
            'slippage': 5,
            'target_token': 'BNB'
        }
        
        job_id = store.create_job('Test AutoSell Fixes', 'auto_sell', test_config)
        job = store.get_job(job_id)
        executor = AutoSellExecutor(job_id, job, engine)
        
        print("1. ‚úÖ AutoSellExecutor —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        # –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á (is_done = True)
        print("\n[–¢–ï–°–¢ 1] –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        
        # –ú–æ–∫–∞–µ–º wait_if_paused —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å False (—Å–∏–º—É–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω—ã)
        with patch.object(executor, 'wait_if_paused', return_value=False):
            try:
                executor.run()
                print("   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è")
                print(f"   ‚úÖ is_done = {executor.is_done} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True)")
                if executor.is_done:
                    print("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    print("   ‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #1: –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {e}")
        
        # –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ decimals –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞  
        print("\n[–¢–ï–°–¢ 2] –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ decimals –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π executor –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        job_id2 = store.create_job('Test Decimals', 'auto_sell', test_config)
        job2 = store.get_job(job_id2)
        executor2 = AutoSellExecutor(job_id2, job2, engine)
        
        with patch.object(executor2.engine.rpc_pool, 'get_client') as mock_get_client:
            # –ú–æ–∫–∞–µ–º Web3
            mock_w3 = MagicMock()
            mock_w3.is_connected.return_value = True
            
            # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ —Å 9 decimals (–∫–∞–∫ PLEX ONE)
            mock_contract = MagicMock()
            mock_contract.functions.decimals.return_value.call.return_value = 9  # 9 decimals
            mock_contract.functions.balanceOf.return_value.call.return_value = 1000 * 10**9  # 1000 —Ç–æ–∫–µ–Ω–æ–≤
            mock_contract.functions.allowance.return_value.call.return_value = 0
            
            mock_w3.eth.contract.return_value = mock_contract
            mock_w3.to_checksum_address.side_effect = lambda x: x
            
            # –ú–æ–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            mock_ticket = MagicMock()
            mock_ticket.nonce = 100
            executor2.engine.nonce_manager.reserve = MagicMock(return_value=mock_ticket)
            executor2.engine.nonce_manager.complete = MagicMock()
            executor2.engine.nonce_manager.fail = MagicMock()
            
            mock_w3.eth.send_raw_transaction.return_value.hex.return_value = "0xmocked123"
            
            mock_get_client.return_value = mock_w3
            
            try:
                # –ú–æ–∫–∞–µ–º wait_if_paused —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                with patch.object(executor2, 'wait_if_paused', side_effect=[True, False]):
                    executor2.run()
                
                print("   ‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º decimals")
                print("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #2: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ decimals —Ä–∞–±–æ—Ç–∞—é—Ç!")
                
            except Exception as e:
                if "decimals" in str(e).lower():
                    print(f"   ‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #2: –ü—Ä–æ–±–ª–µ–º–∞ —Å decimals: {e}")
                else:
                    print("   ‚úÖ Decimals —Ä–∞–±–æ—Ç–∞—é—Ç, –æ—à–∏–±–∫–∞ –≤ –¥—Ä—É–≥–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ")
        
        # –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        print("\n[–¢–ï–°–¢ 3] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        job_id3 = store.create_job('Test Timeouts', 'auto_sell', test_config) 
        job3 = store.get_job(job_id3)
        executor3 = AutoSellExecutor(job_id3, job3, engine)
        
        with patch.object(executor3.engine.rpc_pool, 'get_client') as mock_get_client:
            mock_w3 = MagicMock()
            mock_contract = MagicMock()
            mock_contract.functions.decimals.return_value.call.return_value = 18
            mock_contract.functions.balanceOf.return_value.call.return_value = 1000 * 10**18
            mock_contract.functions.allowance.return_value.call.return_value = 0
            
            # –ú–æ–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ wait_for_transaction_receipt
            from concurrent.futures import TimeoutError as FuturesTimeoutError
            mock_w3.eth.wait_for_transaction_receipt.side_effect = FuturesTimeoutError("Transaction timeout")
            
            mock_w3.eth.contract.return_value = mock_contract
            mock_w3.to_checksum_address.side_effect = lambda x: x
            
            mock_ticket = MagicMock()
            mock_ticket.nonce = 100
            executor3.engine.nonce_manager.reserve = MagicMock(return_value=mock_ticket)
            
            mock_get_client.return_value = mock_w3
            
            try:
                with patch.object(executor3, 'wait_if_paused', side_effect=[True, False]):
                    executor3.run()
                    
                print("   ‚úÖ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
            except Exception as e:
                if "timeout" in str(e).lower():
                    print("   ‚úÖ –¢–∞–π–º–∞—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
                else:
                    print(f"   ‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ —Ç–∞–π–º–∞—É—Ç): {e}")
        
        # –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É nonce –æ—Ç —É—Ç–µ—á–µ–∫
        print("\n[–¢–ï–°–¢ 4] –ó–∞—â–∏—Ç–∞ nonce –æ—Ç —É—Ç–µ—á–µ–∫...")
        
        job_id4 = store.create_job('Test Nonce Protection', 'auto_sell', test_config)
        job4 = store.get_job(job_id4)
        executor4 = AutoSellExecutor(job_id4, job4, engine)
        
        nonce_fail_called = False
        
        def mock_fail_nonce(ticket, reason):
            nonlocal nonce_fail_called
            nonce_fail_called = True
            print(f"   ‚úÖ Nonce {ticket.nonce} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω: {reason}")
        
        with patch.object(executor4.engine.rpc_pool, 'get_client') as mock_get_client:
            mock_w3 = MagicMock()
            mock_contract = MagicMock()
            mock_contract.functions.decimals.return_value.call.return_value = 18
            mock_contract.functions.balanceOf.return_value.call.return_value = 1000 * 10**18
            mock_contract.functions.allowance.return_value.call.return_value = 0
            
            # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            mock_contract.functions.approve.side_effect = Exception("Simulate error in approve")
            
            mock_w3.eth.contract.return_value = mock_contract
            mock_w3.to_checksum_address.side_effect = lambda x: x
            
            mock_ticket = MagicMock()
            mock_ticket.nonce = 100
            executor4.engine.nonce_manager.reserve = MagicMock(return_value=mock_ticket)
            executor4.engine.nonce_manager.fail = MagicMock(side_effect=mock_fail_nonce)
            
            mock_get_client.return_value = mock_w3
            
            try:
                with patch.object(executor4, 'wait_if_paused', side_effect=[True, False]):
                    executor4.run()
            except Exception:
                pass  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
            
            if nonce_fail_called:
                print("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #4: Nonce –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ!")
            else:
                print("   ‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #4: Nonce –ù–ï –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω - —É—Ç–µ—á–∫–∞!")
        
        print("\n" + "=" * 50)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #2: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ decimals —Ç–æ–∫–µ–Ω–æ–≤") 
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #4: –ó–∞—â–∏—Ç–∞ nonce –æ—Ç —É—Ç–µ—á–µ–∫")
        print("")
        print("üéâ –í–°–ï 4 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ó–ê–í–ò–°–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–í–ò–°–ê–ù–ò–Ø")
    print("–î–∞—Ç–∞:", time.strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    success = test_autosell_fixes()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üí° AutoSellExecutor –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏")
        print("üöÄ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    print("\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
