"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import logging
import functools
import asyncio
import traceback
import inspect
from typing import Optional, Callable, Any, Union
from pathlib import Path
from datetime import datetime


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è UI –ª–æ–≥–æ–≤
_ui_log_handler = None


def _get_context_info(func: Callable, args: tuple, kwargs: dict) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è
        args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    context = {
        'module': func.__module__,
        'function': func.__name__,
        'self_obj': None,
        'class_name': None
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–µ—Ç–æ–¥–æ–º –∫–ª–∞—Å—Å–∞
    if args and hasattr(args[0], '__class__'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
        sig = inspect.signature(func)
        params = list(sig.parameters.keys())
        if params and params[0] == 'self':
            context['self_obj'] = args[0]
            context['class_name'] = args[0].__class__.__name__
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ —Å—Ç—Ä–æ–∫–µ
    frame = inspect.currentframe()
    if frame and frame.f_back and frame.f_back.f_back:
        context['file'] = frame.f_back.f_back.f_code.co_filename
        context['line'] = frame.f_back.f_back.f_lineno
    
    return context


def _format_action_message(name: str, context: dict, kwargs: Optional[dict] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏
    
    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if context.get('class_name'):
        message = f"[{context['class_name']}] –î–µ–π—Å—Ç–≤–∏–µ: {name}"
    else:
        message = f"–î–µ–π—Å—Ç–≤–∏–µ: {name}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if kwargs:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_str = ", ".join(
            f"{k}={_truncate_str(v, 50)}" 
            for k, v in kwargs.items()
        )
        message += f" ({params_str})"
    
    return message


def _format_result(result: Any, max_length: int = 100) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    result_str = str(result)
    return _truncate_str(result_str, max_length)


def _truncate_str(s: Any, max_length: int = 50) -> str:
    """
    –û–±—Ä–µ–∑–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        s: –°—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    s_str = str(s)
    if len(s_str) > max_length:
        return s_str[:max_length] + '...'
    return s_str


def _log_error(action_name: str, error: Exception, context: dict):
    """
    –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    
    Args:
        action_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        error: –û—à–∏–±–∫–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    error_msg = f"[ERROR] {action_name} –æ—à–∏–±–∫–∞: {str(error)}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ—à–∏–±–∫–∏
    error_msg += f" [{error.__class__.__name__}]"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_to_ui(error_msg, "ERROR")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å —É—Ä–æ–≤–Ω–µ–º DEBUG
    if context.get('file'):
        log_to_ui(f"  üìç –§–∞–π–ª: {context['file']}:{context.get('line', '?')}", "DEBUG")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏)
    tb_lines = traceback.format_exception(type(error), error, error.__traceback__)
    if tb_lines:
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏
        relevant_lines = []
        for line in tb_lines:
            if 'File "' in line and '.py"' in line:
                relevant_lines.append(line.strip())
        
        if relevant_lines:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏
            for line in relevant_lines[-3:]:
                log_to_ui(f"  üî¥ {line}", "DEBUG")


def set_ui_log_handler(handler: Callable[[str, str], None]):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ UI
    
    Args:
        handler: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤ (message, level)
    """
    global _ui_log_handler
    _ui_log_handler = handler


def log_to_ui(message: str, level: str = "INFO"):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ UI –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if _ui_log_handler:
        try:
            _ui_log_handler(message, level)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ UI: {e}")


def log_action(action_name: str = None, level: str = "INFO", log_result: bool = False, log_params: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        action_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏)
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_result: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        log_params: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
    """
    def decorator(func):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
        if asyncio.iscoroutinefunction(func):
            @functools.wraps(func)
            async def async_wrapper(*args, **kwargs):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è
                name = action_name or func.__name__.replace('_', ' ').title()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = _get_context_info(func, args, kwargs)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
                message = _format_action_message(name, context, kwargs if log_params else None)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è
                log_to_ui(f"‚ñ∂ {message}", level)
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    result = await func(*args, **kwargs)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    if log_result and result is not None:
                        log_to_ui(f"[OK] {name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {_format_result(result)}", "SUCCESS")
                    else:
                        log_to_ui(f"[OK] {name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
                    
                    return result
                    
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏
                    _log_error(name, e, context)
                    raise
            
            return async_wrapper
        else:
            @functools.wraps(func)
            def sync_wrapper(*args, **kwargs):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è
                name = action_name or func.__name__.replace('_', ' ').title()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = _get_context_info(func, args, kwargs)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
                message = _format_action_message(name, context, kwargs if log_params else None)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è
                log_to_ui(f"‚ñ∂ {message}", level)
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    result = func(*args, **kwargs)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    if log_result and result is not None:
                        log_to_ui(f"[OK] {name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {_format_result(result)}", "SUCCESS")
                    else:
                        log_to_ui(f"[OK] {name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
                    
                    return result
                    
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏
                    _log_error(name, e, context)
                    raise
            
            return sync_wrapper
    return decorator


def log_click(button_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    
    Args:
        button_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = button_name or func.__name__.replace('_', ' ').title()
            log_to_ui(f"üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {name}", "INFO")
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_input_change(field_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
    
    Args:
        field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = field_name or func.__name__.replace('_', ' ').title()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            value = args[1] if len(args) > 1 else kwargs.get('value', kwargs.get('text', ''))
            
            if value:
                log_to_ui(f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ '{name}': {value}", "DEBUG")
            else:
                log_to_ui(f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ '{name}'", "DEBUG")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_tab_change(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏
        tab_index = args[1] if len(args) > 1 else kwargs.get('index', -1)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        self_obj = args[0] if args else None
        if self_obj and hasattr(self_obj, 'tab_widget'):
            tab_name = self_obj.tab_widget.tabText(tab_index)
            log_to_ui(f"[DOC] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: {tab_name}", "INFO")
        else:
            log_to_ui(f"[DOC] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É #{tab_index}", "INFO")
        
        return func(*args, **kwargs)
    return wrapper


def log_window_action(action: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–∫–Ω–∞–º–∏
    
    Args:
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log_to_ui(f"ü™ü {action}", "INFO")
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_network_action(action: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    Args:
        action: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log_to_ui(f"[WEB] {action}...", "INFO")
            
            try:
                result = func(*args, **kwargs)
                log_to_ui(f"[OK] {action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "SUCCESS")
                return result
            except Exception as e:
                log_to_ui(f"[ERROR] {action} –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
                raise
                
        return wrapper
    return decorator


def log_async_action(action_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    Args:
        action_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            name = action_name or func.__name__.replace('_', ' ').title()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = _get_context_info(func, args, kwargs)
            
            log_to_ui(f"[MINIMAL] –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {name}...", "INFO")
            
            try:
                result = await func(*args, **kwargs)
                log_to_ui(f"[OK] {name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "SUCCESS")
                return result
            except asyncio.CancelledError:
                log_to_ui(f"[WARN] {name} –æ—Ç–º–µ–Ω–µ–Ω–æ", "WARNING")
                raise
            except Exception as e:
                _log_error(name, e, context)
                raise
                
        return wrapper
    return decorator


def log_transaction(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self_obj = args[0] if args else None
        
        log_to_ui(f"[MONEY] –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...", "INFO")
        
        try:
            result = func(*args, **kwargs)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if isinstance(result, str) and result.startswith('0x'):
                log_to_ui(f"[OK] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {result[:20]}...", "SUCCESS")
            elif isinstance(result, dict) and 'tx_hash' in result:
                log_to_ui(f"[OK] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {result['tx_hash'][:20]}...", "SUCCESS")
            else:
                log_to_ui(f"[OK] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "SUCCESS")
            
            return result
            
        except Exception as e:
            log_to_ui(f"[ERROR] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}", "ERROR")
            raise
            
    return wrapper


def log_file_operation(operation: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    Args:
        operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∑–∞–≥—Ä—É–∑–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ç.–¥.)
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log_to_ui(f"üìÅ {operation}...", "INFO")
            
            try:
                result = func(*args, **kwargs)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                filename = None
                if isinstance(result, str):
                    filename = Path(result).name
                elif len(args) > 1 and isinstance(args[1], str):
                    filename = Path(args[1]).name
                
                if filename:
                    log_to_ui(f"[OK] {operation} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {filename}", "SUCCESS")
                else:
                    log_to_ui(f"[OK] {operation} –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
                
                return result
                
            except Exception as e:
                log_to_ui(f"[ERROR] –û—à–∏–±–∫–∞ {operation}: {str(e)}", "ERROR")
                raise
                
        return wrapper
    return decorator


def log_settings_change(setting_name: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    Args:
        setting_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            value = args[1] if len(args) > 1 else kwargs.get('value', '')
            
            log_to_ui(f"[SETTINGS] –ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_name}': {value}", "INFO")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_dropdown_change(field_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö
    
    Args:
        field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = field_name or func.__name__.replace('_', ' ').title()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            value = args[1] if len(args) > 1 else kwargs.get('value', kwargs.get('text', ''))
            
            log_to_ui(f"[INFO] –í—ã–±—Ä–∞–Ω '{name}': {value}", "INFO")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_checkbox_change(checkbox_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ–∫–±–æ–∫—Å–æ–≤
    
    Args:
        checkbox_name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = checkbox_name or func.__name__.replace('_', ' ').title()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            checked = args[1] if len(args) > 1 else kwargs.get('checked', kwargs.get('state', False))
            state = "–≤–∫–ª—é—á–µ–Ω" if checked else "–≤—ã–∫–ª—é—á–µ–Ω"
            
            log_to_ui(f"‚òëÔ∏è '{name}' {state}", "INFO")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_radio_change(radio_group: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    
    Args:
        radio_group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            group = radio_group or "–†–∞–¥–∏–æ-–≥—Ä—É–ø–ø–∞"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            value = args[1] if len(args) > 1 else kwargs.get('value', kwargs.get('text', ''))
            
            log_to_ui(f"‚≠ï {group}: –≤—ã–±—Ä–∞–Ω–æ '{value}'", "INFO")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_slider_change(slider_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–ª–∞–π–¥–µ—Ä–æ–≤
    
    Args:
        slider_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = slider_name or func.__name__.replace('_', ' ').title()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
            value = args[1] if len(args) > 1 else kwargs.get('value', 0)
            
            log_to_ui(f"üéöÔ∏è '{name}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {value}", "DEBUG")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_spinbox_change(spinbox_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π SpinBox
    
    Args:
        spinbox_name: –ù–∞–∑–≤–∞–Ω–∏–µ SpinBox
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = spinbox_name or func.__name__.replace('_', ' ').title()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
            value = args[1] if len(args) > 1 else kwargs.get('value', 0)
            
            log_to_ui(f"üî¢ '{name}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {value}", "DEBUG")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_table_action(action: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    
    Args:
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log_to_ui(f"[STATS] –¢–∞–±–ª–∏—Ü–∞: {action}", "INFO")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_dialog_action(dialog_name: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
    
    Args:
        dialog_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log_to_ui(f"üí¨ –û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥: {dialog_name}", "INFO")
            
            result = func(*args, **kwargs)
            
            if result is not None:
                log_to_ui(f"[OK] –î–∏–∞–ª–æ–≥ '{dialog_name}' –∑–∞–∫—Ä—ã—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {result}", "DEBUG")
            
            return result
        return wrapper
    return decorator


def log_validation(validation_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    Args:
        validation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = validation_name or func.__name__.replace('_', ' ').title()
            
            log_to_ui(f"[CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}...", "DEBUG")
            
            try:
                result = func(*args, **kwargs)
                
                if result:
                    log_to_ui(f"[OK] {name}: —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                else:
                    log_to_ui(f"[WARN] {name}: –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞", "WARNING")
                
                return result
                
            except Exception as e:
                log_to_ui(f"[ERROR] {name}: –æ—à–∏–±–∫–∞ - {str(e)}", "ERROR")
                raise
                
        return wrapper
    return decorator


def log_api_call(api_name: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
    
    Args:
        api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log_to_ui(f"[DISCONNECT] API –≤—ã–∑–æ–≤: {api_name}...", "INFO")
            
            try:
                result = func(*args, **kwargs)
                log_to_ui(f"[OK] API {api_name}: —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                return result
            except Exception as e:
                log_to_ui(f"[ERROR] API {api_name} –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
                raise
                
        return wrapper
    return decorator


def log_currency_change(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É
        currency = args[1] if len(args) > 1 else kwargs.get('currency', kwargs.get('token', ''))
        
        log_to_ui(f"üí± –°–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –Ω–∞: {currency}", "INFO")
        
        return func(*args, **kwargs)
    return wrapper


def log_time_change(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏/–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        time_value = args[1] if len(args) > 1 else kwargs.get('time', kwargs.get('interval', ''))
        
        log_to_ui(f"‚è∞ –ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è/–∏–Ω—Ç–µ—Ä–≤–∞–ª: {time_value}", "INFO")
        
        return func(*args, **kwargs)
    return wrapper


class EnhancedLogger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UI
    """
    
    def __init__(self, name: str, ui_handler: Optional[Callable] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
            ui_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ UI
        """
        self.logger = logging.getLogger(name)
        self.ui_handler = ui_handler
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if ui_handler:
            set_ui_log_handler(ui_handler)
    
    def log(self, message: str, level: str = "INFO"):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        log_level = getattr(logging, level.upper(), logging.INFO)
        self.logger.log(log_level, message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ UI
        log_to_ui(message, level)
    
    def debug(self, message: str):
        """Debug —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log(message, "DEBUG")
    
    def info(self, message: str):
        """Info —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log(message, "INFO")
    
    def warning(self, message: str):
        """Warning —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log(message, "WARNING")
    
    def error(self, message: str):
        """Error —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log(message, "ERROR")
    
    def success(self, message: str):
        """Success —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log(message, "SUCCESS")
    
    def transaction(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        self.log(f"[MONEY] {message}", "INFO")
    
    def network(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ—Ç–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.log(f"[WEB] {message}", "INFO")
    
    def action(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.log(f"‚ñ∂ {message}", "INFO")
