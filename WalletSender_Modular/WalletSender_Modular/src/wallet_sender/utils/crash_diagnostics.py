"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∫—Ä–∞—à–∞
–í–µ—Ä—Å–∏—è 2.4.20
"""

import sys
import traceback
import functools
from datetime import datetime

# –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
TRACE_FILE = "execution_trace.txt"

def trace_execution(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é
        trace_msg = f"[{datetime.now().strftime('%H:%M:%S.%f')[:-3]}] >>> ENTER: {func.__module__}.{func.__name__}"
        print(trace_msg)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(TRACE_FILE, "a", encoding="utf-8") as f:
            f.write(trace_msg + "\n")
            
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = func(*args, **kwargs)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥
            trace_msg = f"[{datetime.now().strftime('%H:%M:%S.%f')[:-3]}] <<< EXIT: {func.__module__}.{func.__name__} (OK)"
            print(trace_msg)
            
            with open(TRACE_FILE, "a", encoding="utf-8") as f:
                f.write(trace_msg + "\n")
                
            return result
            
        except Exception as e:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            trace_msg = f"[{datetime.now().strftime('%H:%M:%S.%f')[:-3]}] !!! ERROR in {func.__module__}.{func.__name__}: {e}"
            print(trace_msg)
            
            with open(TRACE_FILE, "a", encoding="utf-8") as f:
                f.write(trace_msg + "\n")
                f.write(f"Traceback:\n{traceback.format_exc()}\n")
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            raise
            
    return wrapper

def check_qt_thread():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Qt"""
    try:
        from PyQt5.QtCore import QThread
        current = QThread.currentThread()
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        from PyQt5.QtWidgets import QApplication
        app = QApplication.instance()
        if app:
            main_thread = app.thread()
            if current != main_thread:
                msg = f"WARNING: Qt operation in wrong thread! Current: {current}, Main: {main_thread}"
                print(msg)
                with open(TRACE_FILE, "a", encoding="utf-8") as f:
                    f.write(msg + "\n")
                return False
        return True
    except:
        return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ –æ–∫

def trace_qt_operation(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Qt –æ–ø–µ—Ä–∞—Ü–∏–π"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫ –ø–µ—Ä–µ–¥ Qt –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        if not check_qt_thread():
            trace_msg = f"!!! Qt THREAD VIOLATION in {func.__module__}.{func.__name__}"
            print(trace_msg)
            with open(TRACE_FILE, "a", encoding="utf-8") as f:
                f.write(trace_msg + "\n")
        
        return trace_execution(func)(*args, **kwargs)
    
    return wrapper

def diagnose_crash_point():
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞ –ø–æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ"""
    try:
        with open(TRACE_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ENTER –±–µ–∑ EXIT
        enter_stack = []
        for line in lines:
            if ">>> ENTER:" in line:
                func_name = line.split(">>> ENTER:")[1].strip()
                enter_stack.append(func_name)
            elif "<<< EXIT:" in line:
                func_name = line.split("<<< EXIT:")[1].split("(")[0].strip()
                if enter_stack and enter_stack[-1] == func_name:
                    enter_stack.pop()
        
        if enter_stack:
            print("\n" + "="*50)
            print("üî¥ –¢–û–ß–ö–ê –ö–†–ê–®–ê –ù–ê–ô–î–ï–ù–ê!")
            print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥ –∫—Ä–∞—à–µ–º: {enter_stack[-1]}")
            print("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç –∫—Ä–∞—à–∞:")
            for i, func in enumerate(enter_stack):
                print(f"  {'  '*i}‚îî‚îÄ> {func}")
            print("="*50)
            return enter_stack[-1]
        else:
            print("[OK] –ö—Ä–∞—à–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ")
            return None
            
    except FileNotFoundError:
        print("–§–∞–π–ª —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π.")
        return None

# –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
with open(TRACE_FILE, "w", encoding="utf-8") as f:
    f.write(f"=== Execution trace started at {datetime.now()} ===\n")

print(f"[OK] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤ {TRACE_FILE}")
