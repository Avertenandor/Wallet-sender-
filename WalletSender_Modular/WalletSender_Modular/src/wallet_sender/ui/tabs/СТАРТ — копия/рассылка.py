#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WalletSender.py ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤ BSC –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π —Å GUI.

üß≠ MCP Navigation Tags:
- #MCP:IMPORTS     - –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å—Ç—Ä–æ–∫–∏ 1-100)
- #MCP:CONSTANTS   - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å—Ç—Ä–æ–∫–∏ 70-110)  
- #MCP:UTILS       - –£—Ç–∏–ª–∏—Ç—ã –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã (—Å—Ç—Ä–æ–∫–∏ 110-150)
- #MCP:CONFIG      - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (—Å—Ç—Ä–æ–∫–∏ 150-250)
- #MCP:RPC         - RPC –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–∏ 250-350)
- #MCP:CACHE       - –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä–æ–∫–∏ 350-380)
- #MCP:DATABASE    - SQLite –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 380-700)
- #MCP:API         - Etherscan API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è BSC (—Å—Ç—Ä–æ–∫–∏ 700-900)
- #MCP:GUI         - PyQt5 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å—Ç—Ä–æ–∫–∏ 863-4735)
- #MCP:MAIN        - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ 4730-4735)

üè∑Ô∏è Development Control Tags:
- #TODO:MCP        - –ó–∞–¥–∞—á–∏ –¥–ª—è MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- #REFACTOR:MCP    - –ú–µ—Å—Ç–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞  
- #OPTIMIZE:MCP    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- #SECURITY:MCP    - –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- #DOCS:MCP        - –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
"""

# ======== #MCP:IMPORTS ========
from typing import Callable, Any, TypeVar, Optional, Dict, List, Union, Tuple, Set, TypedDict
import sys
import json
import time
import threading
import random
import sqlite3
import os  # #MCP:DB_IMPORT
try:
    from web3 import Web3, HTTPProvider  # type: ignore
    WEB3_AVAILABLE = True
    try:
        from eth_account import Account  # type: ignore
    except Exception:
        Account = None  # type: ignore
        logger.warning("eth_account –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äì –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
except Exception:
    WEB3_AVAILABLE = False
    class Web3:  # type: ignore
        @staticmethod
        def is_address(a):
            return isinstance(a, str) and a.startswith('0x') and len(a) == 42
        @staticmethod
        def to_checksum_address(a):
            return a
    class HTTPProvider:  # type: ignore
        def __init__(self, *args, **kwargs):
            pass
    logger.warning("Web3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äì –±–ª–æ–∫—á–µ–π–Ω —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
from pathlib import Path
import functools
import logging
from datetime import datetime, timedelta
from pathlib import Path
from collections import deque

# –ò–º–ø–æ—Ä—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API, –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ GUI
import requests
from cryptography.fernet import Fernet
from PyQt5 import QtWidgets, QtCore, QtGui
import qdarkstyle
from eth_utils.exceptions import ValidationError

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Qt –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
BOTTOM_DOCK_WIDGET_AREA = 8  # QtCore.Qt.BottomDockWidgetArea
STRETCH_MODE = QtWidgets.QHeaderView.ResizeMode(0)  # QtWidgets.QHeaderView.Stretch
INTERACTIVE_MODE = QtWidgets.QHeaderView.ResizeMode(1)  # QtWidgets.QHeaderView.Interactive  
SELECT_ROWS = QtWidgets.QAbstractItemView.SelectionBehavior(1)  # QtWidgets.QTableView.SelectRows
CUSTOM_CONTEXT_MENU = QtCore.Qt.ContextMenuPolicy(3)  # QtCore.Qt.CustomContextMenu
USER_ROLE = QtCore.Qt.ItemDataRole(256)  # QtCore.Qt.UserRole
ITEM_IS_EDITABLE = QtCore.Qt.ItemFlag(2)  # QtCore.Qt.ItemIsEditable
# –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è QMessageBox
QMSGBOX_YES = 0x00004000  # QtWidgets.QMessageBox.Yes
QMSGBOX_NO = 0x00010000  # QtWidgets.QMessageBox.No
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è Qt.QueuedConnection
QUEUED_CONNECTION = 2  # QtCore.Qt.QueuedConnection

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Web3.py
try:
    from web3.middleware import geth_poa_middleware  # type: ignore
except ImportError:
    try:
        from web3.middleware.geth_poa import geth_poa_middleware  # type: ignore
    except ImportError:
        # –î–ª—è —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Web3.py
        from web3.middleware import ExtraDataToPOAMiddleware as geth_poa_middleware  # type: ignore

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
LOG_DIR = Path("logs")
LOG_DIR.mkdir(exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_DIR / f"wallet_sender_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("WalletSender")

# --- –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ raw —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ –±—ç–∫–∞–ø–∞) ---
def send_raw_tx(w3, raw_tx_bytes):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ raw-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å fallback –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π web3.
    Args:
        w3: –∏–Ω—Å—Ç–∞–Ω—Å Web3
        raw_tx_bytes: –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    Returns:
        HexBytes —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        return w3.eth.send_raw_transaction(raw_tx_bytes)
    except AttributeError:
        # fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        return getattr(w3.eth, 'send_rawTransaction')(raw_tx_bytes)

# ======== #MCP:CONFIG ========
# BSCScan API –∫–ª—é—á–∏ (–±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∏–∑ config.json)
BSCSCAN_KEYS = [
    "ARA9FYMNCIZHTB2PPBSWF686GID9F99P41",
    "ZZ3RSBZPMAPK4FV1HUVWE9X13G9ACJWPJX",
    "ZV525F4QEKK2C3DWNGR69AUF6GG6Y2ZW39"
]
CONFIG_FILE = "config.json"

# –£—Ç–∏–ª–∏—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
def retry(times: int = 3, delay: float = 0.5, exceptions=(Exception,)):
    def decorator(fn):
        @functools.wraps(fn)
        def wrapper(*args, **kwargs):
            last_err = None
            for attempt in range(1, times + 1):
                try:
                    return fn(*args, **kwargs)
                except exceptions as e:
                    last_err = e
                    logger.debug(f"retry {fn.__name__} attempt {attempt}/{times} error: {e}")
                    if attempt < times:
                        time.sleep(delay)
            raise last_err
        return wrapper
    return decorator

# –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ BscScan (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
class BSCScanAPIResponse(TypedDict, total=False):
    status: str
    message: str
    result: Any
class Config:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏ (–∫–ª—é—á, –º–Ω–µ–º–æ–Ω–∏–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    SECURiTY:MCP - –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    def __init__(self, path: Union[str, Path] = "config.json") -> None:
        self.path = Path(path)
        self.data: Dict[str, Any] = {}
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º/–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self._key_file = Path("config.key")
        if self._key_file.exists():
            self._fernet_key = self._key_file.read_text().encode()
        else:
            self._fernet_key = Fernet.generate_key()
            self._key_file.write_text(self._fernet_key.decode())
        self.fernet = Fernet(self._fernet_key)
        self._load()

    def _load(self) -> None:
        if self.path.exists():
            try:
                self.data = json.loads(self.path.read_text(encoding='utf-8'))
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.json: {e}; –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
                self.data = {}
        else:
            self.data = {}

    def _save(self) -> None:
        try:
            self.path.write_text(json.dumps(self.data, ensure_ascii=False, indent=2), encoding='utf-8')
            logger.debug("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

    # --- –°–µ–∫—Ä–µ—Ç—ã ---
    def set_key(self, raw: str) -> None:
        self.data['pk'] = self.fernet.encrypt(raw.encode()).decode()
        self._save()

    def get_key(self) -> Optional[str]:
        try:
            return self.fernet.decrypt(self.data['pk'].encode()).decode() if 'pk' in self.data else None
        except Exception:
            return None

    def set_mnemonic(self, m: str) -> None:
        self.data['mn'] = self.fernet.encrypt(m.encode()).decode()
        self._save()

    def get_mnemonic(self) -> Optional[str]:
        try:
            return self.fernet.decrypt(self.data['mn'].encode()).decode() if 'mn' in self.data else None
        except Exception:
            return None

    # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ---
    def set_gas_price(self, price_gwei: Union[int, float]) -> None:
        self.data['gas_price'] = price_gwei
        self._save()

    def get_gas_price(self) -> Union[int, float]:
        return self.data.get('gas_price', 5)

    def get_repeat_count(self) -> int:
        return int(self.data.get('repeat_count', 1))

    def set_repeat_count(self, count: int) -> None:
        self.data['repeat_count'] = count
        self._save()

    def get_reward_per_tx(self) -> bool:
        return bool(self.data.get('reward_per_tx', False))

    def set_reward_per_tx(self, value: bool) -> None:
        self.data['reward_per_tx'] = bool(value)
        self._save()

# ======== #MCP:RPC ========
# –°–ø–∏—Å–æ–∫ RPC —É–∑–ª–æ–≤ BSC (primary) ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å, –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
RPC_NODES: List[str] = [
    "https://bsc-dataseed.binance.org",
    "https://bsc-dataseed1.binance.org",
    "https://bsc-dataseed2.binance.org",
    "https://bscrpc.com",
]

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ (BSC mainnet)
PLEX_CONTRACT = "0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1"  # PLEX ONE
USDT_CONTRACT = "0x55d398326f99059fF775485246999027B3197955"  # Binance-Peg USDT

# –ö–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞–≥—Ä–∞–¥
REWARDS_CONFIG_DIR = Path(os.path.dirname(__file__)) / "rewards_configs"
REWARDS_CONFIG_DIR.mkdir(exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–ª–æ–∫—á–µ–π–Ω–∞ (BSC). –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å False.
blockchain_enabled = True  # #MCP:BLOCKCHAIN_FLAG

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI ERC-20 (balances, decimals, symbol, name, transfer, allowance, approve, totalSupply)
ERC20_ABI = [
    {"constant":True,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":False,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":False,"stateMutability":"nonpayable","type":"function"},
    {"constant":True,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":False,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":False,"stateMutability":"nonpayable","type":"function"},
    {"constant":True,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":True,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":True,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":False,"stateMutability":"view","type":"function"},
    {"constant":False,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":False,"stateMutability":"nonpayable","type":"function"},
    {"constant":True,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":False,"stateMutability":"view","type":"function"},
    {"anonymous":False,"inputs":[{"indexed":True,"name":"owner","type":"address"},{"indexed":True,"name":"spender","type":"address"},{"indexed":False,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},
    {"anonymous":False,"inputs":[{"indexed":True,"name":"from","type":"address"},{"indexed":True,"name":"to","type":"address"},{"indexed":False,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}
]

class RPCPool:
    """–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π Web3-–ø–æ–¥–∫–ª—é—á–∞—Ç–µ–ª—å.
    
    OPTIMIZE:MCP - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤
    REFACTOR:MCP - –í—ã–¥–µ–ª–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    TODO:MCP - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–∑–ª–æ–≤
    """
    def __init__(self, nodes: List[str]) -> None:
        self.nodes = nodes
        self.idx = 0
        self.node_health: Dict[str, bool] = {node: True for node in nodes}  # –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —É–∑–ª–∞
        self.last_check: Dict[str, datetime] = {node: datetime.min for node in nodes}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_interval = timedelta(minutes=5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

    def _check_node(self, node_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —É–∑–µ–ª –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –æ–Ω"""
        try:
            w3 = Web3(HTTPProvider(node_url, request_kwargs={'timeout': 10}))
            if w3.is_connected():
                block = w3.eth.block_number
                if block > 0:
                    self.node_health[node_url] = True
                    self.last_check[node_url] = datetime.now()
                    logger.debug(f"–£–∑–µ–ª {node_url} —Ä–∞–±–æ—Ç–∞–µ—Ç (–±–ª–æ–∫ {block})")
                    return True
        except Exception as e:
            logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∑–ª–∞ {node_url} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            self.node_health[node_url] = False
            self.last_check[node_url] = datetime.now()
        return False

    def get_healthy_node(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —É–∑–ª–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω
        current = self.nodes[self.idx]
        if (self.node_health[current] and 
            datetime.now() - self.last_check[current] < self.check_interval):
            return current
            
        # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—â–µ–º –ª—é–±–æ–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π —É–∑–µ–ª
        for _ in range(len(self.nodes)):
            self.idx = (self.idx + 1) % len(self.nodes)
            node = self.nodes[self.idx]
            if self._check_node(node):
                return node
                
        # –ï—Å–ª–∏ –≤—Å–µ —É–∑–ª—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ
        return self.nodes[self.idx]

    def web3(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ web3, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É —É–∑–ª—É"""
        if not blockchain_enabled:
            raise RuntimeError("–§—É–Ω–∫—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        node_url = self.get_healthy_node()
        
        # –°–æ–∑–¥–∞–µ–º Web3 —Å —É–∂–µ –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–º geth_poa_middleware
        w3 = Web3(HTTPProvider(node_url, request_kwargs={'timeout': 10}))
        
        # –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —è–≤–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ middleware –¥–ª—è POA —Å–µ—Ç–µ–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π geth_poa_middleware
        try:
            w3.middleware_onion.inject(geth_poa_middleware, layer=0)
        except (AttributeError, TypeError):
            # –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Web3.py
            try:
                w3.middleware_onion.add(geth_poa_middleware)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å POA middleware: {e}")
        
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        if not w3.is_connected():
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∑–ª—É: {node_url}")
            
        logger.debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {node_url}")
        return w3

# ======== #MCP:API_KEYS ========
class APIKeyRotator:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–µ–π API –∫–ª—é—á–µ–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    
    FEATURES:MCP - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–∏ —Å–±–æ—è—Ö
    FEATURES:MCP - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
    SECURITY:MCP - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π
    """
    def __init__(self, keys: List[str]) -> None:
        self.keys = keys.copy()
        self.current_index = 0
        self.failed_keys: Set[str] = set()
        self.key_stats: Dict[str, KeyStats] = {}
        self.last_rotation = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        for key in self.keys:
            self.key_stats[key] = {
                'requests': 0,
                'errors': 0,
                'success': 0,
                'last_used': None
            }
    
    def get_current_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        if not self.keys:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π!")
            
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        current_key = self.keys[self.current_index]
        if current_key in self.failed_keys:
            self._rotate_to_next_working_key()
            current_key = self.keys[self.current_index]
            
        return current_key
    
    def mark_key_success(self, key: str) -> None:
        """–û—Ç–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞"""
        if key in self.key_stats:
            self.key_stats[key]['requests'] += 1
            self.key_stats[key]['success'] += 1
            self.key_stats[key]['last_used'] = datetime.now().isoformat()
            
        # –ï—Å–ª–∏ –∫–ª—é—á –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if key in self.failed_keys:
            self.failed_keys.discard(key)
            logger.info(f"API –∫–ª—é—á –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {key[:8]}...")
    
    def mark_key_failed(self, key: str) -> None:
        """–û—Ç–º–µ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞"""
        if key in self.key_stats:
            self.key_stats[key]['requests'] += 1
            self.key_stats[key]['errors'] += 1
            
        self.failed_keys.add(key)
        logger.warning(f"API –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫: {key[:8]}...")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É
        self._rotate_to_next_working_key()
    
    def _rotate_to_next_working_key(self) -> None:
        """–†–æ—Ç–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –∫–ª—é—á—É"""
        original_index = self.current_index
        attempts = 0
        
        while attempts < len(self.keys):
            self.current_index = (self.current_index + 1) % len(self.keys)
            current_key = self.keys[self.current_index]
            
            if current_key not in self.failed_keys:
                self.last_rotation = datetime.now()
                logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ API –∫–ª—é—á: {current_key[:8]}...")
                return
                
            attempts += 1
        
        # –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if attempts >= len(self.keys):
            logger.warning("–í—Å–µ API –∫–ª—é—á–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! –°–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...")
            self.failed_keys.clear()
            self.current_index = 0
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π"""
        total_requests = sum(stats['requests'] for stats in self.key_stats.values())
        
        return {
            'total_keys': len(self.keys),
            'active_keys': len(self.keys) - len(self.failed_keys),
            'failed_keys': len(self.failed_keys),
            'current_key_index': self.current_index,
            'current_key': self.keys[self.current_index][:8] + "...",
            'total_requests': total_requests,
            'last_rotation': self.last_rotation.isoformat(),
            'key_details': {
                f"{key[:8]}...": {
                    'requests': stats['requests'],
                    'success_rate': (stats['success'] / max(stats['requests'], 1)) * 100,
                    'status': 'BLOCKED' if key in self.failed_keys else 'ACTIVE',
                    'last_used': stats['last_used']
                }
                for key, stats in self.key_stats.items()
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–µ–π
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—Ç–∞—Ç–æ—Ä –Ω–∞ –±–∞–∑–µ –∫–ª—é—á–µ–π –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –Ω–∏–∂–µ –∏–∑ config.json, –µ—Å–ª–∏ –Ω–∞–π–¥—ë–º)
api_key_rotator = APIKeyRotator(BSCSCAN_KEYS)

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ config.json, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
try:
    from pathlib import Path as _Path
    _cfg_path = _Path(CONFIG_FILE)
    if _cfg_path.exists():
        _data = json.loads(_cfg_path.read_text(encoding='utf-8'))
        user_keys: Union[List[str], str, None] = _data.get('bscscan_api_keys') or _data.get('bscscan_keys') or []
        if isinstance(user_keys, list) and user_keys:
            api_key_rotator = APIKeyRotator(user_keys)
            logger.info(f"Etherscan API –∫–ª—é—á–∏ –¥–ª—è BSC –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.json: {len(user_keys)} —à—Ç.")
        elif isinstance(user_keys, str) and user_keys.strip():
            api_key_rotator = APIKeyRotator([user_keys.strip()])
            logger.info("Etherscan API –∫–ª—é—á –¥–ª—è BSC –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ config.json")
except Exception as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Etherscan –∫–ª—é—á–∏ –∏–∑ config.json: {e}")

# === FORCE SINGLE BSC(Etherscan) KEY (User request) ===
# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–ª—é—á, –æ—Ç–∫–ª—é—á–∞—è —Ä–æ—Ç–∞—Ü–∏—é.
# –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ä–æ—Ç–∞—Ü–∏—é ‚Äî —É–¥–∞–ª–∏—Ç–µ/–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫.
_FORCED_BSCSCAN_KEY = "RAI3FTD9W53JPYZ2AHW8IBH9BXUC71NRH1"  # #MCP:FORCED_KEY
if _FORCED_BSCSCAN_KEY:
    try:
        api_key_rotator = APIKeyRotator([_FORCED_BSCSCAN_KEY])
        logger.info("[FORCE] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π BscScan –∫–ª—é—á (—Ä–æ—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    except Exception as _e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á BscScan: {_e}")

# ======== #MCP:CACHE ========
class SimpleCache:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å TTL.
    
    OPTIMIZE:MCP - –î–æ–±–∞–≤–∏—Ç—å LRU —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    REFACTOR:MCP - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    TODO:MCP - –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    def __init__(self) -> None:
        self.store: Dict[str, Tuple[Any, datetime]] = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫—ç—à–∞

    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ"""
        entry = self.store.get(key)
        if entry and datetime.now() - entry[1] < CACHE_TTL:
            return entry[0]
        return None

    def set(self, key: str, val: Any) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à —Å —Ç–µ–∫—É—â–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        self.store[key] = (val, datetime.now())
        
    def clear(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        old_count = len(self.store)
        self.store = {}
        return old_count

cache = SimpleCache()

# ======== #MCP:DATABASE ========
# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (SQLite) ‚Äî —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ–∞–π–ª, –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ —ç—Ç—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É. –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
DB_FILE = os.path.join(os.path.dirname(__file__), 'walletsender.db')  # #MCP:DB_FILE

def get_db_connection() -> sqlite3.Connection:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite —Å –Ω—É–∂–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    
    OPTIMIZE:MCP - –î–æ–±–∞–≤–∏—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    SECURITY:MCP - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SQL injection –∑–∞—â–∏—Ç—É
    """
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row  # –î–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    return conn

def init_db() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    
    REFACTOR:MCP - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã
    DOCS:MCP - –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS history(
            id      INTEGER PRIMARY KEY,
            ts      TEXT,
            token   TEXT,
            to_addr TEXT,
            amount  REAL,
            tx      TEXT,
            status  TEXT DEFAULT 'pending'
        )
    """)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ status, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        cur.execute("ALTER TABLE history ADD COLUMN status TEXT DEFAULT 'pending'")
    except sqlite3.OperationalError:
        pass  # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS found_transactions(
            id          INTEGER PRIMARY KEY,
            ts          TEXT,
            tx_hash     TEXT,
            from_addr   TEXT,
            to_addr     TEXT,
            token_addr  TEXT,
            token_name  TEXT,
            amount      REAL,
            block       INTEGER,
            block_time  TEXT,
            search_data TEXT
        )
    """)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
    cur.execute("""
        CREATE TABLE IF NOT EXISTS sender_transactions(
            id           INTEGER PRIMARY KEY,
            search_time  TEXT,
            sender_addr  TEXT,
            tx_hash      TEXT,
            tx_timestamp TEXT,
            token_name   TEXT,
            amount       REAL,
            block        INTEGER,
            rewarded     INTEGER DEFAULT 0
        )
    """)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
    cur.execute("""
        CREATE TABLE IF NOT EXISTS rewards(
            id           INTEGER PRIMARY KEY,
            address      TEXT,
            plex_amount  REAL,
            usdt_amount  REAL,
            tx_hash      TEXT,
            created_at   TEXT,
            sent         INTEGER DEFAULT 0
        )
    """)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
    cur.execute("""
        CREATE TABLE IF NOT EXISTS mass_distributions (
            id INTEGER PRIMARY KEY,
            created_at TEXT,
            name TEXT,
            token_address TEXT,
            token_symbol TEXT,
            amount_per_tx REAL,
            total_addresses INTEGER,
            total_cycles INTEGER,
            interval_seconds INTEGER,
            status TEXT,
            completed_at TEXT
        )
    """)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    cur.execute("""
        CREATE TABLE IF NOT EXISTS mass_distribution_items (
            id INTEGER PRIMARY KEY,
            distribution_id INTEGER,
            address TEXT,
            cycle INTEGER,
            tx_hash TEXT,
            status TEXT,
            error_message TEXT,
            sent_at TEXT,
            FOREIGN KEY (distribution_id) REFERENCES mass_distributions(id)
        )
    """)
    
    conn.commit()
    conn.close()

def add_history(token: str, to_addr: str, amt: float, tx_hash: str) -> Optional[int]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO history VALUES(NULL,?,?,?,?,?,?)",
        (datetime.now().isoformat(), token, to_addr, amt, tx_hash, 'pending')
    )
    conn.commit()
    row_id = cur.lastrowid
    conn.close()
    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é: {tx_hash}")
    return row_id

def update_tx_status(tx_hash: str, status: str) -> int:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("UPDATE history SET status=? WHERE tx=?", (status, tx_hash))
    conn.commit()
    affected_rows = cur.rowcount
    conn.close()
    logger.debug(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status} ({affected_rows} —Å—Ç—Ä–æ–∫)")
    return affected_rows

def fetch_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT ts,token,to_addr,amount,tx,status FROM history ORDER BY id DESC LIMIT 100")
    rows = cur.fetchall()
    conn.close()
    return rows

def copy_all_transactions_hashes():
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ö–µ—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å—Ç—Ä–æ–∫—É"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT tx FROM history ORDER BY id DESC")
    rows = cur.fetchall()
    conn.close()
    return '\n'.join([row['tx'] for row in rows])

def add_found_transaction(tx_data: Dict[str, Any], search_info: Dict[str, Any]) -> Optional[int]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO found_transactions VALUES(NULL,?,?,?,?,?,?,?,?,?,?)",
        (
            datetime.now().isoformat(),
            tx_data.get('hash', ''),
            tx_data.get('from', ''),
            tx_data.get('to', ''),
            tx_data.get('contractAddress', ''),
            tx_data.get('tokenSymbol', ''),
            float(tx_data.get('value', 0)) / (10 ** int(tx_data.get('tokenDecimal', 18))),
            int(tx_data.get('blockNumber', 0)),
            datetime.fromtimestamp(int(tx_data.get('timeStamp', 0))).isoformat(),
            json.dumps(search_info)
        )
    )
    conn.commit()
    row_id = cur.lastrowid
    conn.close()
    return row_id

def add_sender_transaction(sender_addr: str, tx_info: Dict[str, Any], search_time: str) -> Optional[int]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    cur.execute("SELECT id FROM sender_transactions WHERE tx_hash=?", (tx_info['hash'],))
    if cur.fetchone():
        conn.close()
        return None  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    
    cur.execute(
        "INSERT INTO sender_transactions VALUES(NULL,?,?,?,?,?,?,?,?)",
        (
            search_time,
            sender_addr,
            tx_info['hash'],
            datetime.fromtimestamp(int(tx_info['timestamp'])).isoformat() if tx_info['timestamp'] else None,
            tx_info['token'],
            tx_info['value'],
            tx_info['block'],
            0  # –ù–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
    )
    conn.commit()
    row_id = cur.lastrowid
    conn.close()
    return row_id

def add_reward(address: str, plex_amount: float, usdt_amount: float, tx_hash: Optional[str] = None) -> Optional[int]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO rewards VALUES(NULL,?,?,?,?,?,?)",
        (
            address,
            plex_amount,
            usdt_amount,
            tx_hash,
            datetime.now().isoformat(),
            0  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
    )
    conn.commit()
    row_id = cur.lastrowid
    conn.close()
    return row_id

def get_rewards():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT id, address, plex_amount, usdt_amount, tx_hash, created_at, sent
        FROM rewards
        ORDER BY id DESC
    """)
    rows = cur.fetchall()
    conn.close()
    return rows

def mark_transaction_rewarded(tx_hash: str) -> int:
    """–û—Ç–º–µ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞–∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω–æ–π"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("UPDATE sender_transactions SET rewarded=1 WHERE tx_hash=?", (tx_hash,))
    conn.commit()
    affected_rows = cur.rowcount
    conn.close()
    return affected_rows

def get_unrewarded_transactions(sender_addr: Optional[str] = None) -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    if sender_addr:
        cur.execute("""
            SELECT id, sender_addr, tx_hash, tx_timestamp, token_name, amount
            FROM sender_transactions
            WHERE rewarded=0 AND sender_addr=?
            ORDER BY tx_timestamp DESC
        """, (sender_addr,))
    else:
        cur.execute("""
            SELECT id, sender_addr, tx_hash, tx_timestamp, token_name, amount
            FROM sender_transactions
            WHERE rewarded=0
            ORDER BY sender_addr, tx_timestamp DESC
        """)
    
    rows = cur.fetchall()
    conn.close()
    return rows


def get_transactions_by_sender(sender_addr: str) -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT id, tx_hash, tx_timestamp, token_name, amount, rewarded
        FROM sender_transactions
        WHERE sender_addr=?
        ORDER BY tx_timestamp DESC
    """, (sender_addr,))
    rows = cur.fetchall()
    conn.close()
    return rows

def fetch_found_transactions(limit: int = 1000) -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT ts, tx_hash, from_addr, to_addr, token_addr, token_name, amount, block, block_time, search_data
        FROM found_transactions
        ORDER BY id DESC
        LIMIT ?
    """, (limit,))
    rows = cur.fetchall()
    conn.close()
    return rows

def get_sender_transaction_counts() -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT sender_addr, COUNT(*) as tx_count, 
               SUM(CASE WHEN rewarded=1 THEN 1 ELSE 0 END) as rewarded_count
        FROM sender_transactions
        GROUP BY sender_addr
        ORDER BY tx_count DESC
    """)
    rows = cur.fetchall()
    conn.close()
    return rows

def clear_found_transactions() -> int:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("DELETE FROM found_transactions")
    conn.commit()
    count = cur.rowcount
    conn.close()
    return count

def clear_sender_transactions() -> int:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("DELETE FROM sender_transactions")
    conn.commit()
    count = cur.rowcount
    conn.close()
    return count

# ======== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –Ω–∞–≥—Ä–∞–¥ ========
def save_rewards_config(name: str, addresses: List[str], plex_amounts: Dict[int, float], usdt_amounts: Dict[int, float]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥ –≤ —Ñ–∞–π–ª"""
    config: List[Dict[str, Union[str, float]]] = []
    for i in range(len(addresses)):
        config.append({
            'address': addresses[i],
            'plex': plex_amounts.get(i, 0),
            'usdt': usdt_amounts.get(i, 0)
        })
    
    file_path = REWARDS_CONFIG_DIR / f"{name}.json"
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥: {e}")
        return False

def load_rewards_config(name: str) -> Optional[List[Dict[str, Any]]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥ –∏–∑ —Ñ–∞–π–ª–∞"""
    file_path = REWARDS_CONFIG_DIR / f"{name}.json"
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥: {e}")
        return None

def get_rewards_configs() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞–≥—Ä–∞–¥"""
    try:
        return [f.stem for f in REWARDS_CONFIG_DIR.glob('*.json')]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞–≥—Ä–∞–¥: {e}")
        return []

# ======== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ ========
def add_mass_distribution(name: str, token_address: str, token_symbol: str, amount_per_tx: float, total_addresses: int, total_cycles: int, interval_seconds: int) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO mass_distributions VALUES(NULL,?,?,?,?,?,?,?,?,?,?)",
        (
            datetime.now().isoformat(),
            name,
            token_address,
            token_symbol,
            amount_per_tx,
            total_addresses,
            total_cycles,
            interval_seconds,
            'active',
            None
        )
    )
    conn.commit()
    distribution_id = cur.lastrowid
    conn.close()
    
    if distribution_id is None:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ #{distribution_id}: {name}")
    return distribution_id

def add_mass_distribution_item(distribution_id: int, address: str, cycle: int, tx_hash: str, status: str, error_message: Optional[str] = None) -> Optional[int]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO mass_distribution_items VALUES(NULL,?,?,?,?,?,?,?)",
        (
            distribution_id,
            address,
            cycle,
            tx_hash,
            status,
            error_message,
            datetime.now().isoformat() if status in ['success', 'error'] else None
        )
    )
    conn.commit()
    row_id = cur.lastrowid
    conn.close()
    return row_id

def update_mass_distribution_status(distribution_id: int, status: str) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    completed_at = datetime.now().isoformat() if status in ['completed', 'cancelled'] else None
    
    cur.execute(
        "UPDATE mass_distributions SET status=?, completed_at=? WHERE id=?",
        (status, completed_at, distribution_id)
    )
    conn.commit()
    conn.close()
    logger.info(f"–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ #{distribution_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}")

def get_mass_distributions(limit: int = 100) -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT id, created_at, name, token_symbol, amount_per_tx, total_addresses, 
               total_cycles, status, completed_at
        FROM mass_distributions
        ORDER BY id DESC
        LIMIT ?
    """, (limit,))
    rows = cur.fetchall()
    conn.close()
    return rows

def get_mass_distribution_items(distribution_id: int) -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT address, cycle, tx_hash, status, error_message, sent_at
        FROM mass_distribution_items
        WHERE distribution_id=?
        ORDER BY cycle, address
    """, (distribution_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def get_mass_distribution_statistics(distribution_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cur.execute("""
        SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN status='success' THEN 1 ELSE 0 END) as success_count,
            SUM(CASE WHEN status='error' THEN 1 ELSE 0 END) as error_count,
            SUM(CASE WHEN status='pending' THEN 1 ELSE 0 END) as pending_count
        FROM mass_distribution_items
        WHERE distribution_id=?
    """, (distribution_id,))
    
    stats = cur.fetchone()
    conn.close()
    
    return {
        'total': stats[0] if stats else 0,
        'success': stats[1] if stats else 0,
        'errors': stats[2] if stats else 0,
        'pending': stats[3] if stats else 0
    }

# ======== #MCP:API ========
@retry(times=3)
def bscscan_request(params: Dict[str, Any]) -> BSCScanAPIResponse:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API BscScan —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
    
    OPTIMIZE:MCP - –î–æ–±–∞–≤–∏—Ç—å rate limiting
    REFACTOR:MCP - –í—ã–¥–µ–ª–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
    SECURITY:MCP - –°–∫—Ä—ã—Ç—å API –∫–ª—é—á –∏–∑ –ª–æ–≥–æ–≤
    FEATURES:MCP - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π –ø—Ä–∏ —Å–±–æ—è—Ö
    """
    if not blockchain_enabled:
        raise RuntimeError("–ë–ª–æ–∫—á–µ–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω")
    
    cache_key = str(params)
    cached = cache.get(cache_key)
    if cached:
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ BscScan: {params}")
        return cached
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á —á–µ—Ä–µ–∑ —Ä–æ—Ç–∞—Ç–æ—Ä
    current_key = api_key_rotator.get_current_key()
    params_with_key = params.copy()
    params_with_key.update({'apikey': current_key})
    
    # --- Rate limiting (Free BscScan: ~5 req/sec; –¥–µ–ª–∞–µ–º –º—è–≥–∫–æ 4/—Å–µ–∫) ---
    if not hasattr(bscscan_request, '_req_times'):
        bscscan_request._req_times = deque(maxlen=10)  # type: ignore[attr-defined]
    if not hasattr(bscscan_request, '_lock'):
        bscscan_request._lock = threading.Lock()  # type: ignore[attr-defined]

    with bscscan_request._lock:  # type: ignore[attr-defined]
        now = time.time()
        dq = bscscan_request._req_times  # type: ignore[attr-defined]
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ (>1 —Å–µ–∫)
        while dq and now - dq[0] > 1.0:
            dq.popleft()
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (>=4 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É) ‚Äî –∂–¥—ë–º
        while len(dq) >= 4:
            sleep_for = 1.05 - (now - dq[0])
            if sleep_for > 0:
                logger.debug(f"RateLimit: –ø–∞—É–∑–∞ {sleep_for:.3f}s (–∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É: {len(dq)})")
                time.sleep(sleep_for)
            now = time.time()
            while dq and now - dq[0] > 1.0:
                dq.popleft()
        dq.append(time.time())

    try:
        response = requests.get(BSCSCAN_URL, params=params_with_key, timeout=10)
        if response.status_code != 200:
            logger.warning(f"–û—à–∏–±–∫–∞ HTTP –≤ BscScan: {response.status_code}")
            # –û—Ç–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—Ä–∏ HTTP –æ—à–∏–±–∫–∞—Ö
            api_key_rotator.mark_key_failed(current_key)
            raise Exception(f"–û—à–∏–±–∫–∞ HTTP {response.status_code}")
            
        result: BSCScanAPIResponse = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ API
        if isinstance(result, dict) and result.get('message') == 'No transactions found':
            api_key_rotator.mark_key_success(current_key)
            return {'status': '1', 'message': 'OK', 'result': []}
            
        if not isinstance(result, dict) or result.get('status') != '1':
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ message + result
            raw_message = result.get('message') if isinstance(result, dict) else None
            raw_result = result.get('result') if isinstance(result, dict) else None
            details = ''
            if isinstance(raw_result, str):
                details = raw_result
            elif raw_result is not None:
                try:
                    details = json.dumps(raw_result, ensure_ascii=False)
                except Exception:
                    details = str(raw_result)
            error_msg_base = raw_message or '–û—à–∏–±–∫–∞ Etherscan API'
            detailed_msg = f"{error_msg_base}{(': ' + details) if details else ''}"
            logger.error(f"–û—à–∏–±–∫–∞ Etherscan API: {detailed_msg}")
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –≤—ã—à–µ –ø–æ —Å—Ç–µ–∫—É
            low = detailed_msg.lower()
            rate_limit_keywords = [
                'rate limit', 'max rate', 'maximum rate', 'too many request', 'too many requests', 'limit reached'
            ]
            key_error_keywords = [
                'invalid api key', 'apikey invalid', 'missing api key', 'apikey missing', 'forbidden', 'access denied', 'ban'
            ]
            is_rate_limited = any(k in low for k in rate_limit_keywords)
            is_key_error = any(k in low for k in key_error_keywords)
            
            if is_rate_limited or is_key_error:
                # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∏ –¥–∞—ë–º —à–∞–Ω—Å —Ä–æ—Ç–∞—Ç–æ—Ä—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ
                api_key_rotator.mark_key_failed(current_key)
                if is_rate_limited and 'rate limit' not in low:
                    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–∞ 'rate limit' –≤ Exception, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω—è—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –ø–∞—É–∑—É
                    detailed_msg += ' (rate limit)'
            
            raise Exception(detailed_msg)
            
        # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        cache.set(cache_key, result)
        api_key_rotator.mark_key_success(current_key)
        
        return result
        
    except requests.RequestException as e:
        logger.error(f"–ó–∞–ø—Ä–æ—Å BscScan –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        api_key_rotator.mark_key_failed(current_key)
        raise

# ======== –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ========
def search_transactions_paginated(
    wallet_address: str, 
    token_contract: Optional[str] = None, 
    exact_amount: Optional[float] = None, 
    min_amount: Optional[float] = None, 
    max_amount: Optional[float] = None, 
    page_size: int = 1000, 
    max_pages: int = 100, 
    delay_seconds: int = 1, 
    stop_flag: Optional[Any] = None, 
    track_individual_tx: bool = False
) -> Tuple[List[Dict[str, Any]], Dict[str, int], Optional[Dict[str, List[Dict[str, Any]]]]]:
    """
    –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    
    OPTIMIZE:MCP - –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü
    REFACTOR:MCP - –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    TODO:MCP - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    Args:
        wallet_address (str): –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        token_contract (str, optional): –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        exact_amount (float, optional): –¢–æ—á–Ω–∞—è —Å—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        min_amount (float, optional): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        max_amount (float, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        page_size (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–∞–∫—Å–∏–º—É–º 10000)
        max_pages (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞
        delay_seconds (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        stop_flag (threading.Event, optional): –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞
        track_individual_tx (bool): –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
        
    Returns:
        tuple: (—Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—á–µ—Ç—á–∏–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º)
    """
    if not blockchain_enabled:
        raise RuntimeError("–ë–ª–æ–∫—á–µ–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    base_params: Dict[str, Any] = {
        'module': 'account',
        'action': 'tokentx',
        'address': wallet_address,
        'sort': 'desc',
        'offset': page_size
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if token_contract:
        base_params['contractaddress'] = token_contract
    
    matching_transactions: List[Dict[str, Any]] = []
    sender_counter: Dict[str, int] = {}
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    sender_transactions: Optional[Dict[str, List[Dict[str, Any]]]] = {} if track_individual_tx else None
    
    page = 1
    has_more_data = True
    token_decimals: Dict[str, int] = {}  # –ö—ç—à –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address}")
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ª–∏–º–∏—Ç–∞: —Å—Ç–∞—Ä—Ç–æ–≤–∞—è = delay_seconds
    adaptive_delay = max(delay_seconds, 0.25)
    consecutive_rate_limits = 0

    while has_more_data and page <= max_pages:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if stop_flag and stop_flag.is_set():
            logger.info("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            break
            
        try:
            params = dict(base_params)
            params['page'] = page
            
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
            api_response = bscscan_request(params)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ API –æ—Ç–≤–µ—Ç–∞
            result = api_response.get('result', []) if isinstance(api_response, dict) else []
            
            if not result:
                logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                break
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
            
            for tx in result:
                # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è tx
                if not isinstance(tx, dict):
                    continue
                    
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
                contract_addr = tx.get('contractAddress', '').lower()
                if contract_addr not in token_decimals:
                    token_decimals[contract_addr] = int(tx.get('tokenDecimal', 18))
                
                decimals = token_decimals[contract_addr]
                tx_value = float(tx.get('value', 0)) / (10 ** decimals)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
                if wallet_address.lower() == tx.get('to', '').lower():  # –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                    if exact_amount is not None or (min_amount is not None and max_amount is not None):
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω—É—é —Å—É–º–º—É
                        if exact_amount is not None:
                            if abs(tx_value - exact_amount) < 0.0000001:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å float
                                matching_transactions.append(tx)
                                sender = tx.get('from', '').lower()
                                sender_counter[sender] = sender_counter.get(sender, 0) + 1
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                if track_individual_tx and sender_transactions is not None:
                                    if sender not in sender_transactions:
                                        sender_transactions[sender] = []
                                    tx_info: Dict[str, Any] = {
                                        'hash': tx.get('hash', ''),
                                        'timestamp': tx.get('timeStamp', ''),
                                        'value': tx_value,
                                        'block': tx.get('blockNumber', ''),
                                        'token': tx.get('tokenSymbol', '')
                                    }
                                    sender_transactions[sender].append(tx_info)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º
                        elif min_amount is not None and max_amount is not None:
                            if min_amount <= tx_value <= max_amount:
                                matching_transactions.append(tx)
                                sender = tx.get('from', '').lower()
                                sender_counter[sender] = sender_counter.get(sender, 0) + 1
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                if track_individual_tx and sender_transactions is not None:
                                    if sender not in sender_transactions:
                                        sender_transactions[sender] = []
                                    tx_info: Dict[str, Any] = {
                                        'hash': tx.get('hash', ''),
                                        'timestamp': tx.get('timeStamp', ''),
                                        'value': tx_value,
                                        'block': tx.get('blockNumber', ''),
                                        'token': tx.get('tokenSymbol', '')
                                    }
                                    sender_transactions[sender].append(tx_info)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å—É–º–º–µ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —á–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            if len(result) < page_size:
                has_more_data = False
                logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö")
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                page += 1
                # –ó–∞–¥–µ—Ä–∂–∫–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è)
                time.sleep(adaptive_delay)
        
        except Exception as e:
            err_low = str(e).lower()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
            # –ë–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            time.sleep(adaptive_delay * 2)
            if 'rate limit' in err_low or 'too many request' in err_low:
                consecutive_rate_limits += 1
                backoff = min(10, 2 * consecutive_rate_limits)
                logger.warning(f"Rate limit hit (#{consecutive_rate_limits}). –î–æ–ø. –ø–∞—É–∑–∞ {backoff}s")
                time.sleep(backoff)
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –º–∞–∫—Å 3 —Å–µ–∫
                adaptive_delay = min(3.0, adaptive_delay * 1.5 + 0.1)
            else:
                consecutive_rate_limits = 0
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –Ω–µ rate-limit –æ—à–∏–±–∫–µ
                page += 1
    
    logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(matching_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç {len(sender_counter)} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π")
    return matching_transactions, sender_counter, sender_transactions

def get_token_decimal(token_address):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    if not blockchain_enabled:
        return 18  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ BSCScan API
        api_response = bscscan_request({
            'module': 'token',
            'action': 'tokeninfo',
            'contractaddress': token_address
        })
        
        if isinstance(api_response, dict):
            token_info = api_response.get('result', [])
            if isinstance(token_info, list) and len(token_info) > 0:
                first_item = token_info[0]
                if isinstance(first_item, dict):
                    return int(first_item.get('divisor', 18))
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Web3
        w3 = RPCPool(RPC_NODES).web3()
        token_contract = w3.eth.contract(address=Web3.to_checksum_address(token_address), abi=ERC20_ABI)
        return token_contract.functions.decimals().call()
    
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}: {e}")
        return 18  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# ======== GUI ========
class _QtSignalProxy(QtCore.QObject):
    """–ü—Ä–æ–∫—Å–∏-–æ–±—ä–µ–∫—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
    append_text = QtCore.pyqtSignal(str)


class LogHandler(logging.Handler):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ QTextEdit —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª (GUI-–ø–æ—Ç–æ–∫)."""
    def __init__(self, text_widget: Any):
        super().__init__()
        self.text_widget = text_widget
        self._proxy = _QtSignalProxy()
        if hasattr(self.text_widget, 'append'):
            # queued connection –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
            self._proxy.append_text.connect(self.text_widget.append)
        self.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        
    def emit(self, record):
        try:
            msg = self.format(record)
            self._proxy.append_text.emit(msg)
        except Exception:
            # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–æ–Ω—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –ª–æ–≥–æ–≤
            pass

# ======== #MCP:GUI ========
class MainWindow(QtWidgets.QMainWindow):
    def closeEvent(self, event: QtGui.QCloseEvent) -> None:  # type: ignore
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞.
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, —Ç—Ä–µ–∫–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ/—Å–∫–∞–Ω –ø–æ—Ç–æ–∫–∏.
        """
        try:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤‚Ä¶")

            # –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            if getattr(self, 'mass_distribution_active', False):
                try:
                    self._mass_stop_distribution()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

            # –û–±—â–∏–π —Ç—Ä–µ–∫–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if getattr(self, 'tx_tracker', None) and self.tx_tracker.is_alive():  # type: ignore[attr-defined]
                try:
                    self._tx_tracker_stop_flag = True  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–ª–∞–≥
                except Exception:
                    pass

            # –ü–æ–∏—Å–∫–æ–≤—ã–π –ø–æ—Ç–æ–∫
            if getattr(self, 'search_thread', None) and self.search_thread.is_alive():  # type: ignore[attr-defined]
                try:
                    self._search_stop_flag = True
                except Exception:
                    pass

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã—Å—Ç–∞–≤–∏–º –ø–∞—É–∑—É/—Å—Ç–æ–ø –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            if getattr(self, 'mass_distribution_thread', None) and self.mass_distribution_thread.is_alive():  # type: ignore[attr-defined]
                try:
                    self.mass_distribution_active = False
                except Exception:
                    pass

            # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫–∏ —É—Å–ø–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é
            deadline = time.time() + 2.0
            for th_name in ["mass_distribution_thread", "tx_tracker", "search_thread"]:
                th = getattr(self, th_name, None)
                if th and getattr(th, 'is_alive', lambda: False)():
                    try:
                        remaining = deadline - time.time()
                        if remaining > 0:
                            th.join(timeout=remaining)
                    except Exception:
                        pass

            logger.info("–§–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞.")
        finally:
            event.accept()
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WalletSender
    
    REFACTOR:MCP - –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
    OPTIMIZE:MCP - –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    TODO:MCP - –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    DOCS:MCP - –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
    update_progress_signal = QtCore.pyqtSignal(str, int)
    update_status_signal = QtCore.pyqtSignal(str)
    update_table_signal = QtCore.pyqtSignal(list, dict, dict)
    queue_update_signal = QtCore.pyqtSignal(list)
    queue_item_update_signal = QtCore.pyqtSignal(int, dict)
    completed_item_signal = QtCore.pyqtSignal(dict)
    update_address_status = QtCore.pyqtSignal(int, str)  # row, status –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    found_tx_added_signal = QtCore.pyqtSignal()  # —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    # –î–æ–ø. —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ UI
    update_mass_cycle_label = QtCore.pyqtSignal(str)
    mass_distribution_finished_signal = QtCore.pyqtSignal()
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–¥—Ä–µ—Å–∞ (row, current, total)
    address_progress_signal = QtCore.pyqtSignal(int, int, int)
    mass_stats_signal = QtCore.pyqtSignal(int, int, float, float)  # sent, errors, gas_spent, total_amount

    def __init__(self) -> None:
        super().__init__()
        self.setWindowTitle('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä & –ù–∞–≥—Ä–∞–¥—ã PLEX ONE/USDT')
        self.resize(1000, 800)
        self.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())

        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.cfg = Config()
        init_db()
        self.rpc = RPCPool(RPC_NODES)
        self.pk: Optional[str] = self.cfg.get_key()
        self.mn: Optional[str] = self.cfg.get_mnemonic()
        self.sending: bool = False
        self.tx_tracker: Optional[threading.Thread] = None
        self.search_thread: Optional[threading.Thread] = None
        self.is_searching: bool = False
        self.stop_search_event = threading.Event()
        self.last_rewards_state: Optional[List] = None
        self.reward_per_tx_mode = self.cfg.get_reward_per_tx()
        self.queue_paused = False

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.direct_send_timer = QtCore.QTimer()
        self.direct_send_timer.timeout.connect(self._direct_send_periodic_send)
        self.direct_send_active = False
        self.direct_send_current_period = 0
        self.direct_send_total_periods = 0
        self.direct_send_params: Dict[str, Any] = {}

        # UI
        self._build_ui()

        # –°–∏–≥–Ω–∞–ª—ã
        self.update_progress_signal.connect(self._update_progress)
        self.update_status_signal.connect(self.log)
        self.update_table_signal.connect(self._update_search_results)
        self.queue_update_signal.connect(self._update_queue_table)
        self.queue_item_update_signal.connect(self._update_queue_item)
        self.completed_item_signal.connect(self._add_to_completed_table)
        self.update_address_status.connect(self._update_address_status_ui)
        self.update_mass_cycle_label.connect(self._set_mass_cycle_label)
        self.mass_distribution_finished_signal.connect(self._mass_distribution_finished)
        self.address_progress_signal.connect(self._update_progress_item)
        self.mass_stats_signal.connect(self._update_mass_statistics)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QVector<int> –≤–Ω—É—Ç—Ä–∏ Qt)
        try:
            from PyQt5.QtCore import qRegisterMetaType
            qRegisterMetaType('QVector<int>')  # –ø–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        except Exception:
            pass

        # –õ–æ–≥–∏ –≤ UI
        self.log_handler = LogHandler(self.log_area)
        logger.addHandler(self.log_handler)
        logger.setLevel(logging.INFO)
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        
    @QtCore.pyqtSlot(int, str)
    def _update_address_status_ui(self, row, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥—Ä–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            if not hasattr(self, 'mass_table'):
                return
            if row >= self.mass_table.rowCount():
                return
            status_item = QtWidgets.QTableWidgetItem(status)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status == "‚úì –£—Å–ø–µ—à–Ω–æ":
                status_item.setBackground(QtGui.QColor('#004400'))
            elif status == "‚úó –û—à–∏–±–∫–∞":
                status_item.setBackground(QtGui.QColor('#440000'))
            elif status == "‚ü≥ –û—Ç–ø—Ä–∞–≤–∫–∞...":
                status_item.setBackground(QtGui.QColor('#444400'))
            self.mass_table.setItem(row, 1, status_item)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    @QtCore.pyqtSlot(str)
    def _set_mass_cycle_label(self, text: str) -> None:
        if hasattr(self, 'mass_current_cycle_label') and self.mass_current_cycle_label:
            self.mass_current_cycle_label.setText(text)

    def _build_ui(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        tabs = QtWidgets.QTabWidget()
        tabs.addTab(self._tab_analyze(), '–ê–Ω–∞–ª–∏–∑')
        tabs.addTab(self._tab_paginated_search(), '–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
        tabs.addTab(self._tab_rewards(), '–ù–∞–≥—Ä–∞–¥—ã')
        tabs.addTab(self._tab_tx_rewards(), '–ù–∞–≥—Ä–∞–¥—ã –∑–∞ Tx')
        tabs.addTab(self._tab_direct_send(), '–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞')
        tabs.addTab(self._tab_mass_distribution(), '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')  # #MCP:MASS_DIST - –í–∫–ª–∞–¥–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        tabs.addTab(self._tab_sending_queue(), '–û—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏')  # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
        tabs.addTab(self._tab_ds(), '–î–°')  # #MCP:DS_TAB - –í–∫–ª–∞–¥–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        tabs.addTab(self._tab_history(), '–ò—Å—Ç–æ—Ä–∏—è')
        tabs.addTab(self._tab_found_tx(), '–ù–∞–π–¥–µ–Ω–Ω—ã–µ Tx')
        tabs.addTab(self._tab_settings(), '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        self.setCentralWidget(tabs)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ª–æ–≥–æ–≤ –≤–Ω–∏–∑—É –æ–∫–Ω–∞
        self.log_area = QtWidgets.QTextEdit()
        self.log_area.setReadOnly(True)
        dock = QtWidgets.QDockWidget('–õ–æ–≥')
        dock.setWidget(self.log_area)
        self.addDockWidget(QtCore.Qt.DockWidgetArea(BOTTOM_DOCK_WIDGET_AREA), dock)

    def _update_progress(self, bar_name: str, value: int) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫."""
        try:
            mapping = {
                'scan': 'progress',
                'send': 'progress_send',
                'search': 'progress_search',
                'tx_rewards': 'progress_tx_rewards',
                'direct_send': 'direct_send_progress',
                'mass': 'mass_progress'
            }
            attr = mapping.get(bar_name)
            if not attr:
                return
            widget = getattr(self, attr, None)
            if widget is not None:
                widget.setValue(int(value))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ _update_progress({bar_name}): {e}")

    def log(self, text: str) -> None:
        """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ logger"""
        logger.info(text)

    def _toggle_search_mode(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –º–µ–∂–¥—É —Ç–æ—á–Ω–æ–π —Å—É–º–º–æ–π –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"""
        is_exact_mode = self.radio_exact.isChecked()
        
        # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ª–µ –¥–ª—è —Ç–æ—á–Ω–æ–π —Å—É–º–º—ã
        self.spin_amt.setEnabled(is_exact_mode)
        
        # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ª—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        self.spin_amt_from.setEnabled(not is_exact_mode)
        self.spin_amt_to.setEnabled(not is_exact_mode)
        
        logger.debug(f"–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {'—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞' if is_exact_mode else '–¥–∏–∞–ø–∞–∑–æ–Ω'}")
        
    # --- –í–∫–ª–∞–¥–∫–∞ ¬´–û—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏¬ª ---
    def _tab_sending_queue(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        status_group = QtWidgets.QGroupBox("–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏")
        status_layout = QtWidgets.QVBoxLayout(status_group)
        
        self.queue_status_label = QtWidgets.QLabel("–ù–µ –∞–∫—Ç–∏–≤–Ω–æ")
        self.queue_progress_label = QtWidgets.QLabel("0/0 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        status_layout.addWidget(self.queue_status_label)
        status_layout.addWidget(self.queue_progress_label)
        
        layout.addWidget(status_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.queue_table = QtWidgets.QTableWidget(0, 5)
        self.queue_table.setHorizontalHeaderLabels([
            '–°—Ç–∞—Ç—É—Å', '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è', '–¢–æ–∫–µ–Ω', '–°—É–º–º–∞', '–í—Ä–µ–º—è'
        ])
        header = self.queue_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(STRETCH_MODE)
        self.queue_table.setSelectionBehavior(SELECT_ROWS)
        layout.addWidget(self.queue_table)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        completed_group = QtWidgets.QGroupBox("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        completed_layout = QtWidgets.QVBoxLayout(completed_group)
        
        self.completed_table = QtWidgets.QTableWidget(0, 6)
        self.completed_table.setHorizontalHeaderLabels([
            '–°—Ç–∞—Ç—É—Å', '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è', '–¢–æ–∫–µ–Ω', '–°—É–º–º–∞', '–•—ç—à TX', '–í—Ä–µ–º—è'
        ])
        header = self.completed_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(STRETCH_MODE)  # QHeaderView.Stretch
        self.completed_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.completed_table.setContextMenuPolicy(CUSTOM_CONTEXT_MENU)
        self.completed_table.customContextMenuRequested.connect(self._queue_context_menu)
        completed_layout.addWidget(self.completed_table)
        
        layout.addWidget(completed_group)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QtWidgets.QHBoxLayout()
        
        self.pause_queue_btn = QtWidgets.QPushButton("–ü–∞—É–∑–∞")
        self.pause_queue_btn.setEnabled(False)
        self.pause_queue_btn.clicked.connect(self._pause_sending_queue)
        buttons_layout.addWidget(self.pause_queue_btn)
        
        self.resume_queue_btn = QtWidgets.QPushButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        self.resume_queue_btn.setEnabled(False)
        self.resume_queue_btn.clicked.connect(self._resume_sending_queue)
        buttons_layout.addWidget(self.resume_queue_btn)
        
        self.cancel_queue_btn = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ")
        self.cancel_queue_btn.setEnabled(False)
        self.cancel_queue_btn.clicked.connect(self._cancel_sending_queue)
        buttons_layout.addWidget(self.cancel_queue_btn)
        
        self.export_results_btn = QtWidgets.QPushButton("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.export_results_btn.clicked.connect(self._export_queue_results)
        buttons_layout.addWidget(self.export_results_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API –∫–ª—é—á–µ–π
        self.api_stats_btn = QtWidgets.QPushButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API")
        self.api_stats_btn.clicked.connect(self._show_api_keys_stats)
        buttons_layout.addWidget(self.api_stats_btn)
        
        layout.addLayout(buttons_layout)
        
        return w

    def _pause_sending_queue(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.queue_paused = True
        self.pause_queue_btn.setEnabled(False)
        self.resume_queue_btn.setEnabled(True)
        self.queue_status_label.setText("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def _resume_sending_queue(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.queue_paused = False
        self.pause_queue_btn.setEnabled(True)
        self.resume_queue_btn.setEnabled(False)
        self.queue_status_label.setText("–û—Ç–ø—Ä–∞–≤–∫–∞")
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    def _cancel_sending_queue(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∏?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self.sending = False
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    @QtCore.pyqtSlot(list)
    def _update_queue_table(self, items):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            self.queue_table.setRowCount(0)
            
            for item in items:
                row = self.queue_table.rowCount()
                self.queue_table.insertRow(row)
                
                # –°—Ç–∞—Ç—É—Å
                status_item = QtWidgets.QTableWidgetItem(item['status'])
                if item['status'] == 'success':
                    status_item.setBackground(QtGui.QColor('#004400'))
                elif item['status'] == 'failed':
                    status_item.setBackground(QtGui.QColor('#440000'))
                elif item['status'] == 'processing':
                    status_item.setBackground(QtGui.QColor('#444400'))
                self.queue_table.setItem(row, 0, status_item)
                
                # –ê–¥—Ä–µ—Å
                self.queue_table.setItem(row, 1, QtWidgets.QTableWidgetItem(item['address']))
                
                # –¢–æ–∫–µ–Ω
                self.queue_table.setItem(row, 2, QtWidgets.QTableWidgetItem(item['token']))
                
                # –°—É–º–º–∞
                self.queue_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(item['amount'])))
                
                # –í—Ä–µ–º—è
                time_text = item['time'] if item['time'] else "-"
                self.queue_table.setItem(row, 4, QtWidgets.QTableWidgetItem(time_text))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—á–µ—Ä–µ–¥–∏: {e}")

    @QtCore.pyqtSlot(int, dict)
    def _update_queue_item(self, index, item):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            if index >= self.queue_table.rowCount():
                return
            
            # –°—Ç–∞—Ç—É—Å
            status_item = QtWidgets.QTableWidgetItem(item['status'])
            if item['status'] == 'success':
                status_item.setBackground(QtGui.QColor('#004400'))
            elif item['status'] == 'failed':
                status_item.setBackground(QtGui.QColor('#440000'))
            elif item['status'] == 'processing':
                status_item.setBackground(QtGui.QColor('#444400'))
            self.queue_table.setItem(index, 0, status_item)
            
            # –í—Ä–µ–º—è
            time_text = item['time'] if item['time'] else "-"
            self.queue_table.setItem(index, 4, QtWidgets.QTableWidgetItem(time_text))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")

    @QtCore.pyqtSlot(dict)
    def _add_to_completed_table(self, item):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        try:
            row = self.completed_table.rowCount()
            self.completed_table.insertRow(row)
            
            # –°—Ç–∞—Ç—É—Å
            status_item = QtWidgets.QTableWidgetItem(item['status'])
            if item['status'] == 'success':
                status_item.setBackground(QtGui.QColor('#004400'))
            elif item['status'] == 'failed':
                status_item.setBackground(QtGui.QColor('#440000'))
            self.completed_table.setItem(row, 0, status_item)
            
            # –ê–¥—Ä–µ—Å
            self.completed_table.setItem(row, 1, QtWidgets.QTableWidgetItem(item['address']))
            
            # –¢–æ–∫–µ–Ω
            self.completed_table.setItem(row, 2, QtWidgets.QTableWidgetItem(item['token']))
            
            # –°—É–º–º–∞
            self.completed_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(item['amount'])))
            
            # –•—ç—à TX
            tx_item = QtWidgets.QTableWidgetItem(item['tx_hash'][:10] + "..." + item['tx_hash'][-6:] if item['tx_hash'] else "-")
            if item['tx_hash']:
                tx_item.setToolTip(item['tx_hash'])
                tx_item.setData(USER_ROLE, item['tx_hash'])
            self.completed_table.setItem(row, 4, tx_item)
            
            # –í—Ä–µ–º—è
            time_text = item['time'] if item['time'] else "-"
            self.completed_table.setItem(row, 5, QtWidgets.QTableWidgetItem(time_text))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {e}")

    def _queue_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        menu = QtWidgets.QMenu()
        
        copy_tx = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        copy_addr = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        open_tx = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ BscScan")
        
        action = menu.exec_(self.completed_table.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected = self.completed_table.selectedItems()
        if not selected:
            return
            
        row = selected[0].row()
        tx_hash = self.completed_table.item(row, 4).data(USER_ROLE)
        address = self.completed_table.item(row, 1).text()
        
        if action == copy_tx and tx_hash:
            QtWidgets.QApplication.clipboard().setText(tx_hash)
            logger.info(f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {tx_hash}")
            
        elif action == copy_addr:
            QtWidgets.QApplication.clipboard().setText(address)
            logger.info(f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {address}")
            
        elif action == open_tx and tx_hash:
            url = f"https://bscscan.com/tx/{tx_hash}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ BscScan: {tx_hash}")

    def _export_queue_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏ –≤ CSV"""
        path, _ = QtWidgets.QFileDialog.getSaveFileName(self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '', '*.csv')
        if not path:
            return
        
        try:
            with open(path, 'w', encoding='utf-8') as f:
                f.write('status,address,token,amount,tx_hash,time\n')
                for row in range(self.completed_table.rowCount()):
                    status = self.completed_table.item(row, 0).text()
                    address = self.completed_table.item(row, 1).text()
                    token = self.completed_table.item(row, 2).text()
                    amount = self.completed_table.item(row, 3).text()
                    tx_item = self.completed_table.item(row, 4)
                    tx_hash = tx_item.data(USER_ROLE) if tx_item else ""
                    time = self.completed_table.item(row, 5).text()
                    
                    f.write(f'"{status}","{address}","{token}",{amount},"{tx_hash}","{time}"\n')
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def _show_transaction_results(self, batch_id, transactions):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        result_dialog = QtWidgets.QDialog(self)
        result_dialog.setWindowTitle(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ #{batch_id}")
        result_dialog.resize(800, 600)
        
        layout = QtWidgets.QVBoxLayout(result_dialog)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_text = QtWidgets.QTextEdit()
        result_text.setReadOnly(True)
        result_text.setWordWrapMode(QtGui.QTextOption.NoWrap)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        text = "–î–∞—Ç–∞: " + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + "\n\n"
        text += "ID –ø–∞—Ä—Ç–∏–∏: " + str(batch_id) + "\n\n"
        text += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n"
        
        for tx in transactions:
            text += f"–ê–¥—Ä–µ—Å: {tx['address']}\n"
            text += f"–¢–æ–∫–µ–Ω: {tx['token']}\n"
            text += f"–°—É–º–º–∞: {tx['amount']}\n"
            text += f"–•—ç—à TX: {tx['tx_hash']}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {tx['status']}\n"
            text += "-" * 50 + "\n"
        
        result_text.setText(text)
        layout.addWidget(result_text)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QtWidgets.QHBoxLayout()
        
        copy_all_btn = QtWidgets.QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë")
        copy_all_btn.clicked.connect(lambda: QtWidgets.QApplication.clipboard().setText(text))
        buttons_layout.addWidget(copy_all_btn)
        
        copy_hashes_btn = QtWidgets.QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ö—ç—à–∏")
        copy_hashes_btn.clicked.connect(lambda: QtWidgets.QApplication.clipboard().setText(
            "\n".join([tx['tx_hash'] for tx in transactions])
        ))
        buttons_layout.addWidget(copy_hashes_btn)
        
        export_csv_btn = QtWidgets.QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        export_csv_btn.clicked.connect(lambda: self._export_tx_results_to_csv(transactions, batch_id))
        buttons_layout.addWidget(export_csv_btn)
        
        layout.addLayout(buttons_layout)
        
        result_dialog.exec_()

    def _export_tx_results_to_csv(self, transactions, batch_id):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ CSV —Ñ–∞–π–ª"""
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã #{batch_id}', f'tx_results_{batch_id}.csv', '*.csv'
        )
        if not path:
            return
        
        try:
            with open(path, 'w', encoding='utf-8') as f:
                f.write('address,token,amount,tx_hash,status,time\n')
                for tx in transactions:
                    f.write(f'"{tx["address"]}","{tx["token"]}",{tx["amount"]},"{tx["tx_hash"]}","{tx["status"]}","{tx["time"]}"\n')
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def _show_api_keys_stats(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API –∫–ª—é—á–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        stats = api_key_rotator.get_statistics()
        
        stats_dialog = QtWidgets.QDialog(self)
        stats_dialog.setWindowTitle("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –∫–ª—é—á–µ–π BscScan")
        stats_dialog.resize(700, 500)
        
        layout = QtWidgets.QVBoxLayout(stats_dialog)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = QtWidgets.QTextEdit()
        info_text.setReadOnly(True)
        
        info_content = f"""
üîë –°–¢–ê–¢–ò–°–¢–ò–ö–ê API –ö–õ–Æ–ß–ï–ô BSCSCAN

[STATS] –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats['total_keys']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {stats['active_keys']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {stats['failed_keys']}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–æ—Ç–∞—Ü–∏—è: {stats['last_rotation']}

[TARGET] –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á: {stats['current_key']}

üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º:
"""
        
        for key_masked, details in stats['key_details'].items():
            status_emoji = "üü¢" if details['status'] == 'ACTIVE' else "üî¥"
            info_content += f"""
{status_emoji} –ö–ª—é—á: {key_masked}
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {details['status']}
   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {details['requests']}
   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {details['success_rate']:.1f}%
   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {details['last_used'] or '–ù–∏–∫–æ–≥–¥–∞'}
"""
        
        info_content += f"""

[SETTINGS] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏:
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
‚Ä¢ –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å

üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–æ—Ç–∞—Ü–∏–∏:
1. –ü—Ä–∏ –æ—à–∏–±–∫–µ API - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
3. –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π - —Å–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
4. –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        """
        
        info_text.setPlainText(info_content)
        layout.addWidget(info_text)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QtWidgets.QHBoxLayout()
        
        refresh_btn = QtWidgets.QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(lambda: self._refresh_api_stats(info_text))
        buttons_layout.addWidget(refresh_btn)
        
        reset_btn = QtWidgets.QPushButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏")
        reset_btn.clicked.connect(lambda: self._reset_api_keys(info_text))
        buttons_layout.addWidget(reset_btn)
        
        close_btn = QtWidgets.QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(stats_dialog.close)
        buttons_layout.addWidget(close_btn)
        
        layout.addLayout(buttons_layout)
        
        stats_dialog.exec_()
    
    def _refresh_api_stats(self, text_widget: QtWidgets.QTextEdit) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API –∫–ª—é—á–µ–π"""
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = api_key_rotator.get_statistics()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        info_content = f"""
üîë –°–¢–ê–¢–ò–°–¢–ò–ö–ê API –ö–õ–Æ–ß–ï–ô BSCSCAN (–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})

[STATS] –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats['total_keys']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {stats['active_keys']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {stats['failed_keys']}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–æ—Ç–∞—Ü–∏—è: {stats['last_rotation']}

[TARGET] –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á: {stats['current_key']}

üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º:
"""
        
        for key_masked, details in stats['key_details'].items():
            status_emoji = "üü¢" if details['status'] == 'ACTIVE' else "üî¥"
            info_content += f"""
{status_emoji} –ö–ª—é—á: {key_masked}
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {details['status']}
   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {details['requests']}
   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {details['success_rate']:.1f}%
   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {details['last_used'] or '–ù–∏–∫–æ–≥–¥–∞'}
"""
        
        info_content += """

[SETTINGS] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏:
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
‚Ä¢ –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å
        """
        
        text_widget.setPlainText(info_content)
    
    def _reset_api_keys(self, text_widget: QtWidgets.QTextEdit) -> None:
        """–°–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤—Å–µ—Ö API –∫–ª—é—á–µ–π"""
        api_key_rotator.failed_keys.clear()
        api_key_rotator.current_index = 0
        logger.info("–í—Å–µ API –∫–ª—é—á–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤—Ä—É—á–Ω—É—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._refresh_api_stats(text_widget)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        QtWidgets.QMessageBox.information(
            self, 
            "–ö–ª—é—á–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", 
            "–í—Å–µ API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–ª—é—á."
        )

    # --- –í–∫–ª–∞–¥–∫–∞ ¬´–ù–∞–≥—Ä–∞–¥—ã –∑–∞ Tx¬ª ---
    def _tab_tx_rewards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        reward_settings = QtWidgets.QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è")
        reward_layout = QtWidgets.QHBoxLayout(reward_settings)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        self.reward_per_tx_checkbox = QtWidgets.QCheckBox("–ù–∞–≥—Ä–∞–∂–¥–∞—Ç—å –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        self.reward_per_tx_checkbox.setChecked(self.reward_per_tx_mode)
        self.reward_per_tx_checkbox.toggled.connect(self._toggle_reward_mode)
        reward_layout.addWidget(self.reward_per_tx_checkbox)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.scan_tx_btn = QtWidgets.QPushButton("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        self.scan_tx_btn.clicked.connect(self._scan_transactions_for_rewards)
        reward_layout.addWidget(self.scan_tx_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        self.clear_tx_data_btn = QtWidgets.QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.clear_tx_data_btn.clicked.connect(self._clear_tx_data)
        reward_layout.addWidget(self.clear_tx_data_btn)
        
        layout.addWidget(reward_settings)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã
        reward_size_group = QtWidgets.QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã")
        reward_size_layout = QtWidgets.QHBoxLayout(reward_size_group)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
        self.reward_token_group = QtWidgets.QButtonGroup(w)
        self.reward_plex_radio = QtWidgets.QRadioButton('PLEX ONE')
        self.reward_usdt_radio = QtWidgets.QRadioButton('USDT')
        self.reward_both_radio = QtWidgets.QRadioButton('–û–±–∞ (PLEX ONE –∏ USDT)')
        self.reward_plex_radio.setChecked(True)
        self.reward_token_group.addButton(self.reward_plex_radio)
        self.reward_token_group.addButton(self.reward_usdt_radio)
        self.reward_token_group.addButton(self.reward_both_radio)

        token_layout = QtWidgets.QVBoxLayout()
        token_layout.addWidget(QtWidgets.QLabel("–¢–∏–ø —Ç–æ–∫–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã:"))
        token_layout.addWidget(self.reward_plex_radio)
        token_layout.addWidget(self.reward_usdt_radio)
        token_layout.addWidget(self.reward_both_radio)
        reward_size_layout.addLayout(token_layout)

        # –í–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã
        size_layout = QtWidgets.QVBoxLayout()
        size_layout.addWidget(QtWidgets.QLabel("–†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã:"))

        # PLEX ONE —Ä–∞–∑–º–µ—Ä
        plex_layout = QtWidgets.QHBoxLayout()
        plex_layout.addWidget(QtWidgets.QLabel("PLEX ONE:"))
        self.reward_plex_size = QtWidgets.QDoubleSpinBox()
        self.reward_plex_size.setRange(0, 1000)
        self.reward_plex_size.setDecimals(2)
        self.reward_plex_size.setValue(3.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 PLEX ONE
        plex_layout.addWidget(self.reward_plex_size)
        size_layout.addLayout(plex_layout)

        # USDT —Ä–∞–∑–º–µ—Ä
        usdt_layout = QtWidgets.QHBoxLayout()
        usdt_layout.addWidget(QtWidgets.QLabel("USDT:"))
        self.reward_usdt_size = QtWidgets.QDoubleSpinBox()
        self.reward_usdt_size.setRange(0, 1000) 
        self.reward_usdt_size.setDecimals(2)
        self.reward_usdt_size.setValue(0.3)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.3 USDT
        usdt_layout.addWidget(self.reward_usdt_size)
        size_layout.addLayout(usdt_layout)

        reward_size_layout.addLayout(size_layout)
        layout.addWidget(reward_size_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.tx_senders_table = QtWidgets.QTableWidget(0, 4)
        self.tx_senders_table.setHorizontalHeaderLabels([
            '–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', '–í—Å–µ–≥–æ Tx', '–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–æ', '–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–≥—Ä–∞–¥–∏—Ç—å'
        ])
        header = self.tx_senders_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(0, STRETCH_MODE)
        self.tx_senders_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.tx_senders_table.setContextMenuPolicy(CUSTOM_CONTEXT_MENU)
        self.tx_senders_table.customContextMenuRequested.connect(self._show_tx_senders_menu)
        layout.addWidget(self.tx_senders_table)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        self.sender_tx_table = QtWidgets.QTableWidget(0, 5)
        self.sender_tx_table.setHorizontalHeaderLabels([
            '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', '–í—Ä–µ–º—è', '–¢–æ–∫–µ–Ω', '–°—É–º–º–∞', '–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–æ'
        ])
        header = self.sender_tx_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(0, STRETCH_MODE)
        self.sender_tx_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.sender_tx_table.setContextMenuPolicy(CUSTOM_CONTEXT_MENU)
        self.sender_tx_table.customContextMenuRequested.connect(self._show_sender_tx_menu)
        layout.addWidget(self.sender_tx_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_layout = QtWidgets.QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
        self.create_rewards_btn = QtWidgets.QPushButton("–°–æ–∑–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã")
        self.create_rewards_btn.clicked.connect(self._create_rewards_from_tx)
        action_layout.addWidget(self.create_rewards_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥—Ä–∞–¥
        self.send_tx_rewards_btn = QtWidgets.QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã")
        self.send_tx_rewards_btn.clicked.connect(self._send_rewards_for_tx)
        action_layout.addWidget(self.send_tx_rewards_btn)
        
        layout.addLayout(action_layout)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_tx_rewards = QtWidgets.QProgressBar()
        layout.addWidget(self.progress_tx_rewards)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        QtCore.QTimer.singleShot(100, self._load_tx_senders)
        
        return w

    def _toggle_reward_mode(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        self.reward_per_tx_mode = checked
        self.cfg.set_reward_per_tx(checked)
        logger.info(f"–†–µ–∂–∏–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {'–≤–∫–ª—é—á–µ–Ω' if checked else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    def _scan_transactions_for_rewards(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è"""
        if self.is_searching:
            return logger.warning("–ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            
        # –î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        dialog_layout = QtWidgets.QVBoxLayout(dialog)
        
        form = QtWidgets.QFormLayout()
        
        # –ê–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã
        system_addr = QtWidgets.QLineEdit()
        system_addr.setPlaceholderText("–ê–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã (0x...)")
        form.addRow("–ê–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã:", system_addr)
        
        # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        token_addr = QtWidgets.QLineEdit()
        token_addr.setPlaceholderText("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (0x...)")
        token_addr.setText(PLEX_CONTRACT)
        form.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", token_addr)
        
        # –¢–æ—á–Ω–∞—è —Å—É–º–º–∞
        exact_amount = QtWidgets.QDoubleSpinBox()
        exact_amount.setRange(0, 1000000)
        exact_amount.setDecimals(8)
        exact_amount.setValue(30)
        form.addRow("–¢–æ—á–Ω–∞—è —Å—É–º–º–∞:", exact_amount)
        
        dialog_layout.addLayout(form)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        dialog_layout.addWidget(buttons)
        
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            sys_addr = system_addr.text().strip()
            token = token_addr.text().strip()
            amount = exact_amount.value()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞
            if blockchain_enabled:
                if not Web3.is_address(sys_addr):
                    return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã")
                if not Web3.is_address(token):
                    return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.is_searching = True
            self.stop_search_event.clear()
            self.update_progress_signal.emit("tx_rewards", 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.scan_tx_btn.setEnabled(False)
            self.clear_tx_data_btn.setEnabled(False)
            
            threading.Thread(
                target=self._scan_tx_thread,
                args=(sys_addr, token, amount),
                daemon=True
            ).start()
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {sys_addr}, {token}, {amount}")
    
    def _scan_tx_thread(self, system_addr, token_addr, amount):
        """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –∞–¥—Ä–µ—Å={system_addr}, —Ç–æ–∫–µ–Ω={token_addr}, —Å—É–º–º–∞={amount}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
            transactions, sender_counter, sender_transactions = search_transactions_paginated(
                wallet_address=system_addr,
                token_contract=token_addr,
                exact_amount=amount,
                page_size=1000,
                max_pages=100,
                delay_seconds=1,
                stop_flag=self.stop_search_event,
                track_individual_tx=True  # –í–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            search_time = datetime.now().isoformat()
            total_tx = 0
            
            if sender_transactions:
                for sender, tx_list in sender_transactions.items():
                    for tx_info in tx_list:
                        add_sender_transaction(sender, tx_info, search_time)
                        total_tx += 1
            
            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total_tx} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç {len(sender_counter)} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
            self.update_status_signal.emit("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π")
            QtWidgets.QApplication.processEvents()
            self._load_tx_senders()  # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ª–æ—Ç
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        finally:
            self.is_searching = False
            self.update_progress_signal.emit("tx_rewards", 100)
    
    @QtCore.pyqtSlot()
    def _load_tx_senders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö –∏ –∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            senders = get_sender_transaction_counts()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.tx_senders_table.setRowCount(0)
            
            for sender, tx_count, rewarded_count in senders:
                row = self.tx_senders_table.rowCount()
                self.tx_senders_table.insertRow(row)
                
                # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                self.tx_senders_table.setItem(row, 0, QtWidgets.QTableWidgetItem(sender))
                
                # –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                self.tx_senders_table.setItem(row, 1, QtWidgets.QTableWidgetItem(str(tx_count)))
                
                # –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                self.tx_senders_table.setItem(row, 2, QtWidgets.QTableWidgetItem(str(rewarded_count)))
                
                # –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–≥—Ä–∞–¥–∏—Ç—å
                self.tx_senders_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(tx_count - rewarded_count)))
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.tx_senders_table.rowCount()} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö: {e}")
    
    def _show_tx_senders_menu(self, position):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π"""
        menu = QtWidgets.QMenu()
        
        view_tx = menu.addAction("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        add_to_rewards = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        copy_address = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        open_bscscan = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        
        action = menu.exec_(self.tx_senders_table.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected = self.tx_senders_table.selectedItems()
        if not selected:
            return
            
        row = selected[0].row()
        sender = self.tx_senders_table.item(row, 0).text()
        
        if action == view_tx:
            self._load_sender_transactions(sender)
        
        elif action == add_to_rewards:
            if self.reward_per_tx_mode:
                # –í —Ä–µ–∂–∏–º–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self._add_sender_tx_to_rewards(sender)
            else:
                # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
                self._add_to_rewards_tab(sender)
        
        elif action == copy_address:
            QtWidgets.QApplication.clipboard().setText(sender)
            logger.info(f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {sender}")
        
        elif action == open_bscscan:
            url = f"https://bscscan.com/address/{sender}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç –∞–¥—Ä–µ—Å –≤ BscScan: {sender}")
    
    def _load_sender_transactions(self, sender_addr):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            transactions = get_transactions_by_sender(sender_addr)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.sender_tx_table.setRowCount(0)
            
            for _, tx_hash, timestamp, token, amount, rewarded in transactions:
                row = self.sender_tx_table.rowCount()
                self.sender_tx_table.insertRow(row)
                
                # –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tx_item = QtWidgets.QTableWidgetItem(tx_hash[:10] + "..." + tx_hash[-6:])
                tx_item.setToolTip(tx_hash)
                tx_item.setData(USER_ROLE, tx_hash)
                self.sender_tx_table.setItem(row, 0, tx_item)
                
                # –í—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                self.sender_tx_table.setItem(row, 1, QtWidgets.QTableWidgetItem(timestamp))
                
                # –¢–æ–∫–µ–Ω
                self.sender_tx_table.setItem(row, 2, QtWidgets.QTableWidgetItem(token))
                
                # –°—É–º–º–∞
                self.sender_tx_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(amount)))
                
                # –°—Ç–∞—Ç—É—Å –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
                status_item = QtWidgets.QTableWidgetItem("–î–∞" if rewarded else "–ù–µ—Ç")
                status_item.setData(USER_ROLE, rewarded)
                if rewarded:
                    status_item.setBackground(QtGui.QColor('#004400'))
                self.sender_tx_table.setItem(row, 4, status_item)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.sender_tx_table.rowCount()} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_addr}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {e}")
    
    def _show_sender_tx_menu(self, position):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        menu = QtWidgets.QMenu()
        
        open_tx = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ BscScan")
        copy_tx = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à")
        mark_rewarded = menu.addAction("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—É—é")
        add_tx_to_rewards = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        
        action = menu.exec_(self.sender_tx_table.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected = self.sender_tx_table.selectedItems()
        if not selected:
            return
            
        row = selected[0].row()
        tx_hash = self.sender_tx_table.item(row, 0).data(USER_ROLE)
        is_rewarded = self.sender_tx_table.item(row, 4).data(USER_ROLE)
        
        if action == open_tx:
            url = f"https://bscscan.com/tx/{tx_hash}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ BscScan: {tx_hash}")
        
        elif action == copy_tx:
            QtWidgets.QApplication.clipboard().setText(tx_hash)
            logger.info(f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {tx_hash}")
        
        elif action == mark_rewarded:
            if not is_rewarded:
                mark_transaction_rewarded(tx_hash)
                logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω–∞—è")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                status_item = QtWidgets.QTableWidgetItem("–î–∞")
                status_item.setData(USER_ROLE, 1)
                status_item.setBackground(QtGui.QColor('#004400'))
                self.sender_tx_table.setItem(row, 4, status_item)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö
                selected_row = self.tx_senders_table.currentRow()
                if selected_row >= 0:
                    sender = self.tx_senders_table.item(selected_row, 0).text()
                    self._load_tx_senders()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                    for i in range(self.tx_senders_table.rowCount()):
                        if self.tx_senders_table.item(i, 0).text() == sender:
                            self.tx_senders_table.selectRow(i)
                            break
        
        elif action == add_tx_to_rewards:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
            selected_row = self.tx_senders_table.currentRow()
            if selected_row >= 0:
                sender = self.tx_senders_table.item(selected_row, 0).text()
                self._add_tx_to_rewards(sender, tx_hash)
    
    def _add_sender_tx_to_rewards(self, sender_addr):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            transactions = get_unrewarded_transactions(sender_addr)
            
            if not transactions:
                return logger.warning(f"–ù–µ—Ç –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {sender_addr}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥
            self._save_rewards_state()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥
            for _, sender, tx_hash, timestamp, token, amount in transactions:
                row = self.table_rewards.rowCount()
                self.table_rewards.insertRow(row)
                
                # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                addr_item = QtWidgets.QTableWidgetItem(sender)
                addr_item.setData(USER_ROLE, tx_hash)
                self.table_rewards.setItem(row, 0, addr_item)
                
                # PLEX - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                plex_item = QtWidgets.QTableWidgetItem("3")
                plex_item.setFlags(plex_item.flags() | ITEM_IS_EDITABLE)
                self.table_rewards.setItem(row, 1, plex_item)
                
                # USDT - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                usdt_item = QtWidgets.QTableWidgetItem("")
                usdt_item.setFlags(usdt_item.flags() | ITEM_IS_EDITABLE)
                self.table_rewards.setItem(row, 2, usdt_item)
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_addr} –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
    
    def _add_tx_to_rewards(self, sender_addr, tx_hash):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥
            for row in range(self.table_rewards.rowCount()):
                item = self.table_rewards.item(row, 0)
                if item and item.data(USER_ROLE) == tx_hash:
                    logger.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥")
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            row = self.table_rewards.rowCount()
            self.table_rewards.insertRow(row)
            
            # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            addr_item = QtWidgets.QTableWidgetItem(sender_addr)
            addr_item.setData(USER_ROLE, tx_hash)
            self.table_rewards.setItem(row, 0, addr_item)
            
            # PLEX - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            plex_item = QtWidgets.QTableWidgetItem("3")
            plex_item.setFlags(plex_item.flags() | ITEM_IS_EDITABLE)
            self.table_rewards.setItem(row, 1, plex_item)
            
            # USDT - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            usdt_item = QtWidgets.QTableWidgetItem("")
            usdt_item.setFlags(usdt_item.flags() | ITEM_IS_EDITABLE)
            self.table_rewards.setItem(row, 2, usdt_item)
            
            logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
    def _create_rewards_from_tx(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = get_unrewarded_transactions()
            
            if not transactions:
                return logger.warning("–ù–µ—Ç –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            reply = QtWidgets.QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                f'–°–æ–∑–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è {len(transactions)} –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π?',
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.No
            )
            
            if reply != QtWidgets.QMessageBox.Yes:
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã
            use_plex = self.reward_plex_radio.isChecked() or self.reward_both_radio.isChecked()
            use_usdt = self.reward_usdt_radio.isChecked() or self.reward_both_radio.isChecked()
            plex_size = self.reward_plex_size.value() if use_plex else 0
            usdt_size = self.reward_usdt_size.value() if use_usdt else 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥
            self._save_rewards_state()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥
            self.table_rewards.setRowCount(0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥
            for _, sender, tx_hash, timestamp, token, amount in transactions:
                row = self.table_rewards.rowCount()
                self.table_rewards.insertRow(row)
                
                # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                addr_item = QtWidgets.QTableWidgetItem(sender)
                addr_item.setData(QtCore.Qt.UserRole, tx_hash)
                self.table_rewards.setItem(row, 0, addr_item)
                
                # PLEX - –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                plex_item = QtWidgets.QTableWidgetItem(str(plex_size) if plex_size > 0 else "")
                plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
                self.table_rewards.setItem(row, 1, plex_item)
                
                # USDT - –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                usdt_item = QtWidgets.QTableWidgetItem(str(usdt_size) if usdt_size > 0 else "")
                usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
                self.table_rewards.setItem(row, 2, usdt_item)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(transactions)} –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –Ω–µ–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥: {e}")
    
    def _send_rewards_for_tx(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if not self.table_rewards.rowCount():
            return logger.warning("–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞–≥—Ä–∞–¥
        has_tx_data = False
        for row in range(self.table_rewards.rowCount()):
            tx_hash = self.table_rewards.item(row, 0).data(QtCore.Qt.UserRole)
            if tx_hash:
                has_tx_data = True
                break
        
        if not has_tx_data:
            return logger.warning("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        self._start_sending(mark_rewarded=True)
    
    def _clear_tx_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            count = clear_sender_transactions()
            self.tx_senders_table.setRowCount(0)
            self.sender_tx_table.setRowCount(0)
            logger.info(f"–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")

    # --- –í–∫–ª–∞–¥–∫–∞ ¬´–ù–∞–≥—Ä–∞–¥—ã¬ª ---
    def _tab_rewards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥
        self.table_rewards = QtWidgets.QTableWidget(0, 3)
        self.table_rewards.setHorizontalHeaderLabels(['–ê–¥—Ä–µ—Å', 'PLEX ONE', 'USDT'])
        header = self.table_rewards.horizontalHeader()
        if header:
            header.setSectionResizeMode(STRETCH_MODE)
        self.table_rewards.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.table_rewards.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.table_rewards.customContextMenuRequested.connect(self._show_rewards_context_menu)
        layout.addWidget(self.table_rewards)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        buttons_layout = QtWidgets.QHBoxLayout()
        
        self.btn_add_row = QtWidgets.QPushButton('–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É')
        self.btn_add_row.clicked.connect(self._add_rewards_row)
        buttons_layout.addWidget(self.btn_add_row)
        
        self.btn_remove_row = QtWidgets.QPushButton('–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ')
        self.btn_remove_row.clicked.connect(self._remove_rewards_row)
        buttons_layout.addWidget(self.btn_remove_row)
        
        self.btn_clear = QtWidgets.QPushButton('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë')
        self.btn_clear.clicked.connect(self._clear_rewards)
        buttons_layout.addWidget(self.btn_clear)
        
        layout.addLayout(buttons_layout)
        
        # –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–º–º —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
        random_group = QtWidgets.QGroupBox("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—É–º–º")
        random_layout = QtWidgets.QVBoxLayout(random_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PLEX
        plex_layout = QtWidgets.QHBoxLayout()
        plex_layout.addWidget(QtWidgets.QLabel('PLEX ONE –¥–∏–∞–ø–∞–∑–æ–Ω:'))
        
        self.plex_min = QtWidgets.QDoubleSpinBox()
        self.plex_min.setRange(0, 10000)
        self.plex_min.setDecimals(2)
        self.plex_min.setValue(2.0)
        plex_layout.addWidget(self.plex_min)
        
        plex_layout.addWidget(QtWidgets.QLabel('-'))
        
        self.plex_max = QtWidgets.QDoubleSpinBox()
        self.plex_max.setRange(0, 10000)
        self.plex_max.setDecimals(2)
        self.plex_max.setValue(4.0)
        plex_layout.addWidget(self.plex_max)
        
        self.btn_random_plex = QtWidgets.QPushButton('–°–ª—É—á–∞–π–Ω—ã–µ PLEX ONE')
        self.btn_random_plex.clicked.connect(self._randomize_plex)
        plex_layout.addWidget(self.btn_random_plex)
        
        random_layout.addLayout(plex_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è USDT
        usdt_layout = QtWidgets.QHBoxLayout()
        usdt_layout.addWidget(QtWidgets.QLabel('USDT –¥–∏–∞–ø–∞–∑–æ–Ω:'))
        
        self.usdt_min = QtWidgets.QDoubleSpinBox()
        self.usdt_min.setRange(0, 10000)
        self.usdt_min.setDecimals(2)
        self.usdt_min.setValue(0.1)
        usdt_layout.addWidget(self.usdt_min)
        
        usdt_layout.addWidget(QtWidgets.QLabel('-'))
        
        self.usdt_max = QtWidgets.QDoubleSpinBox()
        self.usdt_max.setRange(0, 10000)
        self.usdt_max.setDecimals(2)
        self.usdt_max.setValue(0.5)
        usdt_layout.addWidget(self.usdt_max)
        
        self.btn_random_usdt = QtWidgets.QPushButton('–°–ª—É—á–∞–π–Ω—ã–µ USDT')
        self.btn_random_usdt.clicked.connect(self._randomize_usdt)
        usdt_layout.addWidget(self.btn_random_usdt)
        
        random_layout.addLayout(usdt_layout)
        
        layout.addWidget(random_group)
        
        # –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        config_group = QtWidgets.QGroupBox("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞")
        config_layout = QtWidgets.QHBoxLayout(config_group)
        
        self.reward_config_name = QtWidgets.QLineEdit()
        self.reward_config_name.setPlaceholderText('–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
        config_layout.addWidget(self.reward_config_name)
        
        self.btn_save_config = QtWidgets.QPushButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
        self.btn_save_config.clicked.connect(self._save_current_config)
        config_layout.addWidget(self.btn_save_config)
        
        self.configs_combo = QtWidgets.QComboBox()
        self._load_config_list()
        config_layout.addWidget(self.configs_combo)
        
        self.btn_load_config = QtWidgets.QPushButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å')
        self.btn_load_config.clicked.connect(self._load_selected_config)
        config_layout.addWidget(self.btn_load_config)
        
        layout.addWidget(config_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_group = QtWidgets.QGroupBox("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥")
        send_layout = QtWidgets.QVBoxLayout(send_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_group = QtWidgets.QGroupBox("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥")
        send_layout = QtWidgets.QVBoxLayout(send_group)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        params_layout = QtWidgets.QHBoxLayout()
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        self.spin_interval = QtWidgets.QSpinBox()
        self.spin_interval.setRange(1, 600)
        self.spin_interval.setValue(5)  # 5 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        params_layout.addWidget(QtWidgets.QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):"))
        params_layout.addWidget(self.spin_interval)
        
        # –ü–æ–≤—Ç–æ—Ä—ã
        self.btn_repeats = QtWidgets.QPushButton(f"–ü–æ–≤—Ç–æ—Ä–æ–≤: {self.cfg.get_repeat_count()}")
        self.btn_repeats.clicked.connect(self._set_repeats)
        params_layout.addWidget(self.btn_repeats)
        
        send_layout.addLayout(params_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        buttons_send_layout = QtWidgets.QHBoxLayout()
        
        self.btn_start = QtWidgets.QPushButton('–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        self.btn_start.clicked.connect(lambda: self._start_sending())
        buttons_send_layout.addWidget(self.btn_start)
        
        self.stop_btn = QtWidgets.QPushButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
        self.stop_btn.clicked.connect(self._cancel_sending)
        self.stop_btn.setEnabled(False)
        buttons_send_layout.addWidget(self.stop_btn)
        
        send_layout.addLayout(buttons_send_layout)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_send = QtWidgets.QProgressBar()
        send_layout.addWidget(self.progress_send)
        
        layout.addWidget(send_group)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        self._load_rewards_from_db()
        
        return w
    
    def _add_rewards_row(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥"""
        row = self.table_rewards.rowCount()
        self.table_rewards.insertRow(row)
        
        # –ê–¥—Ä–µ—Å
        addr_item = QtWidgets.QTableWidgetItem("")
        self.table_rewards.setItem(row, 0, addr_item)
        
        # PLEX - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        plex_item = QtWidgets.QTableWidgetItem("3")
        plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
        self.table_rewards.setItem(row, 1, plex_item)
        
        # USDT - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        usdt_item = QtWidgets.QTableWidgetItem("")
        usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
        self.table_rewards.setItem(row, 2, usdt_item)
    
    def _remove_rewards_row(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥"""
        selected_rows = set(index.row() for index in self.table_rewards.selectedIndexes())
        for row in sorted(selected_rows, reverse=True):
            self.table_rewards.removeRow(row)
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(selected_rows)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥")
    def _clear_rewards(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞–≥—Ä–∞–¥?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self._save_rewards_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
            self.table_rewards.setRowCount(0)
            logger.info("–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥ –æ—á–∏—â–µ–Ω–∞")
    
    def _randomize_plex(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π PLEX –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        plex_min = self.plex_min.value()
        plex_max = self.plex_max.value()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if plex_min >= plex_max:
            logger.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PLEX ONE –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")
            QtWidgets.QMessageBox.warning(
                self, '–û—à–∏–±–∫–∞', 
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PLEX ONE –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ',
                QtWidgets.QMessageBox.Ok
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
        selected_rows = set(index.row() for index in self.table_rewards.selectedIndexes())
        if not selected_rows:
            selected_rows = range(self.table_rewards.rowCount())
        
        for row in selected_rows:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            value = round(random.uniform(plex_min, plex_max), 2)
            self.table_rewards.setItem(row, 1, QtWidgets.QTableWidgetItem(str(value)))
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PLEX ONE –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {plex_min}-{plex_max} –¥–ª—è {len(selected_rows)} —Å—Ç—Ä–æ–∫")
    
    def _randomize_usdt(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π USDT –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏"""
        # –ó–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        values = [0.12, 0.18, 0.20, 0.24, 0.38]
        weights = [0.70, 0.10, 0.15, 0.025, 0.025]  # –°—É–º–º–∞—Ä–Ω–æ 5% –Ω–∞ 0.24 –∏ 0.38
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
        selected_rows = set(index.row() for index in self.table_rewards.selectedIndexes())
        if not selected_rows:
            selected_rows = range(self.table_rewards.rowCount())
        
        for row in selected_rows:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
            value = random.choices(values, weights=weights, k=1)[0]
            self.table_rewards.setItem(row, 2, QtWidgets.QTableWidgetItem(str(value)))
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è USDT —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è {len(selected_rows)} —Å—Ç—Ä–æ–∫")
    
    def _save_current_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥ –≤ —Ñ–∞–π–ª"""
        name = self.reward_config_name.text().strip()
        if not name:
            return logger.error("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        addresses = []
        plex_amounts = {}
        usdt_amounts = {}
        
        for row in range(self.table_rewards.rowCount()):
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
            addr_item = self.table_rewards.item(row, 0)
            if not addr_item or not addr_item.text().strip():
                continue
            
            address = addr_item.text().strip()
            addresses.append(address)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ PLEX ONE
            plex_item = self.table_rewards.item(row, 1)
            if plex_item and plex_item.text().strip():
                try:
                    plex_amounts[row] = float(plex_item.text())
                except ValueError:
                    pass
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ USDT
            usdt_item = self.table_rewards.item(row, 2)
            if usdt_item and usdt_item.text().strip():
                try:
                    usdt_amounts[row] = float(usdt_item.text())
                except ValueError:
                    pass
        
        if not addresses:
            return logger.error("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if save_rewards_config(name, addresses, plex_amounts, usdt_amounts):
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self._load_config_list()
            self.reward_config_name.clear()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{name}'")
    
    def _load_config_list(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ –∫–æ–º–±–æ–±–æ–∫—Å"""
        self.configs_combo.clear()
        configs = get_rewards_configs()
        self.configs_combo.addItems(configs)
        
        if configs:
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞–≥—Ä–∞–¥")
    
    def _load_selected_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥ –∏–∑ —Ñ–∞–π–ª–∞"""
        config_name = self.configs_combo.currentText()
        if not config_name:
            return logger.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        
        config = load_rewards_config(config_name)
        if not config:
            return logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é '{config_name}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
        self._save_rewards_state()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table_rewards.setRowCount(0)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for item in config:
            row = self.table_rewards.rowCount()
            self.table_rewards.insertRow(row)
            
            # –ê–¥—Ä–µ—Å
            self.table_rewards.setItem(row, 0, QtWidgets.QTableWidgetItem(item['address']))
            
            # PLEX
            plex_value = str(item.get('plex', '')) if item.get('plex', 0) > 0 else ''
            self.table_rewards.setItem(row, 1, QtWidgets.QTableWidgetItem(plex_value))
            
            # USDT
            usdt_value = str(item.get('usdt', '')) if item.get('usdt', 0) > 0 else ''
            self.table_rewards.setItem(row, 2, QtWidgets.QTableWidgetItem(usdt_value))
        
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(config)} –∑–∞–ø–∏—Å–µ–π")
    
    def _set_repeats(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–µ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        value, ok = QtWidgets.QInputDialog.getInt(
            self, '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–µ—Ä–∏–∏:',
            self.cfg.get_repeat_count(), 1, 100, 1
        )
        
        if ok:
            self.cfg.set_repeat_count(value)
            self.btn_repeats.setText(f"–ü–æ–≤—Ç–æ—Ä–æ–≤: {value}")
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {value} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–µ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫")
    
    def _save_rewards_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã"""
        state = []
        for row in range(self.table_rewards.rowCount()):
            row_data = {}
            
            # –ê–¥—Ä–µ—Å
            addr_item = self.table_rewards.item(row, 0)
            if addr_item:
                row_data['address'] = addr_item.text()
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
                tx_hash = addr_item.data(QtCore.Qt.UserRole)
                if tx_hash:
                    row_data['tx_hash'] = tx_hash
            
            # PLEX
            plex_item = self.table_rewards.item(row, 1)
            if plex_item:
                row_data['plex'] = plex_item.text()
            
            # USDT
            usdt_item = self.table_rewards.item(row, 2)
            if usdt_item:
                row_data['usdt'] = usdt_item.text()
            
            state.append(row_data)
        
        self.last_rewards_state = state
    
    def _restore_rewards_state(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥"""
        if not self.last_rewards_state:
            return logger.warning("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table_rewards.setRowCount(0)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row_data in self.last_rewards_state:
            row = self.table_rewards.rowCount()
            self.table_rewards.insertRow(row)
            
            # –ê–¥—Ä–µ—Å
            addr_item = QtWidgets.QTableWidgetItem(row_data.get('address', ''))
            # –ï—Å–ª–∏ –±—ã–ª —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ç–æ–∂–µ
            if 'tx_hash' in row_data:
                addr_item.setData(QtCore.Qt.UserRole, row_data['tx_hash'])
            self.table_rewards.setItem(row, 0, addr_item)
            
            # PLEX
            plex_item = QtWidgets.QTableWidgetItem(row_data.get('plex', ''))
            plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
            self.table_rewards.setItem(row, 1, plex_item)
            
            # USDT
            usdt_item = QtWidgets.QTableWidgetItem(row_data.get('usdt', ''))
            usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
            self.table_rewards.setItem(row, 2, usdt_item)
        
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(self.last_rewards_state)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_rewards_state = None
    def _load_rewards_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            rewards = get_rewards()
            
            for reward in rewards:
                row = self.table_rewards.rowCount()
                self.table_rewards.insertRow(row)
                
                # –ê–¥—Ä–µ—Å
                addr_item = QtWidgets.QTableWidgetItem(reward['address'])
                if reward['tx_hash']:
                    addr_item.setData(QtCore.Qt.UserRole, reward['tx_hash'])
                self.table_rewards.setItem(row, 0, addr_item)
                
                # PLEX
                plex_value = str(reward['plex_amount']) if reward['plex_amount'] > 0 else ''
                plex_item = QtWidgets.QTableWidgetItem(plex_value)
                plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
                self.table_rewards.setItem(row, 1, plex_item)
                
                # USDT
                usdt_value = str(reward['usdt_amount']) if reward['usdt_amount'] > 0 else ''
                usdt_item = QtWidgets.QTableWidgetItem(usdt_value)
                usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
                self.table_rewards.setItem(row, 2, usdt_item)
                
                # –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –≤—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                if reward['sent']:
                    for col in range(self.table_rewards.columnCount()):
                        item = self.table_rewards.item(row, col)
                        if item:
                            item.setBackground(QtGui.QColor('#004400'))
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rewards)} –Ω–∞–≥—Ä–∞–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–≥—Ä–∞–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    def _show_rewards_context_menu(self, position):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥"""
        menu = QtWidgets.QMenu()
        
        add_after = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ")
        remove_row = menu.addAction("–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        copy_addr = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        open_bscscan = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        
        # –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã
        undo_menu = menu.addMenu("–û—Ç–º–µ–Ω–∞/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        restore_state = undo_menu.addAction("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        generate_menu = menu.addMenu("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
        gen_plex = generate_menu.addAction("–°–ª—É—á–∞–π–Ω—ã–µ PLEX –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        gen_usdt = generate_menu.addAction("–°–ª—É—á–∞–π–Ω—ã–µ USDT –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        
        action = menu.exec_(self.table_rewards.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected_rows = list(set(index.row() for index in self.table_rewards.selectedIndexes()))
        
        if not selected_rows and action != restore_state:
            return
            
        if action == add_after:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
            row = max(selected_rows) + 1
            self.table_rewards.insertRow(row)
            
            # –ê–¥—Ä–µ—Å - –ø—É—Å—Ç–æ–π
            self.table_rewards.setItem(row, 0, QtWidgets.QTableWidgetItem(""))
            
            # PLEX - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            plex_item = QtWidgets.QTableWidgetItem("3")
            plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
            self.table_rewards.setItem(row, 1, plex_item)
            
            # USDT - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            usdt_item = QtWidgets.QTableWidgetItem("")
            usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
            self.table_rewards.setItem(row, 2, usdt_item)
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ {row-1}")
        
        elif action == remove_row:
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–¥–≤–∏–≥–∞–ª–∏—Å—å –∏–Ω–¥–µ–∫—Å—ã
            for row in sorted(selected_rows, reverse=True):
                self.table_rewards.removeRow(row)
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(selected_rows)} —Å—Ç—Ä–æ–∫")
        
        elif action == copy_addr:
            # –ö–æ–ø–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            row = selected_rows[0]
            addr_item = self.table_rewards.item(row, 0)
            if addr_item and addr_item.text():
                QtWidgets.QApplication.clipboard().setText(addr_item.text())
                logger.info(f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {addr_item.text()}")
        
        elif action == open_bscscan:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ BscScan
            row = selected_rows[0]
            addr_item = self.table_rewards.item(row, 0)
            if addr_item and addr_item.text():
                url = f"https://bscscan.com/address/{addr_item.text()}"
                QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
                logger.info(f"–û—Ç–∫—Ä—ã—Ç –∞–¥—Ä–µ—Å –≤ BscScan: {addr_item.text()}")
        
        elif action == restore_state:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            self._restore_rewards_state()
        
        elif action == gen_plex:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PLEX –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            for row in selected_rows:
                value = round(random.uniform(2, 4), 2)
                self.table_rewards.setItem(row, 1, QtWidgets.QTableWidgetItem(str(value)))
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PLEX ONE –¥–ª—è {len(selected_rows)} —Å—Ç—Ä–æ–∫")
        
        elif action == gen_usdt:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è USDT –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            for row in selected_rows:
                value = round(random.uniform(0.1, 0.5), 2)
                self.table_rewards.setItem(row, 2, QtWidgets.QTableWidgetItem(str(value)))
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è USDT –¥–ª—è {len(selected_rows)} —Å—Ç—Ä–æ–∫")

    # --- –¢–∞–± ¬´–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞¬ª ---
    def _tab_direct_send(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –§–æ—Ä–º–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
        form = QtWidgets.QFormLayout()
        
        # –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        self.direct_send_address = QtWidgets.QLineEdit()
        self.direct_send_address.setPlaceholderText('0x...')
        form.addRow('–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', self.direct_send_address)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
        self.direct_send_token_group = QtWidgets.QButtonGroup(w)
        self.direct_send_plex_radio = QtWidgets.QRadioButton('PLEX ONE')
        self.direct_send_usdt_radio = QtWidgets.QRadioButton('USDT')
        self.direct_send_plex_radio.setChecked(True)
        self.direct_send_token_group.addButton(self.direct_send_plex_radio)
        self.direct_send_token_group.addButton(self.direct_send_usdt_radio)
        
        token_layout = QtWidgets.QHBoxLayout()
        token_layout.addWidget(self.direct_send_plex_radio)
        token_layout.addWidget(self.direct_send_usdt_radio)
        form.addRow('–¢–∏–ø —Ç–æ–∫–µ–Ω–∞:', token_layout)
        
        # –°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.direct_send_amount = QtWidgets.QDoubleSpinBox()
        self.direct_send_amount.setRange(0.0001, 1000000)
        self.direct_send_amount.setDecimals(8)
        self.direct_send_amount.setValue(3)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Ç–æ–∫–µ–Ω–∞
        form.addRow('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:', self.direct_send_amount)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.direct_send_interval = QtWidgets.QSpinBox()
        self.direct_send_interval.setRange(1, 3600)
        self.direct_send_interval.setValue(60)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
        form.addRow('–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):', self.direct_send_interval)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤
        self.direct_send_periods = QtWidgets.QSpinBox()
        self.direct_send_periods.setRange(0, 10000)
        self.direct_send_periods.setValue(10)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –ø–µ—Ä–∏–æ–¥–æ–≤
        self.direct_send_periods.setSpecialValueText("–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ")  # –¢–µ–∫—Å—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è 0
        form.addRow('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ (0 - –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ):', self.direct_send_periods)
        
        layout.addLayout(form)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QtWidgets.QHBoxLayout()
        
        self.direct_send_start_btn = QtWidgets.QPushButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        self.direct_send_start_btn.clicked.connect(self._start_direct_send_ui)
        buttons_layout.addWidget(self.direct_send_start_btn)
        
        self.direct_send_stop_btn = QtWidgets.QPushButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        self.direct_send_stop_btn.clicked.connect(self._cancel_direct_sending)
        self.direct_send_stop_btn.setEnabled(False)
        buttons_layout.addWidget(self.direct_send_stop_btn)
        
        layout.addLayout(buttons_layout)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.direct_send_progress = QtWidgets.QProgressBar()
        layout.addWidget(self.direct_send_progress)
        
        # –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.direct_send_status = QtWidgets.QTextEdit()
        self.direct_send_status.setReadOnly(True)
        self.direct_send_status.setMaximumHeight(150)
        layout.addWidget(self.direct_send_status)
        
        return w
    def _start_direct_send_ui(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if getattr(self, 'direct_send_active', False):
            return logger.warning("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            
        address = self.direct_send_address.text().strip()
        token_type = 'plex' if self.direct_send_plex_radio.isChecked() else 'usdt'
        amount = self.direct_send_amount.value()
        interval = self.direct_send_interval.value()
        periods = self.direct_send_periods.value()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
        if blockchain_enabled and not Web3.is_address(address):
            return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.direct_send_start_btn.setEnabled(False)
        self.direct_send_stop_btn.setEnabled(True)
        
        # –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self._start_direct_sending(address, token_type, amount, interval, periods)

    def _direct_send_periodic_send(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ç–∞–π–º–µ—Ä—É.
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
        """
        if not self.direct_send_active:
            self.direct_send_timer.stop()
            return
            
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            self.direct_send_current_period += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            status_text = f"–û—Ç–ø—Ä–∞–≤–∫–∞ #{self.direct_send_current_period}"
            if self.direct_send_total_periods > 0:
                status_text += f" –∏–∑ {self.direct_send_total_periods}"
            QtCore.QMetaObject.invokeMethod(
                self.direct_send_status, "append", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(str, status_text)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤
            if (self.direct_send_total_periods > 0 and 
                self.direct_send_current_period > self.direct_send_total_periods):
                logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self.direct_send_active = False
                self.direct_send_timer.stop()
                self.update_progress_signal.emit("direct_send", 100)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                QtCore.QMetaObject.invokeMethod(
                    self.direct_send_start_btn, "setEnabled", 
                    QtCore.Qt.QueuedConnection,
                    QtCore.Q_ARG(bool, True)
                )
                QtCore.QMetaObject.invokeMethod(
                    self.direct_send_stop_btn, "setEnabled", 
                    QtCore.Qt.QueuedConnection,
                    QtCore.Q_ARG(bool, False)
                )
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
            params = self.direct_send_params
            to_addr = params.get('to_addr')
            token_type = params.get('token_type', 'plex')
            amount = params.get('amount', 0)
            
            if not to_addr or amount <= 0:
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                self.direct_send_active = False
                self.direct_send_timer.stop()
                return
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–∫–µ–Ω–∞
            logger.info(f"–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ #{self.direct_send_current_period}: "
                      f"{amount} {token_type.upper()} –Ω–∞ –∞–¥—Ä–µ—Å {to_addr}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ PLEX –∏–ª–∏ USDT –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
            token_addr = PLEX_CONTRACT if token_type.lower() == 'plex' else USDT_CONTRACT
            self._send_token(to_addr, amount, token_addr)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if self.direct_send_total_periods > 0:
                progress = int(self.direct_send_current_period / self.direct_send_total_periods * 100)
                self.update_progress_signal.emit("direct_send", progress)
            else:
                # –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
                self.update_progress_signal.emit("direct_send", self.direct_send_current_period % 100)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            self.direct_send_active = False
            self.direct_send_timer.stop()

    def _start_direct_sending(self, to_addr, token_type, amount, interval, periods=0):
        """
        –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.
        
        Args:
            to_addr (str): –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            token_type (str): –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ ('plex' –∏–ª–∏ 'usdt')
            amount (float): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            interval (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            periods (int, optional): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏, 0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.pk:
            return logger.error("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω")
            
        if not to_addr or amount <= 0 or interval <= 0:
            return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        if self.direct_send_active:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            self.direct_send_active = False
            self.direct_send_timer.stop()
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.direct_send_params = {
            'to_addr': to_addr,
            'token_type': token_type,
            'amount': amount
        }
        self.direct_send_current_period = 0
        self.direct_send_total_periods = periods
        self.direct_send_active = True
        
        # –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
        self.direct_send_status.clear()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.direct_send_timer.setInterval(interval * 1000)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        self.direct_send_timer.start()
        
        status_msg = f"–ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {amount} {token_type.upper()} " \
                     f"–Ω–∞ {to_addr} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫ " \
                     f"({periods} –ø–µ—Ä–∏–æ–¥–æ–≤)" if periods > 0 else "(–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)"
        
        logger.info(status_msg)
        self.direct_send_status.append(status_msg)

    def _cancel_direct_sending(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        if self.direct_send_active:
            self.direct_send_active = False
            self.direct_send_timer.stop()
            logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            self.update_progress_signal.emit("direct_send", 100)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.direct_send_start_btn.setEnabled(True)
            self.direct_send_stop_btn.setEnabled(False)
            self.direct_send_status.append("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def _collect_tasks(self):
        """–°–±–æ—Ä –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        tasks = []
        for i in range(self.table_rewards.rowCount()):
            addr = self.table_rewards.item(i, 0)
            if not addr or not addr.text():
                continue
                
            plex_item = self.table_rewards.item(i, 1)
            usdt_item = self.table_rewards.item(i, 2)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —á–∏—Å–ª–∞
            plex_amount = 0
            if plex_item and plex_item.text():
                try:
                    plex_amount = float(plex_item.text())
                except ValueError:
                    pass
                    
            usdt_amount = 0
            if usdt_item and usdt_item.text():
                try:
                    usdt_amount = float(usdt_item.text())
                except ValueError:
                    pass
                    
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–µ–Ω—É–ª–µ–≤–∞—è —Å—É–º–º–∞
            if plex_amount > 0 or usdt_amount > 0:
                tasks.append((addr, plex_amount, usdt_amount))
                
        return tasks
        
    def _start_sending(self, mark_rewarded=False):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥—Ä–∞–¥"""
        if self.sending:
            return logger.warning("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            
        if not self.pk:
            return logger.error("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω")
            
        tasks = self._collect_tasks()
        if not tasks:
            return logger.error("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        total_plex = sum(plex for _, plex, _ in tasks)
        total_usdt = sum(usdt for _, _, usdt in tasks)
        
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏', 
            f'–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(tasks)} –∞–¥—Ä–µ—Å–∞–º:\n\n'
            f'–í—Å–µ–≥–æ PLEX: {total_plex}\n'
            f'–í—Å–µ–≥–æ USDT: {total_usdt}\n\n'
            f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply != QtWidgets.QMessageBox.Yes:
            return
            
        # –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.sending = True
        self.btn_start.setEnabled(False)
        self.stop_btn.setEnabled(True)
        
        self.repeats_remain = self.cfg.get_repeat_count()
        threading.Thread(
            target=self._sending_thread,
            args=(tasks, self.spin_interval.value(), mark_rewarded),
            daemon=True
        ).start()
    
    def _sending_thread(self, tasks, interval, mark_rewarded=False):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""
        try:
            total = len(tasks)
            batch_id = datetime.now().strftime('%Y%m%d%H%M%S')
            transaction_results = []
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            queue_items = []
            for _, (addr, plex, usdt) in enumerate(tasks):
                if hasattr(addr, 'text'):
                    to_addr = addr.text()
                    tx_hash = addr.data(QtCore.Qt.UserRole)
                else:
                    to_addr = addr
                    tx_hash = None
                    
                if plex > 0:
                    queue_items.append({
                        'status': 'pending',
                        'address': to_addr,
                        'token': 'PLEX',
                        'amount': plex,
                        'time': None,
                        'tx_hash': None,
                        'original_tx': tx_hash  # –ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
                    })
                    
                if usdt > 0:
                    queue_items.append({
                        'status': 'pending',
                        'address': to_addr,
                        'token': 'USDT',
                        'amount': usdt,
                        'time': None,
                        'tx_hash': None,
                        'original_tx': tx_hash  # –ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
                    })
                    
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
            queue_items_copy = queue_items.copy() if queue_items else []
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            self.update_status_signal.emit("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏")
            QtWidgets.QApplication.processEvents()
            self._update_queue_table(queue_items_copy) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
            QtCore.QMetaObject.invokeMethod(
                self.pause_queue_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, True)
            )
            QtCore.QMetaObject.invokeMethod(
                self.cancel_queue_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, True)
            )
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–µ—Ä–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
            while self.repeats_remain > 0 and self.sending:
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–æ–∫ (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {self.repeats_remain})")
                QtCore.QMetaObject.invokeMethod(
                    self.queue_status_label, "setText", 
                    QtCore.Qt.QueuedConnection,
                    QtCore.Q_ARG(str, f"–û—Ç–ø—Ä–∞–≤–∫–∞ (—Å–µ—Ä–∏—è {self.cfg.get_repeat_count() - self.repeats_remain + 1}/{self.cfg.get_repeat_count()})")
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
                completed_count = 0
                for i, item in enumerate(queue_items):
                    if not self.sending or self.queue_paused:
                        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∂–¥–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        while self.queue_paused and self.sending:
                            time.sleep(0.5)
                        
                        if not self.sending:
                            break
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    if item['status'] != 'pending':
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    completed_count += 1
                    progress = int((completed_count / len(queue_items)) * 100)
                    self.update_progress_signal.emit("send", progress)
                    QtCore.QMetaObject.invokeMethod(
                        self.queue_progress_label, "setText", 
                        QtCore.Qt.QueuedConnection,
                        QtCore.Q_ARG(str, f"{completed_count}/{len(queue_items)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞
                    item['status'] = 'processing'
                    self.queue_item_update_signal.emit(i, item)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {item['amount']} {item['token']} –Ω–∞ –∞–¥—Ä–µ—Å {item['address']}")
                    tx_hash = self._send_token(item['address'], item['amount'], item['token'].lower())
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    item['time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    item['tx_hash'] = tx_hash
                    
                    if tx_hash:
                        item['status'] = 'success'
                        transaction_results.append({
                            'address': item['address'],
                            'token': item['token'],
                            'amount': item['amount'],
                            'tx_hash': tx_hash,
                            'status': 'success',
                            'time': item['time']
                        })
                    else:
                        item['status'] = 'failed'
                    
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—É—é –∏ –µ—Å—Ç—å —Ö—ç—à –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    if mark_rewarded and item['original_tx'] and item['status'] == 'success':
                        mark_transaction_rewarded(item['original_tx'])
                        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {item['original_tx']} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω–∞—è")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—á–µ—Ä–µ–¥–∏
                    QtCore.QMetaObject.invokeMethod(
                        self, "_update_queue_item", 
                        QtCore.Qt.QueuedConnection,
                        QtCore.Q_ARG(int, i),
                        QtCore.Q_ARG(dict, item)
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
                    self.completed_item_signal.emit(item)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    if i < len(queue_items) - 1 and self.sending and not self.queue_paused:
                        time.sleep(interval)
                
                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                self.repeats_remain -= 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Ä–∏—è–º–∏
                if self.repeats_remain > 0 and self.sending:
                    logger.info(f"–°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Ä–∏–µ–π (–æ—Å—Ç–∞–ª–æ—Å—å: {self.repeats_remain})")
                    time.sleep(interval * 2)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–µ—Ä–∏—è–º–∏
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.update_progress_signal.emit("send", 100)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            if transaction_results:
                QtCore.QMetaObject.invokeMethod(
                    self, "_show_transaction_results", 
                    QtCore.Qt.QueuedConnection,
                    QtCore.Q_ARG(str, batch_id),
                    QtCore.Q_ARG(list, transaction_results)
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        finally:
            self.sending = False
            self.queue_paused = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            QtCore.QMetaObject.invokeMethod(
                self.btn_start, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, True)
            )
            QtCore.QMetaObject.invokeMethod(
                self.stop_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, False)
            )
            QtCore.QMetaObject.invokeMethod(
                self.pause_queue_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, False)
            )
            QtCore.QMetaObject.invokeMethod(
                self.resume_queue_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, False)
            )
            QtCore.QMetaObject.invokeMethod(
                self.cancel_queue_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, False)
            )
            QtCore.QMetaObject.invokeMethod(
                self.queue_status_label, "setText", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(str, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            )
    
    def _cancel_sending(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if self.sending:
            self.sending = False
            logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            self.stop_btn.setEnabled(False)

    # --- –¢–∞–± ¬´–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π¬ª ---
    def _tab_paginated_search(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        form = QtWidgets.QFormLayout()
        
        # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self.system_address = QtWidgets.QLineEdit()
        self.system_address.setPlaceholderText('0x...')
        form.addRow('–ê–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã (–∫–æ—à–µ–ª—å–∫–∞):', self.system_address)
        
        # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        self.token_address = QtWidgets.QLineEdit()
        self.token_address.setPlaceholderText('0x...')
        self.token_address.setText(PLEX_CONTRACT)
        form.addRow('–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (–∫–æ–Ω—Ç—Ä–∞–∫—Ç):', self.token_address)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
        radio_layout = QtWidgets.QHBoxLayout()
        self.search_mode_group = QtWidgets.QButtonGroup(w)
        self.search_exact_radio = QtWidgets.QRadioButton('–¢–æ—á–Ω–∞—è —Å—É–º–º–∞')
        self.search_range_radio = QtWidgets.QRadioButton('–î–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º')
        self.search_exact_radio.setChecked(True)
        self.search_mode_group.addButton(self.search_exact_radio)
        self.search_mode_group.addButton(self.search_range_radio)
        radio_layout.addWidget(self.search_exact_radio)
        radio_layout.addWidget(self.search_range_radio)
        form.addRow('–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:', radio_layout)
        
        # –¢–æ—á–Ω–∞—è —Å—É–º–º–∞
        self.exact_amount = QtWidgets.QDoubleSpinBox()
        self.exact_amount.setRange(0.0, 1000000.0)
        self.exact_amount.setDecimals(8)
        self.exact_amount.setValue(30.0)  # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 30 PLEX ONE
        form.addRow('–¢–æ—á–Ω–∞—è —Å—É–º–º–∞:', self.exact_amount)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º
        range_layout = QtWidgets.QHBoxLayout()
        self.min_amount = QtWidgets.QDoubleSpinBox()
        self.min_amount.setRange(0.0, 1000000.0)
        self.min_amount.setDecimals(8)
        self.min_amount.setEnabled(False)
        
        self.max_amount = QtWidgets.QDoubleSpinBox()
        self.max_amount.setRange(0.0, 1000000.0)
        self.max_amount.setDecimals(8)
        self.max_amount.setEnabled(False)
        
        range_layout.addWidget(QtWidgets.QLabel('–û—Ç:'))
        range_layout.addWidget(self.min_amount)
        range_layout.addWidget(QtWidgets.QLabel('–î–æ:'))
        range_layout.addWidget(self.max_amount)
        form.addRow('–î–∏–∞–ø–∞–∑–æ–Ω:', range_layout)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.min_tx_count = QtWidgets.QSpinBox()
        self.min_tx_count.setRange(1, 1000)
        self.min_tx_count.setValue(1)
        form.addRow('–ú–∏–Ω. –∫–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', self.min_tx_count)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_layout = QtWidgets.QHBoxLayout()
        
        self.page_size = QtWidgets.QSpinBox()
        self.page_size.setRange(10, 10000)
        self.page_size.setValue(1000)
        pagination_layout.addWidget(QtWidgets.QLabel('–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:'))
        pagination_layout.addWidget(self.page_size)
        
        self.max_pages = QtWidgets.QSpinBox()
        self.max_pages.setRange(1, 1000)
        self.max_pages.setValue(100)
        pagination_layout.addWidget(QtWidgets.QLabel('–ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü:'))
        pagination_layout.addWidget(self.max_pages)
        
        self.api_delay = QtWidgets.QSpinBox()
        self.api_delay.setRange(1, 60)
        self.api_delay.setValue(1)
        pagination_layout.addWidget(QtWidgets.QLabel('–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):'))
        pagination_layout.addWidget(self.api_delay)
        
        form.addRow('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API:', pagination_layout)
        
        # –û–ø—Ü–∏—è –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.track_tx_checkbox = QtWidgets.QCheckBox("–£—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è")
        self.track_tx_checkbox.setChecked(True)
        form.addRow("", self.track_tx_checkbox)
        
        # –ì—Ä—É–ø–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
        date_filter_group = QtWidgets.QGroupBox("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º")
        date_filter_layout = QtWidgets.QVBoxLayout(date_filter_group)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
        date_radio_layout = QtWidgets.QHBoxLayout()
        self.date_filter_group = QtWidgets.QButtonGroup(w)
        self.date_all_time_radio = QtWidgets.QRadioButton('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è')
        self.date_range_radio = QtWidgets.QRadioButton('–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç')
        self.date_all_time_radio.setChecked(True)
        self.date_filter_group.addButton(self.date_all_time_radio)
        self.date_filter_group.addButton(self.date_range_radio)
        date_radio_layout.addWidget(self.date_all_time_radio)
        date_radio_layout.addWidget(self.date_range_radio)
        date_filter_layout.addLayout(date_radio_layout)
        
        # –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        date_range_layout = QtWidgets.QHBoxLayout()
        date_range_layout.addWidget(QtWidgets.QLabel('–û—Ç:'))
        self.date_from = QtWidgets.QDateEdit()
        self.date_from.setDate(QtCore.QDate.currentDate())
        self.date_from.setEnabled(False)
        date_range_layout.addWidget(self.date_from)
        
        date_range_layout.addWidget(QtWidgets.QLabel('–î–æ:'))
        self.date_to = QtWidgets.QDateEdit()
        self.date_to.setDate(QtCore.QDate.currentDate())
        self.date_to.setEnabled(False)
        date_range_layout.addWidget(self.date_to)
        
        # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
        self.today_btn = QtWidgets.QPushButton('–°–µ–≥–æ–¥–Ω—è')
        self.today_btn.clicked.connect(self._set_date_to_today)
        self.today_btn.setEnabled(False)
        date_range_layout.addWidget(self.today_btn)
        
        date_filter_layout.addLayout(date_range_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
        self.date_all_time_radio.toggled.connect(self._toggle_date_filter_mode)
        self.date_range_radio.toggled.connect(self._toggle_date_filter_mode)
        
        layout.addWidget(date_filter_group)
        layout.addLayout(form)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QtWidgets.QHBoxLayout()
        
        self.start_search_btn = QtWidgets.QPushButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
        self.start_search_btn.clicked.connect(self._start_paginated_search)
        buttons_layout.addWidget(self.start_search_btn)
        
        self.stop_search_btn = QtWidgets.QPushButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
        self.stop_search_btn.clicked.connect(self._stop_paginated_search)
        self.stop_search_btn.setEnabled(False)
        buttons_layout.addWidget(self.stop_search_btn)
        
        self.clear_results_btn = QtWidgets.QPushButton('–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
        self.clear_results_btn.clicked.connect(self._clear_search_results)
        buttons_layout.addWidget(self.clear_results_btn)
        
        layout.addLayout(buttons_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.search_results_table = QtWidgets.QTableWidget(0, 3)
        self.search_results_table.setHorizontalHeaderLabels(['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TX', '–ü–æ—Å–ª–µ–¥–Ω—è—è TX'])
        header = self.search_results_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(STRETCH_MODE)
        self.search_results_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.search_results_table.setSelectionMode(QtWidgets.QTableView.ExtendedSelection)
        self.search_results_table.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.search_results_table.customContextMenuRequested.connect(self._show_search_context_menu)
        layout.addWidget(self.search_results_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_layout = QtWidgets.QHBoxLayout()
        
        self.export_csv_btn = QtWidgets.QPushButton('–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV')
        self.export_csv_btn.clicked.connect(self._export_search_results)
        export_layout.addWidget(self.export_csv_btn)
        
        self.copy_to_clipboard_btn = QtWidgets.QPushButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞')
        self.copy_to_clipboard_btn.clicked.connect(self._copy_search_results)
        export_layout.addWidget(self.copy_to_clipboard_btn)
        
        self.import_to_rewards_btn = QtWidgets.QPushButton('–í —Ä–∞–∑–¥–µ–ª –Ω–∞–≥—Ä–∞–¥')
        self.import_to_rewards_btn.clicked.connect(self._import_to_rewards)
        export_layout.addWidget(self.import_to_rewards_btn)
        
        layout.addLayout(export_layout)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_search = QtWidgets.QProgressBar()
        layout.addWidget(self.progress_search)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
        self.search_exact_radio.toggled.connect(self._toggle_search_mode_paginated)
        self.search_range_radio.toggled.connect(self._toggle_search_mode_paginated)
        
        return w

    def _tab_history(self):
        """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ò—Å—Ç–æ—Ä–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∑–∂–µ)."""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        lbl = QtWidgets.QLabel("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        lbl.setWordWrap(True)
        layout.addWidget(lbl)
        layout.addStretch()
        return w
        
    def _toggle_search_mode_paginated(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        is_exact = self.search_exact_radio.isChecked()
        
        self.exact_amount.setEnabled(is_exact)
        self.min_amount.setEnabled(not is_exact)
        self.max_amount.setEnabled(not is_exact)
        
        logger.debug(f"–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {'—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞' if is_exact else '–¥–∏–∞–ø–∞–∑–æ–Ω'}")
    
    def _toggle_date_filter_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º"""
        is_range_mode = self.date_range_radio.isChecked()
        
        # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ª—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        self.date_from.setEnabled(is_range_mode)
        self.date_to.setEnabled(is_range_mode)
        self.today_btn.setEnabled(is_range_mode)
        
        logger.debug(f"–†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {'–¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç' if is_range_mode else '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'}")
    
    def _set_date_to_today(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É '–î–æ' –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"""
        today = QtCore.QDate.currentDate()
        self.date_to.setDate(today)
        logger.debug(f"–î–∞—Ç–∞ '–î–æ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {today.toString('yyyy-MM-dd')}")
        
    def _start_paginated_search(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if self.is_searching:
            return logger.warning("–ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        wallet_address = self.system_address.text().strip()
        token_address = self.token_address.text().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤
        if blockchain_enabled and not Web3.is_address(wallet_address):
            return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
        
        if token_address and blockchain_enabled and not Web3.is_address(token_address):
            return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        exact_amount = None
        min_amount = None
        max_amount = None
        
        if self.search_exact_radio.isChecked():
            exact_amount = self.exact_amount.value()
            if exact_amount <= 0:
                return logger.error("–¢–æ—á–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        else:
            min_amount = self.min_amount.value()
            max_amount = self.max_amount.value()
            if min_amount < 0:
                return logger.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 0")
            if max_amount <= min_amount:
                return logger.error("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        if exact_amount is None and (min_amount is None or max_amount is None):
            return logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ —Ç–æ—á–Ω—É—é —Å—É–º–º—É, –ª–∏–±–æ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page_size = self.page_size.value()
        max_pages = self.max_pages.value()
        delay_seconds = self.api_delay.value()
        min_tx_count = self.min_tx_count.value()
        track_individual_tx = self.track_tx_checkbox.isChecked()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
        date_from = None
        date_to = None
        if self.date_range_radio.isChecked():
            date_from = self.date_from.date().toPyDate()
            date_to = self.date_to.date().toPyDate()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
            if date_from > date_to:
                return logger.error("–î–∞—Ç–∞ '–û—Ç' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ '–î–æ'")
            
            logger.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º: —Å {date_from} –ø–æ {date_to}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.is_searching = True
        self.start_search_btn.setEnabled(False)
        self.stop_search_btn.setEnabled(True)
        self.stop_search_event.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
        self.search_results_table.setRowCount(0)
        
        self.search_thread = threading.Thread(
            target=self._paginated_search_thread, 
            args=(wallet_address, token_address, exact_amount, min_amount, max_amount, 
                  page_size, max_pages, delay_seconds, min_tx_count, track_individual_tx,
                  date_from, date_to),
            daemon=True
        )
        self.search_thread.start()
        
    def _paginated_search_thread(self, wallet_address, token_address, exact_amount, min_amount, max_amount, 
                               page_size, max_pages, delay_seconds, min_tx_count, track_individual_tx,
                               date_from=None, date_to=None):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            search_params = {
                'wallet_address': wallet_address,
                'token_address': token_address,
                'exact_amount': exact_amount,
                'min_amount': min_amount,
                'max_amount': max_amount,
                'min_tx_count': min_tx_count,
                'date_from': date_from.isoformat() if date_from else None,
                'date_to': date_to.isoformat() if date_to else None,
                'search_time': datetime.now().isoformat()
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            matching_txs, sender_counter, sender_transactions = search_transactions_paginated(
                wallet_address=wallet_address,
                token_contract=token_address if token_address else None,
                exact_amount=exact_amount,
                min_amount=min_amount,
                max_amount=max_amount,
                page_size=page_size,
                max_pages=max_pages,
                delay_seconds=delay_seconds,
                stop_flag=self.stop_search_event,
                track_individual_tx=track_individual_tx
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω
            filtered_txs = matching_txs
            if date_from or date_to:
                filtered_txs = []
                for tx in matching_txs:
                    try:
                        tx_time = datetime.fromtimestamp(int(tx.get('timeStamp', 0)))
                        tx_date = tx_time.date()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
                        if date_from and tx_date < date_from:
                            continue
                        if date_to and tx_date > date_to:
                            continue
                        
                        filtered_txs.append(tx)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ: {e}")
                
                logger.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º: {len(matching_txs)} -> {len(filtered_txs)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            for tx in filtered_txs:
                add_found_transaction(tx, search_params)
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É (—Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            search_time = datetime.now().isoformat()
            if track_individual_tx and sender_transactions:
                for sender, tx_list in sender_transactions.items():
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ –¥–∞—Ç–∞–º
                    filtered_tx_list = []
                    for tx_info in tx_list:
                        try:
                            tx_time = datetime.fromtimestamp(int(tx_info.get('timestamp', 0)))
                            tx_date = tx_time.date()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
                            if date_from and tx_date < date_from:
                                continue
                            if date_to and tx_date > date_to:
                                continue
                            
                            filtered_tx_list.append(tx_info)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ –¥–∞—Ç–µ: {e}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    for tx_info in filtered_tx_list:
                        add_sender_transaction(sender, tx_info, search_time)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
            sender_counter_filtered = {}
            for tx in filtered_txs:
                sender = tx.get('from', '').lower()
                sender_counter_filtered[sender] = sender_counter_filtered.get(sender, 0) + 1
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            filtered_senders = {addr: count for addr, count in sender_counter_filtered.items() 
                              if count >= min_tx_count}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
            sender_last_tx = {}
            for tx in filtered_txs:
                try:
                    sender = tx.get('from', '').lower()
                    if sender in filtered_senders:
                        tx_time = datetime.fromtimestamp(int(tx.get('timeStamp', 0)))
                        if sender not in sender_last_tx or tx_time > sender_last_tx[sender][0]:
                            sender_last_tx[sender] = (tx_time, tx.get('hash', ''))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
      
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            results = []
            for sender, count in filtered_senders.items():
                last_tx_info = sender_last_tx.get(sender, (datetime.now(), ''))
                results.append((sender, count, last_tx_info[0].strftime('%Y-%m-%d %H:%M:%S'), last_tx_info[1]))
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
            filtered_sender_transactions = {}
            if track_individual_tx and sender_transactions:
                for sender, tx_list in sender_transactions.items():
                    if sender in filtered_senders:  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                        filtered_tx_list = []
                        for tx_info in tx_list:
                            try:
                                tx_time = datetime.fromtimestamp(int(tx_info.get('timestamp', 0)))
                                tx_date = tx_time.date()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
                                if date_from and tx_date < date_from:
                                    continue
                                if date_to and tx_date > date_to:
                                    continue
                                
                                filtered_tx_list.append(tx_info)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ –¥–∞—Ç–µ: {e}")
                        
                        if filtered_tx_list:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            filtered_sender_transactions[sender] = filtered_tx_list
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            self.update_table_signal.emit(results, filtered_senders, filtered_sender_transactions)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
            completion_message = f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(filtered_senders)} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —Å {min_tx_count}+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"
            if date_from or date_to:
                date_range = f"—Å {date_from} –ø–æ {date_to}" if date_from and date_to else f"—Å {date_from}" if date_from else f"–ø–æ {date_to}"
                completion_message += f" (—Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: {date_range})"
            
            logger.info(completion_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            self.found_tx_added_signal.emit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        finally:
            self.is_searching = False
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            QtCore.QMetaObject.invokeMethod(
                self.start_search_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, True)
            )
            QtCore.QMetaObject.invokeMethod(
                self.stop_search_btn, "setEnabled", 
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(bool, False)
            )
            self.update_progress_signal.emit("search", 100)
    def _update_search_results(self, results, sender_counter, sender_transactions):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.search_results_table.setRowCount(0)
        
        for sender, count, last_tx_time, last_tx_hash in results:
            row = self.search_results_table.rowCount()
            self.search_results_table.insertRow(row)
            
            # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_item = QtWidgets.QTableWidgetItem(sender)
            sender_item.setData(QtCore.Qt.UserRole, last_tx_hash)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏,
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
            if self.reward_per_tx_mode and sender in sender_transactions:
                sender_item.setData(QtCore.Qt.UserRole + 1, sender_transactions[sender])
                
            self.search_results_table.setItem(row, 0, sender_item)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            count_item = QtWidgets.QTableWidgetItem(str(count))
            self.search_results_table.setItem(row, 1, count_item)
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            time_item = QtWidgets.QTableWidgetItem(last_tx_time)
            self.search_results_table.setItem(row, 2, time_item)
    
    def _stop_paginated_search(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if not self.is_searching:
            return
        
        self.stop_search_event.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        self.stop_search_btn.setEnabled(False)
    
    def _clear_search_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self.search_results_table.setRowCount(0)
            count = clear_found_transactions()
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if hasattr(self, 'found_tx_table'):
                self.found_tx_table.setRowCount(0)
            logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞")
    
    def _show_search_context_menu(self, position):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        menu = QtWidgets.QMenu()
        
        copy_action = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        open_bscscan = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        add_to_rewards = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç
        if self.reward_per_tx_mode:
            add_all_tx_to_rewards = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        
        action = menu.exec_(self.search_results_table.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected_indexes = self.search_results_table.selectedIndexes()
        if not selected_indexes:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        selected_row = selected_indexes[0].row()
        sender_address = self.search_results_table.item(selected_row, 0).text()
        tx_hash = self.search_results_table.item(selected_row, 0).data(QtCore.Qt.UserRole)
        
        if action == copy_action:
            QtWidgets.QApplication.clipboard().setText(sender_address)
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∞–¥—Ä–µ—Å: {sender_address}")
        
        elif action == open_bscscan:
            if tx_hash:
                url = f"https://bscscan.com/tx/{tx_hash}"
                QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
                logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ BscScan: {tx_hash}")
            else:
                url = f"https://bscscan.com/address/{sender_address}"
                QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
                logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ BscScan: {sender_address}")
        
        elif action == add_to_rewards:
            self._add_to_rewards_tab(sender_address)
        
        elif self.reward_per_tx_mode and action == add_all_tx_to_rewards:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
            tx_list = self.search_results_table.item(selected_row, 0).data(QtCore.Qt.UserRole + 1)
            if tx_list:
                self._add_tx_list_to_rewards(sender_address, tx_list)
            else:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –¥–ª—è {sender_address}")
    
    def _add_tx_list_to_rewards(self, sender_addr, tx_list):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥"""
        if not tx_list:
            return logger.warning(f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç –¥–ª—è {sender_addr}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥
        self._save_rewards_state()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥
        for tx_info in tx_list:
            row = self.table_rewards.rowCount()
            self.table_rewards.insertRow(row)
            
            # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            addr_item = QtWidgets.QTableWidgetItem(sender_addr)
            addr_item.setData(QtCore.Qt.UserRole, tx_info['hash'])
            self.table_rewards.setItem(row, 0, addr_item)
            
            # PLEX - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            plex_item = QtWidgets.QTableWidgetItem("3")
            plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
            self.table_rewards.setItem(row, 1, plex_item)
            
            # USDT - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            usdt_item = QtWidgets.QTableWidgetItem("")
            usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
            self.table_rewards.setItem(row, 2, usdt_item)
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(tx_list)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_addr} –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        reply = QtWidgets.QMessageBox.question(
            self, '–†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è', 
            '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PLEX –∏ USDT –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.Yes
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self._randomize_plex()
            self._randomize_usdt()
            
    def _export_search_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ CSV —Ñ–∞–π–ª"""
        path, _ = QtWidgets.QFileDialog.getSaveFileName(self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV', '', '*.csv')
        if not path:
            return
        
        try:
            with open(path, 'w', encoding='utf-8') as f:
                f.write('address,tx_count,last_tx_time\n')
                for row in range(self.search_results_table.rowCount()):
                    address = self.search_results_table.item(row, 0).text()
                    count = self.search_results_table.item(row, 1).text()
                    time = self.search_results_table.item(row, 2).text()
                    f.write(f'"{address}",{count},"{time}"\n')
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
    
    def _copy_search_results(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        addresses = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        selected_rows = set(index.row() for index in self.search_results_table.selectedIndexes())
        if selected_rows:
            for row in selected_rows:
                addresses.append(self.search_results_table.item(row, 0).text())
        else:
            # –ò–Ω–∞—á–µ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞
            for row in range(self.search_results_table.rowCount()):
                addresses.append(self.search_results_table.item(row, 0).text())
        
        if addresses:
            QtWidgets.QApplication.clipboard().setText('\n'.join(addresses))
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            logger.warning("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def _import_to_rewards(self):
        """–ò–º–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥"""
        selected_rows = set(index.row() for index in self.search_results_table.selectedIndexes())
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ
        if not selected_rows:
            selected_rows = range(self.search_results_table.rowCount())
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        import_mode = "single"
        if self.reward_per_tx_mode:
            reply = QtWidgets.QMessageBox.question(
                self, '–†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞', 
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞:\n\n'
                '–ù–∞–∂–º–∏—Ç–µ "–î–∞" –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è - –æ–¥–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞)\n'
                '–ù–∞–∂–º–∏—Ç–µ "–ù–µ—Ç" –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ (–æ–¥–∏–Ω –∞–¥—Ä–µ—Å - –æ–¥–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞)',
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.Yes
            )
            import_mode = "per_tx" if reply == QtWidgets.QMessageBox.Yes else "single"
        
        count = 0
        if import_mode == "per_tx":
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            for row in selected_rows:
                sender_addr = self.search_results_table.item(row, 0).text()
                tx_list = self.search_results_table.item(row, 0).data(QtCore.Qt.UserRole + 1)
                if tx_list:
                    # –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if count == 0:
                        self._save_rewards_state()
                    count += len(tx_list)
                    for tx_info in tx_list:
                        self._add_tx_to_rewards(sender_addr, tx_info['hash'])
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –∞–¥—Ä–µ—Å
                    self._add_to_rewards_tab(sender_addr)
                    count += 1
        else:
            # –û–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç - –æ–¥–∏–Ω –∞–¥—Ä–µ—Å, –æ–¥–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞
            for row in selected_rows:
                sender_addr = self.search_results_table.item(row, 0).text()
                self._add_to_rewards_tab(sender_addr)
                count += 1
        
        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if count > 0:
            reply = QtWidgets.QMessageBox.question(
                self, '–†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è', 
                '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤?',
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.Yes
            )
            if reply == QtWidgets.QMessageBox.Yes:
                self._randomize_plex()
                self._randomize_usdt()
    # --- –¢–∞–± ¬´–ê–Ω–∞–ª–∏–∑¬ª ---
    def _tab_analyze(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        w = QtWidgets.QWidget()
        l = QtWidgets.QVBoxLayout(w)

        # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        form = QtWidgets.QFormLayout()
        self.addr_in = QtWidgets.QLineEdit()
        self.addr_in.setPlaceholderText('0x...')
        form.addRow('–ê–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', self.addr_in)

        btn_seed = QtWidgets.QPushButton('–í–≤–µ—Å—Ç–∏ seed-—Ñ—Ä–∞–∑—É')
        btn_seed.clicked.connect(self._enter_mnemonic)
        form.addRow('Seed-—Ñ—Ä–∞–∑–∞:', btn_seed)

        btn_pk = QtWidgets.QPushButton('–í–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á')
        btn_pk.clicked.connect(self._enter_pk)
        form.addRow('PrivKey:', btn_pk)

        self.sys_in = QtWidgets.QLineEdit()
        self.sys_in.setPlaceholderText('–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å')
        form.addRow('–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å:', self.sys_in)

        self.spin_amt = QtWidgets.QDoubleSpinBox()
        self.spin_amt.setRange(0, 1e12)
        self.spin_amt.setDecimals(8)
        self.spin_amt.setValue(30.0)  # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ 30 PLEX
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.spin_tx_count = QtWidgets.QSpinBox()
        self.spin_tx_count.setRange(1, 1000)
        self.spin_tx_count.setValue(1)
        form.addRow('–ú–∏–Ω. –∫–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', self.spin_tx_count)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
        self.search_mode_group = QtWidgets.QButtonGroup(self)
        self.radio_exact = QtWidgets.QRadioButton('–¢–æ—á–Ω–∞—è —Å—É–º–º–∞')
        self.radio_range = QtWidgets.QRadioButton('–î–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º')
        self.radio_exact.setChecked(True)
        self.search_mode_group.addButton(self.radio_exact)
        self.search_mode_group.addButton(self.radio_range)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
        radio_layout = QtWidgets.QHBoxLayout()
        radio_layout.addWidget(self.radio_exact)
        radio_layout.addWidget(self.radio_range)
        form.addRow('–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:', radio_layout)
        
        # –ü–æ–ª—è –¥–ª—è —Ç–æ—á–Ω–æ–π —Å—É–º–º—ã
        form.addRow('–¢–æ—á–Ω–∞—è —Å—É–º–º–∞:', self.spin_amt)
        
        # –ü–æ–ª—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—É–º–º
        self.spin_amt_from = QtWidgets.QDoubleSpinBox()
        self.spin_amt_from.setRange(0, 1e12)
        self.spin_amt_from.setDecimals(8)
        self.spin_amt_from.setEnabled(False)
        
        self.spin_amt_to = QtWidgets.QDoubleSpinBox()
        self.spin_amt_to.setRange(0, 1e12)
        self.spin_amt_to.setDecimals(8)
        self.spin_amt_to.setEnabled(False)
        
        # Layout –¥–ª—è –ø–æ–ª–µ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        range_layout = QtWidgets.QHBoxLayout()
        range_layout.addWidget(QtWidgets.QLabel('–û—Ç:'))
        range_layout.addWidget(self.spin_amt_from)
        range_layout.addWidget(QtWidgets.QLabel('–î–æ:'))
        range_layout.addWidget(self.spin_amt_to)
        form.addRow('–î–∏–∞–ø–∞–∑–æ–Ω:', range_layout)
        
        # –û–ø—Ü–∏—è –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.track_tx_checkbox_analyze = QtWidgets.QCheckBox("–£—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è")
        self.track_tx_checkbox_analyze.setChecked(True)
        form.addRow("", self.track_tx_checkbox_analyze)
        
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        self.radio_exact.toggled.connect(self._toggle_search_mode)
        self.radio_range.toggled.connect(self._toggle_search_mode)

        l.addLayout(form)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        h = QtWidgets.QHBoxLayout()
        btn_scan = QtWidgets.QPushButton('–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã')
        btn_scan.clicked.connect(self._scan_tokens)
        btn_search = QtWidgets.QPushButton('–ü–æ–∏—Å–∫ Tx')
        btn_search.clicked.connect(self._search_txs)
        h.addWidget(btn_scan); h.addWidget(btn_search)
        l.addLayout(h)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–∫–µ–Ω–æ–≤
        self.tokens_table = QtWidgets.QTableWidget(0, 4)
        self.tokens_table.setHorizontalHeaderLabels(["–¢–æ–∫–µ–Ω","–ö–æ–Ω—Ç—Ä–∞–∫—Ç","–ë–∞–ª–∞–Ω—Å","Decimals"])
        header = self.tokens_table.horizontalHeader()
        if header is not None:
            header.setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tokens_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.tokens_table.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.tokens_table.customContextMenuRequested.connect(self._tokens_context_menu)
        l.addWidget(self.tokens_table)

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.table_res = QtWidgets.QTableWidget(0, 2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å—Ç–æ–ª–±—Ü–æ–≤ (–∞–¥—Ä–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        self.table_res.setHorizontalHeaderLabels(['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–ö–æ–ª-–≤–æ TX'])
        result_header = self.table_res.horizontalHeader()
        if result_header is not None:
            result_header.setStretchLastSection(True)
        self.table_res.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.table_res.customContextMenuRequested.connect(self._analysis_context_menu)
        l.addWidget(self.table_res)

        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        h2 = QtWidgets.QHBoxLayout()
        btn_csv = QtWidgets.QPushButton('–≠–∫—Å–ø–æ—Ä—Ç CSV')
        btn_csv.clicked.connect(self._export_csv)
        h2.addWidget(btn_csv)
        
        btn_clipboard = QtWidgets.QPushButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä')
        btn_clipboard.clicked.connect(self._copy_to_clipboard)
        h2.addWidget(btn_clipboard)
        
        btn_to_rewards = QtWidgets.QPushButton('–í —Ä–∞–∑–¥–µ–ª –Ω–∞–≥—Ä–∞–¥')
        btn_to_rewards.clicked.connect(self._import_from_analysis)
        h2.addWidget(btn_to_rewards)
        
        l.addLayout(h2)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress = QtWidgets.QProgressBar()
        l.addWidget(self.progress)

        return w
    
    def _tokens_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤"""
        if self.tokens_table.rowCount() == 0:
            return
            
        menu = QtWidgets.QMenu()
        copy_contract = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
        view_token = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω –≤ BscScan")
        use_as_search = menu.addAction("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        action = menu.exec_(self.tokens_table.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected = self.tokens_table.selectedItems()
        if not selected:
            return
            
        row = selected[0].row()
        contract = self.tokens_table.item(row, 1).text()
        
        if action == copy_contract:
            QtWidgets.QApplication.clipboard().setText(contract)
            logger.info(f"–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {contract}")
            
        elif action == view_token:
            url = f"https://bscscan.com/token/{contract}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç —Ç–æ–∫–µ–Ω –≤ BscScan: {contract}")
            
        elif action == use_as_search:
            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–∏—Å–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
            tabs = self.centralWidget()
            tabs.setCurrentIndex(1)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–∏—Å–∫–∞
            self.token_address.setText(contract)
            logger.info(f"–¢–æ–∫–µ–Ω {contract} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞")
    
    def _analysis_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.table_res.rowCount() == 0:
            return
            
        menu = QtWidgets.QMenu()
        copy_address = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        view_address = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –∞–¥—Ä–µ—Å –≤ BscScan")
        add_to_rewards = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        
        action = menu.exec_(self.table_res.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected = self.table_res.selectedItems()
        if not selected:
            return
            
        row = selected[0].row()
        address = self.table_res.item(row, 0).text()
        
        if action == copy_address:
            QtWidgets.QApplication.clipboard().setText(address)
            logger.info(f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {address}")
            
        elif action == view_address:
            url = f"https://bscscan.com/address/{address}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç –∞–¥—Ä–µ—Å –≤ BscScan: {address}")
            
        elif action == add_to_rewards:
            self._add_to_rewards_tab(address)
    def _copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        addresses = []
        for idx in self.table_res.selectedIndexes():
            if idx.column() == 0:
                addresses.append(self.table_res.item(idx.row(), 0).text())
        
        if not addresses:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ
            addresses = [self.table_res.item(row, 0).text() 
                      for row in range(self.table_res.rowCount())]
                      
        if addresses:
            clipboard = QtWidgets.QApplication.clipboard()
            clipboard.setText('\n'.join(addresses))
            self.log(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(addresses)}")
        else:
            self.log("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    def _enter_mnemonic(self):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ seed-—Ñ—Ä–∞–∑—ã"""
        m, ok = QtWidgets.QInputDialog.getText(self, 'Seed', '–í–≤–µ–¥–∏—Ç–µ seed-—Ñ—Ä–∞–∑—É')
        if not (ok and m):
            return

        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean = ' '.join(m.strip().split())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é "–∫–∞–∫ –µ—Å—Ç—å"
        self.cfg.set_mnemonic(clean)

        if blockchain_enabled:
            try:
                # –í–∫–ª—é—á–∞–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ HD —Ñ–∏—á–∏ web3 (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                from eth_account import Account as _AccountModule
                try:
                    # –í–∫–ª—é—á–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ (idempotent)
                    if hasattr(_AccountModule, 'enable_unaudited_hdwallet_features'):
                        _AccountModule.enable_unaudited_hdwallet_features()
                except Exception as ee:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å HD wallet —Ñ–∏—á–∏: {ee}")

                acct = Account.from_mnemonic(clean, account_path="m/44'/60'/0'/0/0")
            except ValidationError as e:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è seed-—Ñ—Ä–∞–∑–∞: {e}")
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ seed: {e}")
                return

            # –µ—Å–ª–∏ –≤—Å—ë OK - —Å–æ—Ö—Ä–∞–Ω—è–µ–º PK –∏ –≤—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å
            pk_hex = acct.key.hex()
            self.cfg.set_key(pk_hex)
            self.pk = pk_hex
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –≤ –ª–æ–≥–∞—Ö
            short_addr = f"{acct.address[:6]}...{acct.address[-4:]}"
            logger.info(f"Seed —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –∞–¥—Ä–µ—Å: {short_addr}")
        else:
            logger.info("Seed —Å–æ—Ö—Ä–∞–Ω—ë–Ω (blockchain –æ—Ç–∫–ª—é—á—ë–Ω)")

    def _enter_pk(self):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        p, ok = QtWidgets.QInputDialog.getText(
            self, 'PrivKey', '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:', QtWidgets.QLineEdit.Password)
        if ok and p:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            if blockchain_enabled:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø—É—Ç–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    acct = Account.from_key(p.strip())
                    addr = acct.address
                    logger.info(f"–ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω, –∞–¥—Ä–µ—Å: {addr}")
                except Exception as e:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {e}")
                    return
            
            self.cfg.set_key(p.strip())
            self.pk = p.strip()
            logger.info("PrivKey —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    def _scan_tokens(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
        addr = self.addr_in.text().strip()
        if blockchain_enabled and not Web3.is_address(addr):
            return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
        self.table_res.setRowCount(0)
        threading.Thread(target=self._scan_thread, args=(addr,), daemon=True).start()

    def _scan_thread(self, addr):
        """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å–µ"""
        logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
        contracts, page = set(), 1
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
            while True:
                try:
                    params = {
                        'module': 'account',
                        'action': 'tokentx',
                        'address': addr,
                        'page': page,
                        'offset': 100,
                        'sort': 'asc'
                    }
                    result = bscscan_request(params)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ BscScan –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
                    break
                    
                if not result:
                    break
                
                for tx in result:
                    contracts.add((tx['contractAddress'], tx['tokenSymbol'], int(tx['tokenDecimal'])))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –Ω–∞–π–¥–µ–Ω–æ {len(contracts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
                page += 1
                self.update_progress_signal.emit("scan", min(30, (page % 31)))
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
            tokens = []
            total = len(contracts)
            for i, (c, s, d) in enumerate(contracts, start=1):
                self.update_progress_signal.emit("scan", 30 + int(i / total * 70))
                try:
                    bal = int(bscscan_request({
                        'module':'account','action':'tokenbalance',
                        'contractaddress': c,'address': addr,'tag':'latest'
                    })) / 10**d
                    if bal > 0:
                        tokens.append((c, s, d, bal))
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ {s}: {e}")
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–∫–µ–Ω–æ–≤
            self._update_tokens_table(tokens)
            
            self.combo = QtWidgets.QComboBox()
            for c, s, d, v in tokens:
                self.combo.addItem(f"{s} ({v})", userData=(c, d))
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ c –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º")
            self.update_progress_signal.emit("scan", 100)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            self.update_progress_signal.emit("scan", 100)

    def _update_tokens_table(self, tokens):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–∫–µ–Ω–æ–≤: —Å–ø–∏—Å–æ–∫ tuples (contract, symbol, decimals, balance)"""
        self.tokens_table.setRowCount(0)
        for c, s, d, v in tokens:
            row = self.tokens_table.rowCount()
            self.tokens_table.insertRow(row)
            self.tokens_table.setItem(row, 0, QtWidgets.QTableWidgetItem(s))
            self.tokens_table.setItem(row, 1, QtWidgets.QTableWidgetItem(c))
            self.tokens_table.setItem(row, 2, QtWidgets.QTableWidgetItem(str(v)))
            self.tokens_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(d)))

    def _search_txs(self):
        """–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        sys_addr = self.sys_in.text().strip()
        if blockchain_enabled and not Web3.is_address(sys_addr):
            return logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å")
        
        data = getattr(self, 'combo', None)
        if data is None or data.currentIndex() < 0:
            return logger.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        
        contract, dec = data.currentData()
        track_individual_tx = self.track_tx_checkbox_analyze.isChecked()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        if self.radio_exact.isChecked():
            # –†–µ–∂–∏–º —Ç–æ—á–Ω–æ–π —Å—É–º–º—ã
            amt = self.spin_amt.value()
            if amt <= 0:
                return logger.error("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QtWidgets.QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                f'–ò—Å–∫–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å—É–º–º–æ–π {amt} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å {sys_addr}?',
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.Yes
            )
            
            if reply == QtWidgets.QMessageBox.Yes:
                threading.Thread(
                    target=self._search_thread,
                    args=(sys_addr, contract, dec, amt, track_individual_tx),
                    daemon=True
                ).start()
        else:
            # –†–µ–∂–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—É–º–º
            min_amt = self.spin_amt_from.value()
            max_amt = self.spin_amt_to.value()
            
            if min_amt < 0:
                return logger.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 0")
            
            if max_amt <= min_amt:
                return logger.error("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QtWidgets.QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                f'–ò—Å–∫–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å—É–º–º–æ–π –æ—Ç {min_amt} –¥–æ {max_amt} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å {sys_addr}?',
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.Yes
            )
            
            if reply == QtWidgets.QMessageBox.Yes:
                threading.Thread(
                    target=self._search_range_thread, 
                    args=(sys_addr, contract, dec, min_amt, max_amt, track_individual_tx),
                    daemon=True
                ).start()
    def _search_thread(self, sys_addr, contract, dec, amt, track_individual_tx):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–æ—á–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"""
        self.table_res.setRowCount(0)
        logger.info(f"–ü–æ–∏—Å–∫ Tx –¥–ª—è –∞–¥—Ä–µ—Å–∞ {sys_addr}, —Ç–æ–∫–µ–Ω {contract}, —Å—É–º–º–∞ {amt}...")
        min_tx_count = self.spin_tx_count.value()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        try:
            self.stop_search_event.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
            matching_txs, sender_counter, sender_transactions = search_transactions_paginated(
                wallet_address=sys_addr,
                token_contract=contract,
                exact_amount=amt,
                page_size=1000,
                max_pages=100,
                delay_seconds=1,
                stop_flag=self.stop_search_event,
                track_individual_tx=track_individual_tx
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            filtered_senders = {sender: count for sender, count in sender_counter.items() 
                              if count >= min_tx_count}
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for row, (sender, count) in enumerate(sorted(filtered_senders.items(), key=lambda x: x[1], reverse=True)):
                self.table_res.insertRow(row)
                sender_item = QtWidgets.QTableWidgetItem(sender)
                
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö,
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
                if track_individual_tx and sender in sender_transactions:
                    sender_item.setData(QtCore.Qt.UserRole, sender_transactions[sender])
                
                self.table_res.setItem(row, 0, sender_item)
                self.table_res.setItem(row, 1, QtWidgets.QTableWidgetItem(str(count)))

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_senders)} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —Å {min_tx_count}+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏")
            self.update_progress_signal.emit("scan", 100)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            search_info = {
                'wallet_address': sys_addr,
                'token_contract': contract,
                'exact_amount': amt,
                'min_tx_count': min_tx_count,
                'search_time': datetime.now().isoformat()
            }
            
            for tx in matching_txs:
                add_found_transaction(tx, search_info)
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É
            search_time = datetime.now().isoformat()
            if track_individual_tx and sender_transactions:
                for sender, tx_list in sender_transactions.items():
                    for tx_info in tx_list:
                        add_sender_transaction(sender, tx_info, search_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            self.found_tx_added_signal.emit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            self.update_progress_signal.emit("scan", 100)

    def _search_range_thread(self, sys_addr, contract, dec, min_amt, max_amt, track_individual_tx):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å—É–º–º"""
        self.table_res.setRowCount(0)
        logger.info(f"–ü–æ–∏—Å–∫ Tx –¥–ª—è –∞–¥—Ä–µ—Å–∞ {sys_addr}, —Ç–æ–∫–µ–Ω {contract}, –¥–∏–∞–ø–∞–∑–æ–Ω {min_amt}-{max_amt}...")
        min_tx_count = self.spin_tx_count.value()
        
        try:
            self.stop_search_event.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            matching_txs, sender_counter, sender_transactions = search_transactions_paginated(
                wallet_address=sys_addr,
                token_contract=contract,
                min_amount=min_amt,
                max_amount=max_amt,
                page_size=1000,
                max_pages=100,
                delay_seconds=1,
                stop_flag=self.stop_search_event,
                track_individual_tx=track_individual_tx
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            filtered_senders = {sender: count for sender, count in sender_counter.items() 
                              if count >= min_tx_count}
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for row, (sender, count) in enumerate(sorted(filtered_senders.items(), key=lambda x: x[1], reverse=True)):
                self.table_res.insertRow(row)
                sender_item = QtWidgets.QTableWidgetItem(sender)
                
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö,
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
                if track_individual_tx and sender in sender_transactions:
                    sender_item.setData(QtCore.Qt.UserRole, sender_transactions[sender])
                
                self.table_res.setItem(row, 0, sender_item)
                self.table_res.setItem(row, 1, QtWidgets.QTableWidgetItem(str(count)))

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_senders)} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —Å {min_tx_count}+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏")
            self.update_progress_signal.emit("scan", 100)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            search_info = {
                'wallet_address': sys_addr,
                'token_contract': contract,
                'min_amount': min_amt,
                'max_amount': max_amt,
                'min_tx_count': min_tx_count,
                'search_time': datetime.now().isoformat()
            }
            
            for tx in matching_txs:
                add_found_transaction(tx, search_info)
                
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É
            search_time = datetime.now().isoformat()
            if track_individual_tx and sender_transactions:
                for sender, tx_list in sender_transactions.items():
                    for tx_info in tx_list:
                        add_sender_transaction(sender, tx_info, search_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            self.found_tx_added_signal.emit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É: {e}")
            self.update_progress_signal.emit("scan", 100)

    def _export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Ñ–∞–π–ª"""
        path, _ = QtWidgets.QFileDialog.getSaveFileName(self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV', '', '*.csv')
        if not path:
            return
        try:
            with open(path, 'w', encoding='utf-8') as f:
                f.write('from_address,tx_count\n')
                for i in range(self.table_res.rowCount()):
                    address = self.table_res.item(i, 0).text()
                    count = self.table_res.item(i, 1).text() if self.table_res.columnCount() > 1 else "1"
                    f.write(f'{address},{count}\n')
            logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {self.table_res.rowCount()} –∞–¥—Ä–µ—Å–æ–≤ –≤ {path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")

    def _add_to_rewards_tab(self, address):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
        for row in range(self.table_rewards.rowCount()):
            if self.table_rewards.item(row, 0).text() == address:
                logger.warning(f"–ê–¥—Ä–µ—Å {address} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        row = self.table_rewards.rowCount()
        self.table_rewards.insertRow(row)
        
        # –ê–¥—Ä–µ—Å
        self.table_rewards.setItem(row, 0, QtWidgets.QTableWidgetItem(address))
        
        # PLEX - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        plex_item = QtWidgets.QTableWidgetItem("")
        plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
        self.table_rewards.setItem(row, 1, plex_item)
        
        # USDT - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        usdt_item = QtWidgets.QTableWidgetItem("")
        usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
        self.table_rewards.setItem(row, 2, usdt_item)
        
        logger.info(f"–ê–¥—Ä–µ—Å {address} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥")
        
    def _import_from_analysis(self):
        """–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥"""
        if self.table_res.rowCount() == 0:
            return logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–Ω–∞–ª–∏–∑–∞")
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        import_mode = "single"
        if self.reward_per_tx_mode:
            reply = QtWidgets.QMessageBox.question(
                self, '–†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞', 
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞:\n\n'
                '–ù–∞–∂–º–∏—Ç–µ "–î–∞" –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è - –æ–¥–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞)\n'
                '–ù–∞–∂–º–∏—Ç–µ "–ù–µ—Ç" –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ (–æ–¥–∏–Ω –∞–¥—Ä–µ—Å - –æ–¥–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞)',
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.Yes
            )
            import_mode = "per_tx" if reply == QtWidgets.QMessageBox.Yes else "single"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
        self._save_rewards_state()
        
        count = 0
        if import_mode == "per_tx":
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            for row in range(self.table_res.rowCount()):
                sender_item = self.table_res.item(row, 0)
                sender = sender_item.text()
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
                tx_list = sender_item.data(QtCore.Qt.UserRole) if hasattr(sender_item, 'data') else None
                
                if tx_list:
                    for tx_info in tx_list:
                        r = self.table_rewards.rowCount()
                        self.table_rewards.insertRow(r)
                        
                        addr_item = QtWidgets.QTableWidgetItem(sender)
                        addr_item.setData(QtCore.Qt.UserRole, tx_info['hash'])
                        self.table_rewards.setItem(r, 0, addr_item)
                        
                        plex_item = QtWidgets.QTableWidgetItem("3")
                        plex_item.setFlags(plex_item.flags() | QtCore.Qt.ItemIsEditable)
                        self.table_rewards.setItem(r, 1, plex_item)
                        
                        usdt_item = QtWidgets.QTableWidgetItem("")
                        usdt_item.setFlags(usdt_item.flags() | QtCore.Qt.ItemIsEditable)
                        self.table_rewards.setItem(r, 2, usdt_item)
                        
                        count += 1
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –∞–¥—Ä–µ—Å
                    self._add_to_rewards_tab(sender)
                    count += 1
        else:
            # –û–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç - –æ–¥–∏–Ω –∞–¥—Ä–µ—Å, –æ–¥–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞
            for row in range(self.table_res.rowCount()):
                address = self.table_res.item(row, 0).text()
                self._add_to_rewards_tab(address)
                count += 1
        
        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        reply = QtWidgets.QMessageBox.question(
            self, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π', 
            '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è PLEX –∏ USDT –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.Yes
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self._randomize_plex()
            self._randomize_usdt()

    def _load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫ –∏–∑ –ë–î"""
        try:
            self.history_table.setRowCount(0)
            rows = fetch_history(limit=500)
            for row_data in rows:
                row = self.history_table.rowCount()
                self.history_table.insertRow(row)
                # –í—Ä–µ–º—è
                self.history_table.setItem(row, 0, QtWidgets.QTableWidgetItem(row_data['time']))
                # –¢–æ–∫–µ–Ω
                self.history_table.setItem(row, 1, QtWidgets.QTableWidgetItem(row_data['token']))
                # –ü–æ–ª—É—á–∞—Ç–µ–ª—å
                self.history_table.setItem(row, 2, QtWidgets.QTableWidgetItem(row_data['to_addr']))
                # –°—É–º–º–∞
                self.history_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(row_data['amount'])))
                # TX Hash
                tx_item = QtWidgets.QTableWidgetItem(row_data['tx'][:10] + "..." + row_data['tx'][-6:])
                tx_item.setToolTip(row_data['tx'])
                tx_item.setData(QtCore.Qt.UserRole, row_data['tx'])
                self.history_table.setItem(row, 4, tx_item)
                # –°—Ç–∞—Ç—É—Å
                status_item = QtWidgets.QTableWidgetItem(row_data['status'])
                if row_data['status'] == 'success':
                    status_item.setBackground(QtGui.QColor('#004400'))
                elif row_data['status'] == 'failed':
                    status_item.setBackground(QtGui.QColor('#440000'))
                self.history_table.setItem(row, 5, status_item)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.history_table.rowCount()} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _history_context_menu(self, position):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏"""
        menu = QtWidgets.QMenu()
        
        copy_tx = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        copy_addr = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        open_tx = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ BscScan")
        check_status = menu.addAction("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        
        action = menu.exec_(self.history_table.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected = self.history_table.selectedItems()
        if not selected:
            return
            
        row = selected[0].row()
        tx_hash = self.history_table.item(row, 4).data(QtCore.Qt.UserRole)
        to_addr = self.history_table.item(row, 2).text()
        
        if action == copy_tx:
            QtWidgets.QApplication.clipboard().setText(tx_hash)
            logger.info(f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {tx_hash}")
            
        elif action == copy_addr:
            QtWidgets.QApplication.clipboard().setText(to_addr)
            logger.info(f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {to_addr}")
            
        elif action == open_tx:
            url = f"https://bscscan.com/tx/{tx_hash}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ BscScan: {tx_hash}")
            
        elif action == check_status:
            threading.Thread(
                target=self._check_tx_status,
                args=(tx_hash,),
                daemon=True
            ).start()
    
    def _check_tx_status(self, tx_hash):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            if not blockchain_enabled:
                logger.warning("–ë–ª–æ–∫—á–µ–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
                return
                
            w3 = self.rpc.web3()
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash}...")
            try:
                receipt = w3.eth.get_transaction_receipt(tx_hash)
                
                if receipt and receipt.get('status') == 1:
                    status = 'success'
                    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    status = 'failed'
                    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_tx_status(tx_hash, status)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                self._refresh_history()
                
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash}: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    def _track_tx_statuses(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.tx_tracker and self.tx_tracker.is_alive():
            return logger.warning("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
        self.tx_tracker = threading.Thread(
            target=self._tx_tracker_thread,
            daemon=True
        )
        self.tx_tracker.start()
        logger.info("–ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    def _tx_tracker_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if not blockchain_enabled:
            return logger.warning("–ë–ª–æ–∫—á–µ–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã")
            
        try:
            w3 = self.rpc.web3()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("SELECT tx FROM history WHERE status='pending'")
            pending_txs = [row['tx'] for row in cur.fetchall()]
            conn.close()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_txs)} –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            for tx_hash in pending_txs:
                try:
                    receipt = w3.eth.get_transaction_receipt(tx_hash)
                    
                    if receipt:
                        if receipt.get('status') == 1:
                            status = 'success'
                            logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        else:
                            status = 'failed'
                            logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        update_tx_status(tx_hash, status)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {tx_hash}: {e}")
                
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            QtCore.QMetaObject.invokeMethod(
                self, "_refresh_history", 
                QtCore.Qt.QueuedConnection
            )
            
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
    def _copy_all_tx_hashes(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ö—ç—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            tx_hashes = copy_all_transactions_hashes()
            if tx_hashes:
                QtWidgets.QApplication.clipboard().setText(tx_hashes)
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Ö—ç—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            else:
                logger.warning("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö—ç—à–µ–π: {e}")

    # --- –¢–∞–± ¬´–ù–∞–π–¥–µ–Ω–Ω—ã–µ Tx¬ª ---
    def _tab_found_tx(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –ì—Ä—É–ø–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filter_group = QtWidgets.QGroupBox("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        filter_layout = QtWidgets.QHBoxLayout(filter_group)
        
        # –ü–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞
        filter_layout.addWidget(QtWidgets.QLabel("–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:"))
        self.found_tx_wallet_filter = QtWidgets.QLineEdit()
        self.found_tx_wallet_filter.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        self.found_tx_wallet_filter.textChanged.connect(self._refresh_found_tx)
        filter_layout.addWidget(self.found_tx_wallet_filter)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
        btn_clear_filter = QtWidgets.QPushButton("–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
        btn_clear_filter.clicked.connect(self._clear_found_tx_filter)
        filter_layout.addWidget(btn_clear_filter)
        
        layout.addWidget(filter_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.found_tx_table = QtWidgets.QTableWidget(0, 8)
        self.found_tx_table.setHorizontalHeaderLabels([
            '–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞', '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', '–û—Ç –∫–æ–≥–æ', '–ö–æ–º—É', '–¢–æ–∫–µ–Ω', '–°—É–º–º–∞', '–•—ç—à Tx', '–í—Ä–µ–º—è Tx'
        ])
        header = self.found_tx_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
            header.setSectionResizeMode(6, QtWidgets.QHeaderView.Interactive)
        self.found_tx_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.found_tx_table.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.found_tx_table.customContextMenuRequested.connect(self._found_tx_context_menu)
        layout.addWidget(self.found_tx_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QtWidgets.QHBoxLayout()
        
        btn_refresh_found = QtWidgets.QPushButton('–û–±–Ω–æ–≤–∏—Ç—å')
        btn_refresh_found.clicked.connect(self._refresh_found_tx)
        buttons_layout.addWidget(btn_refresh_found)
        
        btn_export_found = QtWidgets.QPushButton('–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV')
        btn_export_found.clicked.connect(self._export_found_tx)
        buttons_layout.addWidget(btn_export_found)
        
        btn_clear_found = QtWidgets.QPushButton('–û—á–∏—Å—Ç–∏—Ç—å')
        btn_clear_found.clicked.connect(self._clear_found_tx)
        buttons_layout.addWidget(btn_clear_found)
        
        layout.addLayout(buttons_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        copy_buttons_layout = QtWidgets.QHBoxLayout()
        
        btn_copy_all_addresses = QtWidgets.QPushButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞')
        btn_copy_all_addresses.clicked.connect(self._copy_all_found_addresses)
        copy_buttons_layout.addWidget(btn_copy_all_addresses)
        
        btn_copy_senders = QtWidgets.QPushButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π')
        btn_copy_senders.clicked.connect(self._copy_found_senders)
        copy_buttons_layout.addWidget(btn_copy_senders)
        
        btn_copy_receivers = QtWidgets.QPushButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π')
        btn_copy_receivers.clicked.connect(self._copy_found_receivers)
        copy_buttons_layout.addWidget(btn_copy_receivers)
        
        btn_copy_tx_hashes = QtWidgets.QPushButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
        btn_copy_tx_hashes.clicked.connect(self._copy_found_tx_hashes)
        copy_buttons_layout.addWidget(btn_copy_tx_hashes)
        
        layout.addLayout(copy_buttons_layout)
        
        # –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # QtCore.QTimer.singleShot(100, self._refresh_found_tx)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.found_tx_added_signal.connect(self._refresh_found_tx)
        
        return w
    
    def _refresh_found_tx(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            found_txs = fetch_found_transactions()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞ (–∏—â–µ–º –≤ from_addr –∏ to_addr)
            wallet_filter = self.found_tx_wallet_filter.text().strip().lower()
            if wallet_filter:
                filtered_txs = []
                for tx in found_txs:
                    # –ü–∞—Ä—Å–∏–º search_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è wallet_address
                    try:
                        search_data = json.loads(tx['search_data']) if tx['search_data'] else {}
                        wallet_address = search_data.get('wallet_address', '')
                    except:
                        wallet_address = ''
                    
                    if (wallet_filter in tx['from_addr'].lower() or 
                        wallet_filter in tx['to_addr'].lower() or
                        wallet_filter in wallet_address.lower()):
                        filtered_txs.append(tx)
                found_txs = filtered_txs
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.found_tx_table.setRowCount(0)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            for tx in found_txs:
                row = self.found_tx_table.rowCount()
                self.found_tx_table.insertRow(row)
                
                # –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
                ts = datetime.fromisoformat(tx['ts'])
                self.found_tx_table.setItem(row, 0, QtWidgets.QTableWidgetItem(ts.strftime('%Y-%m-%d %H:%M:%S')))
                
                # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–∏–∑ search_data)
                try:
                    search_data = json.loads(tx['search_data']) if tx['search_data'] else {}
                    wallet_address = search_data.get('wallet_address', tx['from_addr'])
                except:
                    wallet_address = tx['from_addr']
                self.found_tx_table.setItem(row, 1, QtWidgets.QTableWidgetItem(wallet_address))
                
                # –û—Ç –∫–æ–≥–æ
                from_item = QtWidgets.QTableWidgetItem(tx['from_addr'])
                self.found_tx_table.setItem(row, 2, from_item)
                
                # –ö–æ–º—É
                to_item = QtWidgets.QTableWidgetItem(tx['to_addr'])
                self.found_tx_table.setItem(row, 3, to_item)
                
                # –¢–æ–∫–µ–Ω
                self.found_tx_table.setItem(row, 4, QtWidgets.QTableWidgetItem(tx['token_name'] or 'N/A'))
                
                # –°—É–º–º–∞
                self.found_tx_table.setItem(row, 5, QtWidgets.QTableWidgetItem(str(tx['amount'])))
                
                # –•—ç—à Tx
                tx_hash = tx['tx_hash']
                if len(tx_hash) > 16:
                    tx_display = tx_hash[:10] + "..." + tx_hash[-6:]
                else:
                    tx_display = tx_hash
                tx_item = QtWidgets.QTableWidgetItem(tx_display)
                tx_item.setToolTip(tx_hash)
                tx_item.setData(QtCore.Qt.UserRole, tx_hash)
                self.found_tx_table.setItem(row, 6, tx_item)
                
                # –í—Ä–µ–º—è Tx
                if tx['block_time']:
                    try:
                        block_time = datetime.fromisoformat(tx['block_time'])
                        self.found_tx_table.setItem(row, 7, QtWidgets.QTableWidgetItem(block_time.strftime('%Y-%m-%d %H:%M:%S')))
                    except:
                        self.found_tx_table.setItem(row, 7, QtWidgets.QTableWidgetItem(str(tx['block_time'])))
                else:
                    self.found_tx_table.setItem(row, 7, QtWidgets.QTableWidgetItem("-"))
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.found_tx_table.rowCount()} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    def _found_tx_context_menu(self, position):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        menu = QtWidgets.QMenu()
        
        copy_tx = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        copy_from = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        copy_to = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        copy_wallet = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
        open_tx = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ BscScan")
        add_from_to_rewards = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        
        action = menu.exec_(self.found_tx_table.viewport().mapToGlobal(position))
        
        if not action:
            return
            
        selected = self.found_tx_table.selectedItems()
        if not selected:
            return
            
        row = selected[0].row()
        tx_hash = self.found_tx_table.item(row, 6).data(QtCore.Qt.UserRole)
        wallet_addr = self.found_tx_table.item(row, 1).text()
        from_addr = self.found_tx_table.item(row, 2).text()
        to_addr = self.found_tx_table.item(row, 3).text()
        
        if action == copy_tx:
            QtWidgets.QApplication.clipboard().setText(tx_hash)
            logger.info(f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {tx_hash}")
            
        elif action == copy_from:
            QtWidgets.QApplication.clipboard().setText(from_addr)
            logger.info(f"–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {from_addr}")
            
        elif action == copy_to:
            QtWidgets.QApplication.clipboard().setText(to_addr)
            logger.info(f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {to_addr}")
            
        elif action == copy_wallet:
            QtWidgets.QApplication.clipboard().setText(wallet_addr)
            logger.info(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {wallet_addr}")
            
        elif action == open_tx:
            url = f"https://bscscan.com/tx/{tx_hash}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ BscScan: {tx_hash}")
            
        elif action == add_from_to_rewards:
            self._add_to_rewards_tab(from_addr)
    def _export_found_tx(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ CSV —Ñ–∞–π–ª"""
        path, _ = QtWidgets.QFileDialog.getSaveFileName(self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV', '', '*.csv')
        if not path:
            return
        
        try:
            with open(path, 'w', encoding='utf-8') as f:
                f.write('timestamp,wallet_address,from_addr,to_addr,token,amount,tx_hash,block_time\n')
                for row in range(self.found_tx_table.rowCount()):
                    timestamp = self.found_tx_table.item(row, 0).text()
                    wallet_addr = self.found_tx_table.item(row, 1).text()
                    from_addr = self.found_tx_table.item(row, 2).text()
                    to_addr = self.found_tx_table.item(row, 3).text()
                    token = self.found_tx_table.item(row, 4).text()
                    amount = self.found_tx_table.item(row, 5).text()
                    tx_hash = self.found_tx_table.item(row, 6).data(QtCore.Qt.UserRole)
                    block_time = self.found_tx_table.item(row, 7).text()
                    
                    f.write(f'"{timestamp}","{wallet_addr}","{from_addr}","{to_addr}","{token}",{amount},"{tx_hash}","{block_time}"\n')
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
    
    def _clear_found_tx_filter(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.found_tx_wallet_filter.clear()
        self._refresh_found_tx()
        logger.info("–§–∏–ª—å—Ç—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—á–∏—â–µ–Ω")
    
    def _copy_all_found_addresses(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            addresses = set()
            for row in range(self.found_tx_table.rowCount()):
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
                wallet_addr = self.found_tx_table.item(row, 1).text()
                addresses.add(wallet_addr)
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                from_addr = self.found_tx_table.item(row, 2).text()
                addresses.add(from_addr)
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                to_addr = self.found_tx_table.item(row, 3).text()
                addresses.add(to_addr)
            
            if addresses:
                addresses_text = '\n'.join(sorted(addresses))
                QtWidgets.QApplication.clipboard().setText(addresses_text)
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(addresses)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
            else:
                logger.warning("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤: {e}")
    
    def _copy_found_senders(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            senders = set()
            for row in range(self.found_tx_table.rowCount()):
                from_addr = self.found_tx_table.item(row, 2).text()
                senders.add(from_addr)
            
            if senders:
                senders_text = '\n'.join(sorted(senders))
                QtWidgets.QApplication.clipboard().setText(senders_text)
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(senders)} –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π")
            else:
                logger.warning("–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {e}")
    
    def _copy_found_receivers(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            receivers = set()
            for row in range(self.found_tx_table.rowCount()):
                to_addr = self.found_tx_table.item(row, 3).text()
                receivers.add(to_addr)
            
            if receivers:
                receivers_text = '\n'.join(sorted(receivers))
                QtWidgets.QApplication.clipboard().setText(receivers_text)
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(receivers)} –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            else:
                logger.warning("–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
    
    def _copy_found_tx_hashes(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—ç—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            tx_hashes = []
            for row in range(self.found_tx_table.rowCount()):
                tx_hash = self.found_tx_table.item(row, 6).data(QtCore.Qt.UserRole)
                if tx_hash:
                    tx_hashes.append(tx_hash)
            
            if tx_hashes:
                tx_hashes_text = '\n'.join(tx_hashes)
                QtWidgets.QApplication.clipboard().setText(tx_hashes_text)
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(tx_hashes)} —Ö—ç—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            else:
                logger.warning("–ù–µ—Ç —Ö—ç—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö—ç—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
    
    def _clear_found_tx(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            count = clear_found_transactions()
            self.found_tx_table.setRowCount(0)
            logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # --- –í–∫–ª–∞–¥–∫–∞ ¬´–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞¬ª ---
    def _tab_mass_distribution(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        
        #MCP:MASS_DIST - –í–∫–ª–∞–¥–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        TODO:MCP - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)

        # --- –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ---
        wallet_group = QtWidgets.QGroupBox("–ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        wallet_layout = QtWidgets.QHBoxLayout(wallet_group)

        self.mass_sender_address_label = QtWidgets.QLabel("–ê–¥—Ä–µ—Å: -")
        self.mass_balance_plex_label = QtWidgets.QLabel("PLEX: -")
        self.mass_balance_bnb_label = QtWidgets.QLabel("BNB: -")
        self.mass_balance_usdt_label = QtWidgets.QLabel("USDT: -")

        wallet_layout.addWidget(self.mass_sender_address_label)
        wallet_layout.addWidget(self.mass_balance_plex_label)
        wallet_layout.addWidget(self.mass_balance_bnb_label)
        wallet_layout.addWidget(self.mass_balance_usdt_label)

        self.mass_refresh_wallet_btn = QtWidgets.QPushButton("‚Üª –û–±–Ω–æ–≤–∏—Ç—å")
        self.mass_refresh_wallet_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        self.mass_refresh_wallet_btn.clicked.connect(self._mass_update_wallet_info)
        wallet_layout.addWidget(self.mass_refresh_wallet_btn)

        layout.addWidget(wallet_group)
        QtCore.QTimer.singleShot(250, self._mass_update_wallet_info)

        # –ì—Ä—É–ø–ø–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
        import_group = QtWidgets.QGroupBox("–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
        import_layout = QtWidgets.QVBoxLayout(import_group)

        self.mass_addresses_text = QtWidgets.QTextEdit()
        self.mass_addresses_text.setMaximumHeight(100)
        self.mass_addresses_text.setPlaceholderText(
            "–í—Å—Ç–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ —Å—é–¥–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π, —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π)"
        )
        import_layout.addWidget(self.mass_addresses_text)

        import_buttons = QtWidgets.QHBoxLayout()
        self.mass_paste_btn = QtWidgets.QPushButton("–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞")
        self.mass_paste_btn.clicked.connect(self._mass_paste_addresses)
        import_buttons.addWidget(self.mass_paste_btn)

        self.mass_import_excel_btn = QtWidgets.QPushButton("–ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
        self.mass_import_excel_btn.clicked.connect(self._mass_import_excel)
        import_buttons.addWidget(self.mass_import_excel_btn)

        self.mass_add_addresses_btn = QtWidgets.QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞")
        self.mass_add_addresses_btn.clicked.connect(self._mass_add_addresses)
        import_buttons.addWidget(self.mass_add_addresses_btn)

        self.mass_clear_addresses_btn = QtWidgets.QPushButton("–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.mass_clear_addresses_btn.clicked.connect(self._mass_clear_addresses)
        import_buttons.addWidget(self.mass_clear_addresses_btn)

        import_layout.addLayout(import_buttons)
        layout.addWidget(import_group)

        # –¢–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤
        self.mass_table = QtWidgets.QTableWidget(0, 5)
        self.mass_table.setHorizontalHeaderLabels(['–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è', '–°—Ç–∞—Ç—É—Å', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑', '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö—ç—à', '–í—Ä–µ–º—è'])
        header = self.mass_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        self.mass_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.mass_table.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.mass_table.customContextMenuRequested.connect(self._mass_table_context_menu)
        layout.addWidget(self.mass_table)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QtWidgets.QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QtWidgets.QHBoxLayout(stats_group)
        self.mass_total_addresses_label = QtWidgets.QLabel("–í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: 0")
        stats_layout.addWidget(self.mass_total_addresses_label)
        self.mass_unique_addresses_label = QtWidgets.QLabel("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: 0")
        stats_layout.addWidget(self.mass_unique_addresses_label)
        self.mass_sent_count_label = QtWidgets.QLabel("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0")
        stats_layout.addWidget(self.mass_sent_count_label)
        self.mass_error_count_label = QtWidgets.QLabel("–û—à–∏–±–æ–∫: 0")
        stats_layout.addWidget(self.mass_error_count_label)
        layout.addWidget(stats_group)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_group = QtWidgets.QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        settings_layout = QtWidgets.QGridLayout(settings_group)
        settings_layout.addWidget(QtWidgets.QLabel("–¢–æ–∫–µ–Ω:"), 0, 0)
        self.mass_token_combo = QtWidgets.QComboBox()
        self.mass_token_combo.addItems(['PLEX', 'USDT', 'BNB', '–î—Ä—É–≥–æ–π...'])
        self.mass_token_combo.currentTextChanged.connect(self._mass_token_changed)
        settings_layout.addWidget(self.mass_token_combo, 0, 1)
        self.mass_custom_token_edit = QtWidgets.QLineEdit()
        self.mass_custom_token_edit.setPlaceholderText("–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.mass_custom_token_edit.setEnabled(False)
        settings_layout.addWidget(self.mass_custom_token_edit, 0, 2)
        settings_layout.addWidget(QtWidgets.QLabel("–°—É–º–º–∞:"), 1, 0)
        self.mass_amount_spin = QtWidgets.QDoubleSpinBox()
        self.mass_amount_spin.setRange(0.00000001, 1000000)
        self.mass_amount_spin.setDecimals(8)
        self.mass_amount_spin.setValue(0.05)
        settings_layout.addWidget(self.mass_amount_spin, 1, 1)
        settings_layout.addWidget(QtWidgets.QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):"), 2, 0)
        self.mass_interval_spin = QtWidgets.QSpinBox()
        self.mass_interval_spin.setRange(1, 600)
        self.mass_interval_spin.setValue(5)
        settings_layout.addWidget(self.mass_interval_spin, 2, 1)
        settings_layout.addWidget(QtWidgets.QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:"), 3, 0)
        self.mass_cycles_spin = QtWidgets.QSpinBox()
        self.mass_cycles_spin.setRange(1, 100)
        self.mass_cycles_spin.setValue(1)
        settings_layout.addWidget(self.mass_cycles_spin, 3, 1)
        settings_layout.addWidget(QtWidgets.QLabel("–†–µ–∂–∏–º:"), 4, 0)
        self.mass_mode_combo = QtWidgets.QComboBox()
        self.mass_mode_combo.addItems(['–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π', '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π (3 –ø–æ—Ç–æ–∫–∞)', '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π (5 –ø–æ—Ç–æ–∫–æ–≤)'])
        settings_layout.addWidget(self.mass_mode_combo, 4, 1)
        self.mass_gas_price_label = QtWidgets.QLabel(f"–¶–µ–Ω–∞ –≥–∞–∑–∞: {self.cfg.get_gas_price()} Gwei")
        settings_layout.addWidget(self.mass_gas_price_label, 5, 0, 1, 2)
        layout.addWidget(settings_group)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_group = QtWidgets.QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π")
        control_layout = QtWidgets.QVBoxLayout(control_group)
        control_buttons = QtWidgets.QHBoxLayout()
        self.mass_estimate_btn = QtWidgets.QPushButton("–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
        self.mass_estimate_btn.clicked.connect(self._mass_estimate_cost)
        control_buttons.addWidget(self.mass_estimate_btn)
        self.mass_start_btn = QtWidgets.QPushButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        self.mass_start_btn.clicked.connect(self._mass_start_distribution)
        control_buttons.addWidget(self.mass_start_btn)
        self.mass_pause_btn = QtWidgets.QPushButton("–ü–∞—É–∑–∞")
        self.mass_pause_btn.setEnabled(False)
        self.mass_pause_btn.clicked.connect(self._mass_pause_distribution)
        control_buttons.addWidget(self.mass_pause_btn)
        self.mass_resume_btn = QtWidgets.QPushButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        self.mass_resume_btn.setEnabled(False)
        self.mass_resume_btn.clicked.connect(self._mass_resume_distribution)
        control_buttons.addWidget(self.mass_resume_btn)
        self.mass_stop_btn = QtWidgets.QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.mass_stop_btn.setEnabled(False)
        self.mass_stop_btn.clicked.connect(self._mass_stop_distribution)
        control_buttons.addWidget(self.mass_stop_btn)
        control_layout.addLayout(control_buttons)
        self.mass_progress = QtWidgets.QProgressBar()
        control_layout.addWidget(self.mass_progress)
        self.mass_progress_label = QtWidgets.QLabel("–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
        control_layout.addWidget(self.mass_progress_label)
        layout.addWidget(control_group)

        # –≠–∫—Å–ø–æ—Ä—Ç / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        export_buttons = QtWidgets.QHBoxLayout()
        self.mass_save_list_btn = QtWidgets.QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.mass_save_list_btn.clicked.connect(self._mass_save_list)
        export_buttons.addWidget(self.mass_save_list_btn)
        self.mass_load_list_btn = QtWidgets.QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.mass_load_list_btn.clicked.connect(self._mass_load_list)
        export_buttons.addWidget(self.mass_load_list_btn)
        self.mass_export_results_btn = QtWidgets.QPushButton("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.mass_export_results_btn.clicked.connect(self._mass_export_results)
        export_buttons.addWidget(self.mass_export_results_btn)
        layout.addLayout(export_buttons)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.mass_distribution_active = False
        self.mass_distribution_paused = False
        self.mass_distribution_thread = None
        self.mass_current_cycle = 0
        self.mass_total_sent = 0
        self.mass_errors_count = 0

        return w

    def _mass_update_wallet_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –∏ –±–∞–ª–∞–Ω—Å–∞—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            if not self.pk:
                self.mass_sender_address_label.setText("–ê–¥—Ä–µ—Å: (–∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω)")
                self.mass_balance_plex_label.setText("PLEX: -")
                self.mass_balance_bnb_label.setText("BNB: -")
                self.mass_balance_usdt_label.setText("USDT: -")
                return

            w3 = self.rpc.web3()
            account = Account.from_key(self.pk)
            addr = w3.to_checksum_address(account.address)
            self.mass_sender_address_label.setText(f"–ê–¥—Ä–µ—Å: {addr[:10]}...{addr[-6:]}")
            self.mass_sender_address_label.setToolTip(addr)

            # BNB –±–∞–ª–∞–Ω—Å
            try:
                balance_bnb = w3.from_wei(w3.eth.get_balance(addr), 'ether')
                self.mass_balance_bnb_label.setText(f"BNB: {float(balance_bnb):.5f}")
            except Exception as e_bnb:
                self.mass_balance_bnb_label.setText("BNB: –æ—à–∏–±–∫–∞")
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å BNB: {e_bnb}")

            # PLEX –±–∞–ª–∞–Ω—Å
            try:
                plex_contract = w3.eth.contract(address=w3.to_checksum_address(PLEX_CONTRACT), abi=ERC20_ABI)
                plex_dec = plex_contract.functions.decimals().call()
                plex_raw = plex_contract.functions.balanceOf(addr).call()
                plex_val = plex_raw / (10 ** plex_dec)
                self.mass_balance_plex_label.setText(f"PLEX: {plex_val:.4f}")
            except Exception as e_plex:
                self.mass_balance_plex_label.setText("PLEX: –æ—à–∏–±–∫–∞")
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å PLEX: {e_plex}")

            # USDT –±–∞–ª–∞–Ω—Å
            try:
                usdt_contract = w3.eth.contract(address=w3.to_checksum_address(USDT_CONTRACT), abi=ERC20_ABI)
                usdt_dec = usdt_contract.functions.decimals().call()
                usdt_raw = usdt_contract.functions.balanceOf(addr).call()
                usdt_val = usdt_raw / (10 ** usdt_dec)
                self.mass_balance_usdt_label.setText(f"USDT: {usdt_val:.4f}")
            except Exception as e_usdt:
                self.mass_balance_usdt_label.setText("USDT: –æ—à–∏–±–∫–∞")
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT: {e_usdt}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def _mass_paste_addresses(self):
        """–í—Å—Ç–∞–≤–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        clipboard = QtWidgets.QApplication.clipboard()
        text = clipboard.text()
        if text:
            self.mass_addresses_text.setText(text)
            logger.info("–ê–¥—Ä–µ—Å–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
    
    def _mass_import_excel(self):
        """–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, '–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª', '', 'Excel Files (*.xlsx *.xls);;All Files (*.*)'
        )
        if not path:
            return
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pandas
            try:
                import pandas as pd
                df = pd.read_excel(path)
                
                # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–∞–º–∏
                addresses = []
                for col in df.columns:
                    col_data = df[col].dropna().astype(str)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–¥—Ä–µ—Å–∞ BSC
                    potential_addresses = [addr for addr in col_data if addr.startswith('0x') and len(addr) == 42]
                    if potential_addresses:
                        addresses.extend(potential_addresses)
                
                if addresses:
                    self.mass_addresses_text.setText(' '.join(addresses))
                    logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ Excel")
                else:
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ")
                    
            except ImportError:
                # –ï—Å–ª–∏ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º openpyxl –Ω–∞–ø—Ä—è–º—É—é
                try:
                    import openpyxl
                    wb = openpyxl.load_workbook(path)
                    ws = wb.active
                    
                    addresses = []
                    for row in ws.iter_rows(values_only=True):
                        for cell in row:
                            if cell and isinstance(cell, str) and cell.startswith('0x') and len(cell) == 42:
                                addresses.append(cell)
                    
                    if addresses:
                        self.mass_addresses_text.setText(' '.join(addresses))
                        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ Excel")
                    else:
                        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ")
                        
                except ImportError:
                    logger.error("–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ Excel –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pandas –∏–ª–∏ openpyxl")
                    QtWidgets.QMessageBox.warning(
                        self, '–û—à–∏–±–∫–∞',
                        '–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ Excel —Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É pandas –∏–ª–∏ openpyxl:\n'
                        'pip install pandas openpyxl',
                        QtWidgets.QMessageBox.Ok
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Excel: {e}")
            QtWidgets.QMessageBox.warning(
                self, '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞',
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –∏–∑ Excel:\n{str(e)}',
                QtWidgets.QMessageBox.Ok
            )
    
    def _mass_add_addresses(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É"""
        text = self.mass_addresses_text.toPlainText().strip()
        if not text:
            return logger.warning("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
        import re
        addresses = re.split(r'[\s,;]+', text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞
        valid_addresses = []
        for addr in addresses:
            addr = addr.strip()
            if addr and self._validate_address(addr):
                valid_addresses.append(addr)
        
        if not valid_addresses:
            return logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        current_addresses = set()
        for row in range(self.mass_table.rowCount()):
            current_addresses.add(self.mass_table.item(row, 0).text())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        added_count = 0
        for addr in valid_addresses:
            if addr not in current_addresses:
                row = self.mass_table.rowCount()
                self.mass_table.insertRow(row)
                
                # –ê–¥—Ä–µ—Å
                self.mass_table.setItem(row, 0, QtWidgets.QTableWidgetItem(addr))
                # –°—Ç–∞—Ç—É—Å
                self.mass_table.setItem(row, 1, QtWidgets.QTableWidgetItem("–û–∂–∏–¥–∞–Ω–∏–µ"))
                # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑
                self.mass_table.setItem(row, 2, QtWidgets.QTableWidgetItem("0"))
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö—ç—à
                self.mass_table.setItem(row, 3, QtWidgets.QTableWidgetItem("-"))
                # –í—Ä–µ–º—è
                self.mass_table.setItem(row, 4, QtWidgets.QTableWidgetItem("-"))
                
                current_addresses.add(addr)
                added_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._mass_update_statistics()
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.mass_addresses_text.clear()
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
    
    def _validate_address(self, address):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è BSC –∞–¥—Ä–µ—Å–∞"""
        if blockchain_enabled:
            try:
                Web3.to_checksum_address(address)
                return True
            except:
                return False
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –±–µ–∑ Web3
            return address.startswith('0x') and len(address) == 42
    
    def _mass_clear_addresses(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self.mass_table.setRowCount(0)
            self._mass_update_statistics()
            logger.info("–°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def _mass_update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = self.mass_table.rowCount()
        unique = len(set(self.mass_table.item(row, 0).text() for row in range(total)))
        
        sent_count = 0
        error_count = 0
        
        for row in range(total):
            status = self.mass_table.item(row, 1).text()
            if status == "–£—Å–ø–µ—à–Ω–æ":
                sent_count += 1
            elif status == "–û—à–∏–±–∫–∞":
                error_count += 1
        
        self.mass_total_addresses_label.setText(f"–í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total}")
        self.mass_unique_addresses_label.setText(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique}")
        self.mass_sent_count_label.setText(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
        self.mass_error_count_label.setText(f"–û—à–∏–±–æ–∫: {error_count}")
    
    def _mass_token_changed(self, token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        self.mass_custom_token_edit.setEnabled(token == "–î—Ä—É–≥–æ–π...")
        if token == "–î—Ä—É–≥–æ–π...":
            self.mass_custom_token_edit.setFocus()
    
    def _mass_table_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤"""
        menu = QtWidgets.QMenu()
        
        remove_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å")
        copy_action = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        copy_hash_action = menu.addAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        open_bscscan_action = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        menu.addSeparator()
        reset_status_action = menu.addAction("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        
        action = menu.exec_(self.mass_table.viewport().mapToGlobal(position))
        
        if not action:
            return
        
        selected = self.mass_table.selectedItems()
        if not selected:
            return
        
        row = selected[0].row()
        address = self.mass_table.item(row, 0).text()
        tx_hash = self.mass_table.item(row, 3).text()
        
        if action == remove_action:
            self.mass_table.removeRow(row)
            self._mass_update_statistics()
            logger.info(f"–ê–¥—Ä–µ—Å {address} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
            
        elif action == copy_action:
            QtWidgets.QApplication.clipboard().setText(address)
            logger.info(f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {address}")
            
        elif action == copy_hash_action and tx_hash != "-":
            QtWidgets.QApplication.clipboard().setText(tx_hash)
            logger.info(f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {tx_hash}")
            
        elif action == open_bscscan_action:
            url = f"https://bscscan.com/address/{address}"
            QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))
            logger.info(f"–û—Ç–∫—Ä—ã—Ç –∞–¥—Ä–µ—Å –≤ BscScan: {address}")
            
        elif action == reset_status_action:
            self.mass_table.setItem(row, 1, QtWidgets.QTableWidgetItem("–û–∂–∏–¥–∞–Ω–∏–µ"))
            self.mass_table.setItem(row, 2, QtWidgets.QTableWidgetItem("0"))
            self.mass_table.setItem(row, 3, QtWidgets.QTableWidgetItem("-"))
            self.mass_table.setItem(row, 4, QtWidgets.QTableWidgetItem("-"))
            self._mass_update_statistics()
            logger.info(f"–°—Ç–∞—Ç—É—Å –∞–¥—Ä–µ—Å–∞ {address} —Å–±—Ä–æ—à–µ–Ω")
    
    def _mass_estimate_cost(self):
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.mass_table.rowCount():
            return logger.warning("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
        
        addresses_count = self.mass_table.rowCount()
        cycles = self.mass_cycles_spin.value()
        amount = self.mass_amount_spin.value()
        token = self.mass_token_combo.currentText()
        
        total_transactions = addresses_count * cycles
        total_amount = total_transactions * amount
        
        # –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        estimated_gas_per_tx = 0.0003  # BNB (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        total_gas = total_transactions * estimated_gas_per_tx
        
        message = f"""
–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:

–ê–¥—Ä–µ—Å–æ–≤: {addresses_count}
–¶–∏–∫–ª–æ–≤: {cycles}
–°—É–º–º–∞ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {amount} {token}

–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}
–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_amount} {token}
–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞: {total_gas:.4f} BNB

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!
        """
        
        QtWidgets.QMessageBox.information(self, "–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", message)
        logger.info(f"–û—Ü–µ–Ω–∫–∞: {total_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {total_amount} {token}, ~{total_gas:.4f} BNB –≥–∞–∑–∞")
    
    def _mass_start_distribution(self):
        """–ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.mass_table.rowCount():
            return logger.warning("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        
        if not self.pk:
            return logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        token = self.mass_token_combo.currentText()
        if token == "–î—Ä—É–≥–æ–π...":
            token_address = self.mass_custom_token_edit.text().strip()
            if not token_address or not self._validate_address(token_address):
                return logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
        elif token == "PLEX":
            token_address = PLEX_CONTRACT
        elif token == "USDT":
            token_address = USDT_CONTRACT
        elif token == "BNB":
            token_address = None  # –ù–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
        
        amount = self.mass_amount_spin.value()
        interval = self.mass_interval_spin.value()
        cycles = self.mass_cycles_spin.value()
        mode = self.mass_mode_combo.currentText()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            f'–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É {amount} {token} –Ω–∞ {self.mass_table.rowCount()} –∞–¥—Ä–µ—Å–æ–≤?\n'
            f'–¶–∏–∫–ª–æ–≤: {cycles}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply != QtWidgets.QMessageBox.Yes:
            return
        
        # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        self.mass_distribution_active = True
        self.mass_distribution_paused = False
        self.mass_current_cycle = 0
        self.mass_total_sent = 0
        self.mass_errors_count = 0
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.mass_start_btn.setEnabled(False)
        self.mass_pause_btn.setEnabled(True)
        self.mass_stop_btn.setEnabled(True)
        self.mass_progress.setValue(0)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.mass_distribution_thread = threading.Thread(
            target=self._mass_distribution_worker,
            args=(token_address, token, amount, interval, cycles, mode),
            daemon=True
        )
        self.mass_distribution_thread.start()
        
        logger.info(f"–ù–∞—á–∞—Ç–∞ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {amount} {token}, {cycles} —Ü–∏–∫–ª–æ–≤")
    
    def _mass_distribution_worker(self, token_address, token_name, amount, interval, cycles, mode):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            addresses = []
            for row in range(self.mass_table.rowCount()):
                addresses.append(self.mass_table.item(row, 0).text())
            
            total_transactions = len(addresses) * cycles
            completed_transactions = 0
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            distribution_name = f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            distribution_id = add_mass_distribution(
                name=distribution_name,
                token_address=token_address or "BNB",
                token_symbol=token_name,
                amount_per_tx=amount,
                total_addresses=len(addresses),
                total_cycles=cycles,
                interval_seconds=interval
            )
            
            for cycle in range(cycles):
                if not self.mass_distribution_active:
                    break
                
                self.mass_current_cycle = cycle + 1
                logger.info(f"–ù–∞—á–∞—Ç —Ü–∏–∫–ª {self.mass_current_cycle} –∏–∑ {cycles}")
                
                for idx, address in enumerate(addresses):
                    if not self.mass_distribution_active:
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
                    while self.mass_distribution_paused and self.mass_distribution_active:
                        time.sleep(0.1)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    progress = int((completed_transactions / total_transactions) * 100)
                    QtCore.QMetaObject.invokeMethod(
                        self.mass_progress, "setValue",
                        QtCore.Qt.QueuedConnection,
                        QtCore.Q_ARG(int, progress)
                    )
                    
                    QtCore.QMetaObject.invokeMethod(
                        self.mass_progress_label, "setText",
                        QtCore.Qt.QueuedConnection,
                        QtCore.Q_ARG(str, f"–¶–∏–∫–ª {self.mass_current_cycle}/{cycles}, –∞–¥—Ä–µ—Å {idx+1}/{len(addresses)}")
                    )
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    self._mass_update_table_status(idx, "–û—Ç–ø—Ä–∞–≤–∫–∞...", None, None)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    try:
                        if token_address:  # –¢–æ–∫–µ–Ω
                            tx_hash = self._send_token_transaction(address, amount, token_address)
                        else:  # BNB
                            tx_hash = self._send_bnb_transaction(address, amount)
                        
                        if tx_hash:
                            self.mass_total_sent += 1
                            sent_count = int(self.mass_table.item(idx, 2).text()) + 1
                            self._mass_update_table_status(
                                idx, "–£—Å–ø–µ—à–Ω–æ", tx_hash, 
                                datetime.now().strftime('%H:%M:%S')
                            )
                            self._mass_update_sent_count(idx, sent_count)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            add_mass_distribution_item(
                                distribution_id=distribution_id,
                                address=address,
                                cycle=self.mass_current_cycle,
                                tx_hash=tx_hash,
                                status='success'
                            )
                            
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} {token_name} –Ω–∞ {address}, tx: {tx_hash}")

                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (receipt) –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–ª–∞—Ç—ã
                            try:
                                w3 = self.rpc.web3()
                                receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)
                                if receipt and receipt.status == 1:
                                    logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (receipt) –¥–ª—è {address}: {tx_hash}")
                                else:
                                    logger.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (status!=1) –ø–æ–∫–∞: {tx_hash}")
                            except Exception as rec_e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å receipt –¥–ª—è {tx_hash}: {rec_e}")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∫–ª–∞–¥–∫—É '–û—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏' (—Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)
                            try:
                                completed_item = {
                                    'status': 'success',
                                    'address': address,
                                    'token': token_name,
                                    'amount': amount,
                                    'tx_hash': tx_hash,
                                    'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                }
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ completed_table
                                self.completed_item_signal.emit(completed_item)
                            except Exception as emit_e:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {emit_e}")
                        else:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                            
                    except Exception as e:
                        self.mass_errors_count += 1
                        self._mass_update_table_status(
                            idx, "–û—à–∏–±–∫–∞", None,
                            datetime.now().strftime('%H:%M:%S')
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        add_mass_distribution_item(
                            distribution_id=distribution_id,
                            address=address,
                            cycle=self.mass_current_cycle,
                            tx_hash=None,
                            status='error',
                            error_message=str(e)
                        )
                        
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {address}: {e}")

                        # –¢–∞–∫–∂–µ –æ—Ç—Ä–∞–∂–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤ completed_table –æ—á–µ—Ä–µ–¥–∏
                        try:
                            failed_item = {
                                'status': 'failed',
                                'address': address,
                                'token': token_name,
                                'amount': amount,
                                'tx_hash': None,
                                'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                            }
                            self.completed_item_signal.emit(failed_item)
                        except Exception as emit_e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {emit_e}")
                    
                    completed_transactions += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
                    if idx < len(addresses) - 1 and self.mass_distribution_active:
                        time.sleep(interval)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                if cycle < cycles - 1 and self.mass_distribution_active:
                    logger.info(f"–¶–∏–∫–ª {self.mass_current_cycle} –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º...")
                    time.sleep(interval)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
            if self.mass_distribution_active:
                update_mass_distribution_status(distribution_id, 'completed')
            else:
                update_mass_distribution_status(distribution_id, 'cancelled')
            
            logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.mass_total_sent} —É—Å–ø–µ—à–Ω—ã—Ö, {self.mass_errors_count} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        finally:
            self.mass_distribution_active = False
            QtCore.QMetaObject.invokeMethod(
                self, "_mass_distribution_finished",
                QtCore.Qt.QueuedConnection
            )
    
    def _mass_update_table_status(self, row, status, tx_hash, time_str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –ø–æ—Ç–æ–∫–∞
            if status == "–û—Ç–ø—Ä–∞–≤–∫–∞...":
                self.update_address_status.emit(row, "‚ü≥ –û—Ç–ø—Ä–∞–≤–∫–∞...")
            elif status == "–£—Å–ø–µ—à–Ω–æ":
                self.update_address_status.emit(row, "‚úì –£—Å–ø–µ—à–Ω–æ")
            elif status == "–û—à–∏–±–∫–∞":
                self.update_address_status.emit(row, "‚úó –û—à–∏–±–∫–∞")
            else:
                self.update_address_status.emit(row, status)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._mass_update_statistics()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–ª–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            QtCore.QMetaObject.invokeMethod(
                self, 
                "_update_table_item_data",
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(int, row),
                QtCore.Q_ARG(str, status),
                QtCore.Q_ARG(str, tx_hash or ""),
                QtCore.Q_ARG(str, time_str or "")
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    @QtCore.pyqtSlot(int, str, str, str)
    def _update_table_item_data(self, row, status, tx_hash, time_str):
        """–°–ª–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if row < self.mass_table.rowCount():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–æ–∫
                current_count = int(self.mass_table.item(row, 2).text().split('/')[0])
                new_count = current_count + 1
                count_item = QtWidgets.QTableWidgetItem(f"{new_count}/{self.mass_cycles_spin.value()}")
                self.mass_table.setItem(row, 2, count_item)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if tx_hash:
                    hash_item = QtWidgets.QTableWidgetItem(tx_hash[:10] + "..." + tx_hash[-6:])
                    hash_item.setToolTip(tx_hash)
                    self.mass_table.setItem(row, 3, hash_item)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                if time_str:
                    time_item = QtWidgets.QTableWidgetItem(time_str)
                    self.mass_table.setItem(row, 4, time_item)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def _mass_update_sent_count(self, row, count):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        try:
            QtCore.QMetaObject.invokeMethod(
                self, 
                "_update_sent_count_slot",
                QtCore.Qt.QueuedConnection,
                QtCore.Q_ARG(int, row),
                QtCore.Q_ARG(int, count)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫: {e}")
    
    @QtCore.pyqtSlot(int, int)
    def _update_sent_count_slot(self, row, count):
        """–°–ª–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if row < self.mass_table.rowCount():
                count_item = QtWidgets.QTableWidgetItem(str(count))
                self.mass_table.setItem(row, 2, count_item)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤ —Å–ª–æ—Ç–µ: {e}")
    
    @QtCore.pyqtSlot()
    def _mass_distribution_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.mass_start_btn.setEnabled(True)
        self.mass_pause_btn.setEnabled(False)
        self.mass_resume_btn.setEnabled(False)
        self.mass_stop_btn.setEnabled(False)
        self.mass_progress_label.setText(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {self.mass_total_sent} —É—Å–ø–µ—à–Ω—ã—Ö, {self.mass_errors_count} –æ—à–∏–±–æ–∫")
        
        QtWidgets.QMessageBox.information(
            self, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.mass_total_sent}\n"
            f"–û—à–∏–±–æ–∫: {self.mass_errors_count}"
        )
    
    def _mass_pause_distribution(self):
        """–ü–∞—É–∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.mass_distribution_paused = True
        self.mass_pause_btn.setEnabled(False)
        self.mass_resume_btn.setEnabled(True)
        self.mass_progress_label.setText("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _mass_resume_distribution(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.mass_distribution_paused = False
        self.mass_pause_btn.setEnabled(True)
        self.mass_resume_btn.setEnabled(False)
        logger.info("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _mass_stop_distribution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self.mass_distribution_active = False
            self.mass_distribution_paused = False
            logger.info("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def _mass_save_list(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"""
        if not self.mass_table.rowCount():
            return logger.warning("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤', '', 'JSON Files (*.json);;All Files (*.*)'
        )
        if not path:
            return
        
        try:
            data = {
                'addresses': [],
                'settings': {
                    'token': self.mass_token_combo.currentText(),
                    'custom_token': self.mass_custom_token_edit.text() if self.mass_token_combo.currentText() == "–î—Ä—É–≥–æ–π..." else "",
                    'amount': self.mass_amount_spin.value(),
                    'interval': self.mass_interval_spin.value(),
                    'cycles': self.mass_cycles_spin.value()
                }
            }
            
            for row in range(self.mass_table.rowCount()):
                data['addresses'].append({
                    'address': self.mass_table.item(row, 0).text(),
                    'status': self.mass_table.item(row, 1).text(),
                    'sent_count': int(self.mass_table.item(row, 2).text()),
                    'last_hash': self.mass_table.item(row, 3).text(),
                    'last_time': self.mass_table.item(row, 4).text()
                })
            
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
    
    def _mass_load_list(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"""
        path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤', '', 'JSON Files (*.json);;All Files (*.*)'
        )
        if not path:
            return
        
        try:
            with open(path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É
            self.mass_table.setRowCount(0)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞
            for addr_data in data.get('addresses', []):
                row = self.mass_table.rowCount()
                self.mass_table.insertRow(row)
                
                self.mass_table.setItem(row, 0, QtWidgets.QTableWidgetItem(addr_data['address']))
                self.mass_table.setItem(row, 1, QtWidgets.QTableWidgetItem(addr_data.get('status', '–û–∂–∏–¥–∞–Ω–∏–µ')))
                self.mass_table.setItem(row, 2, QtWidgets.QTableWidgetItem(str(addr_data.get('sent_count', 0))))
                self.mass_table.setItem(row, 3, QtWidgets.QTableWidgetItem(addr_data.get('last_hash', '-')))
                self.mass_table.setItem(row, 4, QtWidgets.QTableWidgetItem(addr_data.get('last_time', '-')))
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = data.get('settings', {})
            if settings.get('token'):
                self.mass_token_combo.setCurrentText(settings['token'])
            if settings.get('custom_token'):
                self.mass_custom_token_edit.setText(settings['custom_token'])
            if 'amount' in settings:
                self.mass_amount_spin.setValue(settings['amount'])
            if 'interval' in settings:
                self.mass_interval_spin.setValue(settings['interval'])
            if 'cycles' in settings:
                self.mass_cycles_spin.setValue(settings['cycles'])
            
            self._mass_update_statistics()
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.mass_table.rowCount()} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ {path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞: {e}")
    
    def _mass_export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.mass_table.rowCount():
            return logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, '–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', '', 'CSV Files (*.csv);;All Files (*.*)'
        )
        if not path:
            return
        
        try:
            with open(path, 'w', encoding='utf-8') as f:
                f.write('address,status,sent_count,last_hash,last_time\n')
                
                for row in range(self.mass_table.rowCount()):
                    address = self.mass_table.item(row, 0).text()
                    status = self.mass_table.item(row, 1).text()
                    sent_count = self.mass_table.item(row, 2).text()
                    last_hash = self.mass_table.item(row, 3).text()
                    last_time = self.mass_table.item(row, 4).text()
                    
                    f.write(f'"{address}","{status}",{sent_count},"{last_hash}","{last_time}"\n')
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def _send_token_transaction(self, to_address, amount, token_address):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å"""
        try:
            w3 = self.rpc.web3()
            account = Account.from_key(self.pk)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –≤ checksum —Ñ–æ—Ä–º–∞—Ç
            to_address = w3.to_checksum_address(to_address)
            token_address = w3.to_checksum_address(token_address)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            token_contract = w3.eth.contract(address=token_address, abi=ERC20_ABI)
            decimals = token_contract.functions.decimals().call()
            balance = token_contract.functions.balanceOf(account.address).call()
            amount_wei = int(amount * (10 ** decimals))
            
            if balance < amount_wei:
                raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {balance / (10 ** decimals)} < {amount}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            nonce = w3.eth.get_transaction_count(account.address)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π
            gas_price = w3.to_wei(self.cfg.get_gas_price(), 'gwei')
            
            tx = token_contract.functions.transfer(
                to_address,
                amount_wei
            ).build_transaction({
                'from': account.address,
                'nonce': nonce,
                'gas': 100000,
                'gasPrice': gas_price
            })
            
            # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
            signed_tx = w3.eth.account.sign_transaction(tx, self.pk)
            tx_hash = send_raw_tx(w3, signed_tx.rawTransaction)
            
            return tx_hash.hex()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            raise
    
    def _send_bnb_transaction(self, to_address, amount):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ BNB –Ω–∞ –∞–¥—Ä–µ—Å"""
        try:
            w3 = self.rpc.web3()
            account = Account.from_key(self.pk)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance = w3.eth.get_balance(account.address)
            amount_wei = Web3.to_wei(amount, 'ether')
            
            if balance < amount_wei:
                raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB: {Web3.from_wei(balance, 'ether')} < {amount}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            nonce = w3.eth.get_transaction_count(account.address)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π
            gas_price = w3.to_wei(self.cfg.get_gas_price(), 'gwei')
            
            tx = {
                'from': account.address,
                'to': Web3.to_checksum_address(to_address),
                'value': amount_wei,
                'nonce': nonce,
                'gas': 21000,
                'gasPrice': gas_price
            }
            
            # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
            signed_tx = w3.eth.account.sign_transaction(tx, self.pk)
            tx_hash = send_raw_tx(w3, signed_tx.rawTransaction)
            
            return tx_hash.hex()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BNB: {e}")
            raise

    # --- #MCP:DS_TAB - –¢–∞–± ¬´–î–°¬ª (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –°–µ—Ä–≤–∏—Å—ã) ---
    def _tab_ds(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –î–° (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –°–µ—Ä–≤–∏—Å—ã) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PLEX ONE
        
        TODO:MCP - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –î–°
        OPTIMIZE:MCP - –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –î–°
        REFACTOR:MCP - –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å ds_tab
        """
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –î–°
            import sys
            import os
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ MCP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –î–°
            ds_components_path = os.path.join(
                os.path.dirname(os.path.abspath(__file__)),
                "ds_components"
            )
            ds_components_path = os.path.normpath(ds_components_path)
            
            if os.path.exists(ds_components_path):
                sys.path.insert(0, ds_components_path)
                
                try:
                    from ds_tab_controller import DSTabController  # type: ignore
                    
                    # –ü–æ–ª—É—á–∞–µ–º BSCScan API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    bscscan_api_key = ""
                    if hasattr(self, 'cfg') and self.cfg:
                        bscscan_api_key = getattr(self.cfg, 'bscscan_api_key', "")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –î–° —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    ds_controller = DSTabController(
                        rpc_pool=self.rpc_pool if hasattr(self, 'rpc_pool') else None,
                        config=self.cfg if hasattr(self, 'cfg') else None,
                        bscscan_api_key=bscscan_api_key
                    )
                    
                    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
                    ds_controller.status_update.connect(self._update_ds_status)
                    ds_controller.transaction_ready.connect(self._handle_ds_transaction)
                    ds_controller.balance_alert.connect(self._handle_balance_alert)
                    ds_controller.analysis_completed.connect(self._handle_analysis_completed)
                    
                    logger.info("[OK] –í–∫–ª–∞–¥–∫–∞ –î–° —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
                    return ds_controller
                    
                except ImportError:
                    # –¢–∏—Ö–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Å–ø–∞–º–∞
                    pass
                    
            else:
                logger.warning(f"–ü—É—Ç—å –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –î–° –Ω–µ –Ω–∞–π–¥–µ–Ω: {ds_components_path}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –î–°: {e}")
        
        # Fallback - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–≥–ª—É—à–∫—É
        return self._create_ds_fallback()
    
    def _create_ds_fallback(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –î–°"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QtWidgets.QLabel("[START] –î–° - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –°–µ—Ä–≤–∏—Å—ã")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 20px;
                font-weight: bold;
                color: #1976D2;
                padding: 20px;
                text-align: center;
            }
        """)
        title_label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PLEX ONE
        info_group = QtWidgets.QGroupBox("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PLEX ONE")
        info_layout = QtWidgets.QFormLayout(info_group)
        
        info_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", QtWidgets.QLabel("PLEX ONE"))
        info_layout.addRow("–°–∏–º–≤–æ–ª:", QtWidgets.QLabel("PLEX"))
        info_layout.addRow("Decimals:", QtWidgets.QLabel("9"))
        info_layout.addRow("Total Supply:", QtWidgets.QLabel("12,600,000 PLEX"))
        info_layout.addRow("–ö–æ–Ω—Ç—Ä–∞–∫—Ç:", QtWidgets.QLabel("0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1"))
        info_layout.addRow("–°–µ—Ç—å:", QtWidgets.QLabel("Binance Smart Chain"))
        
        layout.addWidget(info_group)
        
        # –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏
        links_group = QtWidgets.QGroupBox("[CONNECT] –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏")
        links_layout = QtWidgets.QVBoxLayout(links_group)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QtWidgets.QHBoxLayout()
        
        # BSCScan
        bscscan_btn = QtWidgets.QPushButton("[SEARCH] BSCScan")
        bscscan_btn.clicked.connect(lambda: self._open_url(
            "https://bscscan.com/address/0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1"
        ))
        buttons_layout.addWidget(bscscan_btn)
        
        # PancakeSwap
        pancake_btn = QtWidgets.QPushButton("ü•û PancakeSwap")
        pancake_btn.clicked.connect(lambda: self._open_url(
            "https://pancakeswap.finance/swap"
            "?outputCurrency=0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1"
            "&inputCurrency=0x55d398326f99059fF775485246999027B3197955"
        ))
        buttons_layout.addWidget(pancake_btn)
        
        # –ì—Ä–∞—Ñ–∏–∫
        chart_btn = QtWidgets.QPushButton("üìà –ì—Ä–∞—Ñ–∏–∫")
        chart_btn.clicked.connect(lambda: self._open_url(
            "https://www.geckoterminal.com/ru/bsc/pools/0x41d9650faf3341cbf8947fd8063a1fc88dbf1889"
        ))
        buttons_layout.addWidget(chart_btn)
        
        links_layout.addLayout(buttons_layout)
        layout.addWidget(links_group)
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        status_group = QtWidgets.QGroupBox("[STATS] –°—Ç–∞—Ç—É—Å")
        status_layout = QtWidgets.QVBoxLayout(status_group)
        
        status_text = QtWidgets.QLabel("""
<b>–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –î–°:</b><br>
‚Ä¢ [WARN] –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –î–° –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω<br>
‚Ä¢ [CONNECT] –ë–∞–∑–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã<br>
‚Ä¢ üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ MCP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º<br>
‚Ä¢ üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        """)
        status_text.setWordWrap(True)
        status_layout.addWidget(status_text)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        reload_btn = QtWidgets.QPushButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –î–°")
        reload_btn.clicked.connect(self._reload_ds_components)
        reload_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        status_layout.addWidget(reload_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞
        api_btn = QtWidgets.QPushButton("üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å BSCScan API")
        api_btn.clicked.connect(self._setup_bscscan_api)
        api_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        status_layout.addWidget(api_btn)
        
        layout.addWidget(status_group)
        
        layout.addStretch()
        
        return w
    
    def _open_url(self, url):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        import webbrowser
        webbrowser.open(url)
        logger.info(f"–û—Ç–∫—Ä—ã—Ç URL: {url}")
    
    def _reload_ds_components(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –î–°"""
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            QtWidgets.QMessageBox.information(
                self, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                '–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                QtWidgets.QMessageBox.Ok
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –î–°: {e}")
    
    def _setup_bscscan_api(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ BSCScan API –∫–ª—é—á–∞"""
        text, ok = QtWidgets.QInputDialog.getText(
            self, 'BSCScan API Key',
            '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à BSCScan API –∫–ª—é—á:\n(–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ bscscan.com)',
            QtWidgets.QLineEdit.Normal
        )
        
        if ok and text.strip():
            api_key = text.strip()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å Config –∫–ª–∞—Å—Å)
            logger.info(f"BSCScan API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {api_key[:10]}...")
            
            QtWidgets.QMessageBox.information(
                self, 'API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                'BSCScan API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.',
                QtWidgets.QMessageBox.Ok
            )
    
    def _update_ds_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –≤–∫–ª–∞–¥–∫–∏ –î–°"""
        logger.info(f"–î–° —Å—Ç–∞—Ç—É—Å: {message}")
    
    def _handle_ds_transaction(self, tx_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –î–°"""
        tx_type = tx_data.get('type', 'unknown')
        amount = tx_data.get('amount', 0)
        logger.info(f"–î–° —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞: {tx_type} –Ω–∞ —Å—É–º–º—É {amount}")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
    
    def _handle_balance_alert(self, address, balance):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É –æ—Ç –î–°"""
        short_address = f"{address[:6]}...{address[-4:]}"
        logger.warning(f"–î–° –∞–ª–µ—Ä—Ç: –±–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å —É {short_address}: {balance} PLEX")
    
    def _handle_analysis_completed(self, results):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        all_traders = results.get('all_traders', {})
        holders = results.get('holders', {})
        analysis_type = results.get('analysis_type', 'unknown')
        
        logger.info(f"–î–° –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ({analysis_type}): {len(all_traders)} —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, {len(holders)} –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π")
        
        # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if len(holders) > 0:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(holders)} –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π PLEX ONE")

    # --- –¢–∞–± ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª ---
    def _tab_settings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)
        
        # –ì—Ä—É–ø–ø–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        general_group = QtWidgets.QGroupBox("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        general_layout = QtWidgets.QFormLayout(general_group)
        
        # –¶–µ–Ω–∞ –≥–∞–∑–∞
        self.gas_price_spin = QtWidgets.QDoubleSpinBox()
        self.gas_price_spin.setRange(0.1, 500)
        self.gas_price_spin.setDecimals(1)
        self.gas_price_spin.setSingleStep(0.1)
        self.gas_price_spin.setValue(float(self.cfg.get_gas_price()))
        self.gas_price_spin.valueChanged.connect(self._update_gas_price)
        general_layout.addRow("–¶–µ–Ω–∞ –≥–∞–∑–∞ (Gwei):", self.gas_price_spin)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–µ—Ä–∏–∏
        self.repeat_count_spin = QtWidgets.QSpinBox()
        self.repeat_count_spin.setRange(1, 100)
        self.repeat_count_spin.setValue(self.cfg.get_repeat_count())
        self.repeat_count_spin.valueChanged.connect(self._update_repeat_count)
        general_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–µ—Ä–∏–∏:", self.repeat_count_spin)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        btn_clear_cache = QtWidgets.QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
        btn_clear_cache.clicked.connect(self._clear_cache)
        general_layout.addRow("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:", btn_clear_cache)
        
        layout.addWidget(general_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫—á–µ–π–Ω–∞
        blockchain_group = QtWidgets.QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞")
        blockchain_layout = QtWidgets.QFormLayout(blockchain_group)
        
        # –°—Ç–∞—Ç—É—Å –±–ª–æ–∫—á–µ–π–Ω–∞
        blockchain_status = "–í–∫–ª—é—á–µ–Ω" if blockchain_enabled else "–û—Ç–∫–ª—é—á–µ–Ω"
        blockchain_layout.addRow("–°—Ç–∞—Ç—É—Å –±–ª–æ–∫—á–µ–π–Ω–∞:", QtWidgets.QLabel(blockchain_status))
        
        # –°–ø–∏—Å–æ–∫ RPC —É–∑–ª–æ–≤
        rpc_list = QtWidgets.QListWidget()
        for node in RPC_NODES:
            rpc_list.addItem(node)
        blockchain_layout.addRow("RPC —É–∑–ª—ã:", rpc_list)
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        btn_test_conn = QtWidgets.QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        btn_test_conn.clicked.connect(self._test_blockchain_connection)
        blockchain_layout.addRow("", btn_test_conn)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ
        wallet_info = QtWidgets.QLabel("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        if blockchain_enabled and self.pk:
            try:
                address = Web3().eth.account.from_key(self.pk).address
                wallet_info.setText(address)
            except Exception:
                wallet_info.setText("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞")
        blockchain_layout.addRow("–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:", wallet_info)
        
        layout.addWidget(blockchain_group)
        
        # –ì—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        about_group = QtWidgets.QGroupBox("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        about_layout = QtWidgets.QVBoxLayout(about_group)
        
        about_text = QtWidgets.QLabel(
            "WalletSender - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤ BSC –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.\n"
            "–í–µ—Ä—Å–∏—è: 2.0\n"
            "¬© 2023-2025"
        )
        about_text.setWordWrap(True)
        about_layout.addWidget(about_text)
        
        layout.addWidget(about_group)
        
        return w
    
    def _update_gas_price(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.cfg.set_gas_price(value)
        logger.info(f"–¶–µ–Ω–∞ –≥–∞–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value} Gwei")
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, 'mass_gas_price_label'):
            self.mass_gas_price_label.setText(f"–¶–µ–Ω–∞ –≥–∞–∑–∞: {value} Gwei")
    
    def _update_repeat_count(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.cfg.set_repeat_count(value)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}")
    
    def _clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        count = cache.clear()
        logger.info(f"–û—á–∏—â–µ–Ω–æ {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—ç—à–∞")
    
    def _test_blockchain_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É"""
        if not blockchain_enabled:
            QtWidgets.QMessageBox.warning(
                self, '–ë–ª–æ–∫—á–µ–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω',
                '–§—É–Ω–∫—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.',
                QtWidgets.QMessageBox.Ok
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(
            target=self._test_connection_thread,
            daemon=True
        ).start()
    
    def _test_connection_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É"""
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É...")
            
            w3 = self.rpc.web3()
            
            if w3.is_connected():
                block = w3.eth.block_number
                used_node = self.rpc.get_healthy_node()
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –£–∑–µ–ª: {used_node}, –ë–ª–æ–∫: {block}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                self.update_status_signal.emit(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –£–∑–µ–ª: {used_node}, –ë–ª–æ–∫: {block}")
                
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É")
                self.update_status_signal.emit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.update_status_signal.emit(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def _show_successful_connection(self, details):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        QtWidgets.QMessageBox.information(
            self, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É BSC —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n{details}",
            QtWidgets.QMessageBox.Ok
        )

    def _show_failed_connection(self, error_message=""):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É BSC"
        if error_message:
            message += f"\n\n–ü—Ä–∏—á–∏–Ω–∞: {error_message}"
        
        QtWidgets.QMessageBox.warning(
            self, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            message,
            QtWidgets.QMessageBox.Ok
        )
                
    def _show_connection_result(self, success, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if success:
            QtWidgets.QMessageBox.information(
                self, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
                message,
                QtWidgets.QMessageBox.Ok
            )
        else:
            QtWidgets.QMessageBox.warning(
                self, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                message,
                QtWidgets.QMessageBox.Ok
            )
            
    # --- –í–∫–ª–∞–¥–∫–∞ ¬´–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞¬ª ---
    def _tab_mass_distribution(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        w = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(w)

        # –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥—Ä–µ—Å + –±–∞–ª–∞–Ω—Å—ã)
        wallet_group = QtWidgets.QGroupBox("–ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        wallet_layout = QtWidgets.QHBoxLayout(wallet_group)
        self.mass_sender_address_label = QtWidgets.QLabel("–ê–¥—Ä–µ—Å: -")
        self.mass_balance_plex_label = QtWidgets.QLabel("PLEX: -")
        self.mass_balance_bnb_label = QtWidgets.QLabel("BNB: -")
        self.mass_balance_usdt_label = QtWidgets.QLabel("USDT: -")
        wallet_layout.addWidget(self.mass_sender_address_label)
        wallet_layout.addWidget(self.mass_balance_plex_label)
        wallet_layout.addWidget(self.mass_balance_bnb_label)
        wallet_layout.addWidget(self.mass_balance_usdt_label)
        self.mass_refresh_wallet_btn = QtWidgets.QPushButton("‚Üª")
        self.mass_refresh_wallet_btn.setFixedWidth(30)
        self.mass_refresh_wallet_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        self.mass_refresh_wallet_btn.clicked.connect(self._mass_update_wallet_info)
        wallet_layout.addWidget(self.mass_refresh_wallet_btn)
        layout.addWidget(wallet_group)
        QtCore.QTimer.singleShot(300, self._mass_update_wallet_info)

        # –ì—Ä—É–ø–ø–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
        import_group = QtWidgets.QGroupBox("–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤")
        import_layout = QtWidgets.QVBoxLayout(import_group)

        # –ö–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        import_buttons_layout = QtWidgets.QHBoxLayout()
        self.mass_import_clipboard_btn = QtWidgets.QPushButton("–ò–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
        self.mass_import_clipboard_btn.clicked.connect(self._mass_import_from_clipboard)
        import_buttons_layout.addWidget(self.mass_import_clipboard_btn)
        self.mass_import_excel_btn = QtWidgets.QPushButton("–ò–∑ Excel")
        self.mass_import_excel_btn.clicked.connect(self._mass_import_from_excel)
        import_buttons_layout.addWidget(self.mass_import_excel_btn)
        self.mass_clear_addresses_btn = QtWidgets.QPushButton("–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.mass_clear_addresses_btn.clicked.connect(self._mass_clear_addresses)
        import_buttons_layout.addWidget(self.mass_clear_addresses_btn)
        import_layout.addLayout(import_buttons_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤
        self.mass_table = QtWidgets.QTableWidget(0, 4)
        self.mass_table.setHorizontalHeaderLabels(['‚Ññ', '–ê–¥—Ä–µ—Å', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–æ–≥—Ä–µ—Å—Å'])
        header = self.mass_table.horizontalHeader()
        if header:
            header.setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.mass_table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        import_layout.addWidget(self.mass_table)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.mass_import_info = QtWidgets.QLabel("–ê–¥—Ä–µ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: 0")
        import_layout.addWidget(self.mass_import_info)
        layout.addWidget(import_group)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_group = QtWidgets.QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        settings_layout = QtWidgets.QFormLayout(settings_group)
        token_layout = QtWidgets.QHBoxLayout()
        self.mass_token_group = QtWidgets.QButtonGroup(w)
        self.mass_plex_radio = QtWidgets.QRadioButton('PLEX ONE')
        self.mass_usdt_radio = QtWidgets.QRadioButton('USDT')
        self.mass_bnb_radio = QtWidgets.QRadioButton('BNB')
        self.mass_custom_radio = QtWidgets.QRadioButton('–î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω')
        self.mass_plex_radio.setChecked(True)
        for btn in [self.mass_plex_radio, self.mass_usdt_radio, self.mass_bnb_radio, self.mass_custom_radio]:
            self.mass_token_group.addButton(btn)
            token_layout.addWidget(btn)
        settings_layout.addRow("–¢–æ–∫–µ–Ω:", token_layout)
        self.mass_custom_token_address = QtWidgets.QLineEdit()
        self.mass_custom_token_address.setPlaceholderText("–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.mass_custom_token_address.setEnabled(False)
        self.mass_custom_radio.toggled.connect(self.mass_custom_token_address.setEnabled)
        settings_layout.addRow("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:", self.mass_custom_token_address)
        self.mass_amount = QtWidgets.QDoubleSpinBox()
        self.mass_amount.setRange(0.00000001, 1000000)
        self.mass_amount.setDecimals(8)
        self.mass_amount.setValue(0.05)
        settings_layout.addRow("–°—É–º–º–∞ –Ω–∞ –∞–¥—Ä–µ—Å:", self.mass_amount)
        self.mass_interval = QtWidgets.QSpinBox()
        self.mass_interval.setRange(1, 600)
        self.mass_interval.setValue(5)
        settings_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):", self.mass_interval)
        self.mass_cycles = QtWidgets.QSpinBox()
        self.mass_cycles.setRange(1, 100)
        self.mass_cycles.setValue(10)
        settings_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:", self.mass_cycles)
        layout.addWidget(settings_group)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_group = QtWidgets.QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π")
        control_layout = QtWidgets.QVBoxLayout(control_group)
        buttons = QtWidgets.QHBoxLayout()
        self.mass_start_btn = QtWidgets.QPushButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        self.mass_start_btn.clicked.connect(self._mass_start_distribution)
        buttons.addWidget(self.mass_start_btn)
        self.mass_pause_btn = QtWidgets.QPushButton("–ü–∞—É–∑–∞")
        self.mass_pause_btn.setEnabled(False)
        self.mass_pause_btn.clicked.connect(self._mass_pause_distribution)
        buttons.addWidget(self.mass_pause_btn)
        self.mass_resume_btn = QtWidgets.QPushButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        self.mass_resume_btn.setEnabled(False)
        self.mass_resume_btn.clicked.connect(self._mass_resume_distribution)
        buttons.addWidget(self.mass_resume_btn)
        self.mass_stop_btn = QtWidgets.QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.mass_stop_btn.setEnabled(False)
        self.mass_stop_btn.clicked.connect(self._mass_stop_distribution)
        buttons.addWidget(self.mass_stop_btn)
        control_layout.addLayout(buttons)
        self.mass_progress = QtWidgets.QProgressBar()
        control_layout.addWidget(self.mass_progress)
        self.mass_status_label = QtWidgets.QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ")
        control_layout.addWidget(self.mass_status_label)
        info_layout = QtWidgets.QHBoxLayout()
        self.mass_current_cycle_label = QtWidgets.QLabel("–¶–∏–∫–ª: 0/0")
        self.mass_sent_count_label = QtWidgets.QLabel("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0")
        self.mass_errors_label = QtWidgets.QLabel("–û—à–∏–±–æ–∫: 0")
        for wgt in [self.mass_current_cycle_label, self.mass_sent_count_label, self.mass_errors_label]:
            info_layout.addWidget(wgt)
        control_layout.addLayout(info_layout)
        layout.addWidget(control_group)

        stats_group = QtWidgets.QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QtWidgets.QFormLayout(stats_group)
        self.mass_total_sent_label = QtWidgets.QLabel("0")
        self.mass_total_amount_label = QtWidgets.QLabel("0")
        self.mass_gas_spent_label = QtWidgets.QLabel("0 BNB")
        self.mass_gas_price_label = QtWidgets.QLabel(f"–¶–µ–Ω–∞ –≥–∞–∑–∞: {self.cfg.get_gas_price()} Gwei")
        stats_layout.addRow("–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", self.mass_total_sent_label)
        stats_layout.addRow("–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", self.mass_total_amount_label)
        stats_layout.addRow("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–∞–∑:", self.mass_gas_spent_label)
        stats_layout.addRow("", self.mass_gas_price_label)
        layout.addWidget(stats_group)

        self.mass_distribution_active = False
        self.mass_distribution_paused = False
        self.mass_distribution_thread = None
        self.mass_addresses = []
        self.mass_current_distribution_id = None
        return w
    
    def _mass_import_from_clipboard(self):
        """–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        clipboard = QtWidgets.QApplication.clipboard()
        text = clipboard.text()
        
        if not text:
            logger.warning("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
        import re
        addresses = re.split(r'[\s,;\n]+', text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞
        valid_addresses = []
        for addr in addresses:
            addr = addr.strip()
            if addr and blockchain_enabled:
                try:
                    if Web3.is_address(addr):
                        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ checksum —Ñ–æ—Ä–º–∞—Ç—É
                        checksum_addr = Web3.to_checksum_address(addr)
                        if checksum_addr not in valid_addresses:
                            valid_addresses.append(checksum_addr)
                except Exception as e:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {addr}, –æ—à–∏–±–∫–∞: {e}")
            elif addr and not blockchain_enabled:
                # –ï—Å–ª–∏ –±–ª–æ–∫—á–µ–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∞–¥—Ä–µ—Å–∞
                if addr.startswith('0x') and len(addr) == 42:
                    if addr not in valid_addresses:
                        valid_addresses.append(addr)
        
        if valid_addresses:
            self._mass_add_addresses(valid_addresses)
            logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(valid_addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
        else:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞")
    
    def _mass_import_from_excel(self):
        """–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        if not excel_enabled:
            QtWidgets.QMessageBox.warning(
                self, 'Excel –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
                '–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Excel –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É openpyxl:\npip install openpyxl',
                QtWidgets.QMessageBox.Ok
            )
            return
        
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, '–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª', '', 'Excel Files (*.xlsx *.xls)'
        )
        
        if not file_path:
            return
        
        try:
            import openpyxl
            workbook = openpyxl.load_workbook(file_path, read_only=True)
            
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
            sheet = workbook.active
            
            valid_addresses = []
            for row in sheet.iter_rows(values_only=True):
                for cell in row:
                    if cell and isinstance(cell, str):
                        addr = cell.strip()
                        if addr and blockchain_enabled:
                            try:
                                if Web3.is_address(addr):
                                    checksum_addr = Web3.to_checksum_address(addr)
                                    if checksum_addr not in valid_addresses:
                                        valid_addresses.append(checksum_addr)
                            except Exception:
                                pass
                        elif addr and not blockchain_enabled:
                            if addr.startswith('0x') and len(addr) == 42:
                                if addr not in valid_addresses:
                                    valid_addresses.append(addr)
            
            workbook.close()
            
            if valid_addresses:
                self._mass_add_addresses(valid_addresses)
                logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(valid_addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞")
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            QtWidgets.QMessageBox.critical(
                self, '–û—à–∏–±–∫–∞',
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel —Ñ–∞–π–ª:\n{str(e)}',
                QtWidgets.QMessageBox.Ok
            )
    
    def _mass_add_addresses(self, addresses):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        self.mass_table.setRowCount(0)
        self.mass_addresses = []
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
        for i, addr in enumerate(addresses):
            if not addr:
                continue
            row = self.mass_table.rowCount()
            self.mass_table.insertRow(row)
            # –ù–æ–º–µ—Ä
            self.mass_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(i + 1)))
            # –ê–¥—Ä–µ—Å
            self.mass_table.setItem(row, 1, QtWidgets.QTableWidgetItem(addr))
            # –°—Ç–∞—Ç—É—Å
            status_item = QtWidgets.QTableWidgetItem("–û–∂–∏–¥–∞–Ω–∏–µ")
            self.mass_table.setItem(row, 2, status_item)
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            self.mass_table.setItem(row, 3, QtWidgets.QTableWidgetItem("0/0"))
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ –∏–Ω—Ñ–æ
        self.mass_addresses = [a for a in addresses if a]
        if hasattr(self, 'mass_import_info'):
            self.mass_import_info.setText(f"–ê–¥—Ä–µ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.mass_addresses)}")
        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.mass_addresses)} –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É")
    
    def _mass_clear_addresses(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"""
        self.mass_table.setRowCount(0)
        self.mass_addresses = []
        self.mass_import_info.setText("–ê–¥—Ä–µ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: 0")
        logger.info("–°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def _mass_start_distribution(self):
        """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.mass_addresses:
            QtWidgets.QMessageBox.warning(
                self, '–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤',
                '–°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
                QtWidgets.QMessageBox.Ok
            )
            return
        
        if not blockchain_enabled:
            QtWidgets.QMessageBox.warning(
                self, '–ë–ª–æ–∫—á–µ–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω',
                '–§—É–Ω–∫—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
                QtWidgets.QMessageBox.Ok
            )
            return
        
        if not self.pk:
            QtWidgets.QMessageBox.warning(
                self, '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
                QtWidgets.QMessageBox.Ok
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏
        token_type = None
        token_address = None
        
        if self.mass_plex_radio.isChecked():
            token_type = 'PLEX ONE'
            token_address = PLEX_CONTRACT
        elif self.mass_usdt_radio.isChecked():
            token_type = 'USDT'
            token_address = USDT_CONTRACT
        elif self.mass_bnb_radio.isChecked():
            token_type = 'BNB'
            token_address = None  # –ù–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
        elif self.mass_custom_radio.isChecked():
            custom_addr = self.mass_custom_token_address.text().strip()
            if not custom_addr or not Web3.is_address(custom_addr):
                QtWidgets.QMessageBox.warning(
                    self, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å',
                    '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞',
                    QtWidgets.QMessageBox.Ok
                )
                return
            token_type = 'CUSTOM'
            token_address = Web3.to_checksum_address(custom_addr)
        
        amount = self.mass_amount.value()
        interval = self.mass_interval.value()
        cycles = self.mass_cycles.value()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        total_transactions = len(self.mass_addresses) * cycles
        total_amount = amount * total_transactions
        
        msg = f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n\n"
        msg += f"–¢–æ–∫–µ–Ω: {token_type}\n"
        msg += f"–°—É–º–º–∞ –Ω–∞ –∞–¥—Ä–µ—Å: {amount}\n"
        msg += f"–ê–¥—Ä–µ—Å–æ–≤: {len(self.mass_addresses)}\n"
        msg += f"–¶–∏–∫–ª–æ–≤: {cycles}\n"
        msg += f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}\n"
        msg += f"–û–±—â–∞—è —Å—É–º–º–∞: {total_amount}\n\n"
        msg += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏',
            msg,
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply != QtWidgets.QMessageBox.Yes:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        self.mass_current_distribution_id = add_mass_distribution(
            name=f"–†–∞—Å—Å—ã–ª–∫–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            token_address=token_address or '0x0',
            token_symbol=token_type,
            amount_per_tx=amount,
            total_addresses=len(self.mass_addresses),
            total_cycles=cycles,
            interval_seconds=interval
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        self.mass_distribution_active = True
        self.mass_distribution_paused = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.mass_start_btn.setEnabled(False)
        self.mass_pause_btn.setEnabled(True)
        self.mass_stop_btn.setEnabled(True)
        self.mass_import_clipboard_btn.setEnabled(False)
        self.mass_import_excel_btn.setEnabled(False)
        self.mass_clear_addresses_btn.setEnabled(False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.mass_distribution_thread = threading.Thread(
            target=self._mass_distribution_worker,
            args=(token_type, token_address, amount, interval, cycles),
            daemon=False  # –ò–∑–º–µ–Ω–µ–Ω–æ: —É–±–∏—Ä–∞–µ–º daemon=True —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª–æ—Å—å
        )
        self.mass_distribution_thread.start()
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {token_type}, {amount} x {cycles} —Ü–∏–∫–ª–æ–≤")
    
    def _mass_distribution_worker(self, token_type: str, token_address: str, amount: float, interval: int, cycles: int) -> None:
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        logger.info("üîÑ –ù–∞—á–∞—Ç —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
        try:
            total_sent = 0
            total_errors = 0
            total_gas_spent: float = 0.0
            
            for cycle in range(1, cycles + 1):
                if not self.mass_distribution_active:
                    logger.info(f"‚èπÔ∏è –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ü–∏–∫–ª–µ {cycle}")
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–∏–∫–ª–µ
                self.update_status_signal.emit(f"–¶–∏–∫–ª {cycle}/{cycles}")
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤ GUI-–ø–æ—Ç–æ–∫–µ
                self.update_mass_cycle_label.emit(f"–¶–∏–∫–ª: {cycle}/{cycles}")
                
                for i, address in enumerate(self.mass_addresses):
                    if not self.mass_distribution_active:
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
                    while self.mass_distribution_paused and self.mass_distribution_active:
                        time.sleep(0.5)
                    
                    if not self.mass_distribution_active:
                        break
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥—Ä–µ—Å–∞
                    self._update_address_status(i, "–û—Ç–ø—Ä–∞–≤–∫–∞...", QtGui.QColor('#FFA500'))
                    
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                        if token_type == 'BNB':
                            result = self._send_bnb(address, amount)
                            tx_hash = str(result.get('tx_hash', ''))
                            gas_used = float(result.get('gas_used', 0.0))
                        else:
                            result = self._send_token(address, amount, token_address)
                            tx_hash = str(result.get('tx_hash', ''))
                            gas_used = float(result.get('gas_used', 0.0))
                        
                        if tx_hash and self.mass_current_distribution_id is not None:
                            total_sent += 1
                            total_gas_spent += gas_used
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                            add_mass_distribution_item(
                                self.mass_current_distribution_id,
                                address,
                                cycle,
                                tx_hash,
                                'success'
                            )
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                            self._update_address_status(i, "–£—Å–ø–µ—à–Ω–æ", QtGui.QColor('#00FF00'))
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ UI –º–µ—Ç–æ–¥–∞)
                            self.address_progress_signal.emit(i, cycle, cycles)
                            
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} {token_type} –Ω–∞ {address}, —Ü–∏–∫–ª {cycle}")
                        else:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                    
                    except Exception as e:
                        total_errors += 1
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
                        if self.mass_current_distribution_id is not None:
                            add_mass_distribution_item(
                                self.mass_current_distribution_id,
                                address,
                                cycle,
                                '',
                                'error',
                                str(e)
                            )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        self._update_address_status(i, f"–û—à–∏–±–∫–∞: {str(e)[:30]}...", QtGui.QColor('#FF0000'))
                        
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {address}: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.mass_stats_signal.emit(total_sent, total_errors, total_gas_spent, amount * total_sent)
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    progress = int(((cycle - 1) * len(self.mass_addresses) + i + 1) / (cycles * len(self.mass_addresses)) * 100)
                    self.update_progress_signal.emit("mass", progress)
                    
                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    if i < len(self.mass_addresses) - 1 and self.mass_distribution_active:
                        time.sleep(interval)
                
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                if cycle < cycles and self.mass_distribution_active:
                    logger.info(f"–¶–∏–∫–ª {cycle} –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
                    time.sleep(interval * 2)  # –î–≤–æ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            if self.mass_current_distribution_id:
                status = 'completed' if self.mass_distribution_active else 'cancelled'
                update_mass_distribution_status(self.mass_current_distribution_id, status)
            
            logger.info(f"[OK] –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}, –æ—à–∏–±–æ–∫: {total_errors}")
        
        except Exception as e:
            logger.error(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        
        finally:
            logger.info("[CONFIG] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.mass_distribution_active = False
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ GUI-–ø–æ—Ç–æ–∫–µ
            try:
                self.mass_distribution_finished_signal.emit()
                logger.info("[OK] UI –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ")
            except Exception as e:
                logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è UI: {e}")
    
    @QtCore.pyqtSlot()
    def _mass_distribution_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI"""
        self.mass_start_btn.setEnabled(True)
        self.mass_pause_btn.setEnabled(False)
        self.mass_resume_btn.setEnabled(False)
        self.mass_stop_btn.setEnabled(False)
        self.mass_import_clipboard_btn.setEnabled(True)
        self.mass_import_excel_btn.setEnabled(True)
        self.mass_clear_addresses_btn.setEnabled(True)
        self.mass_status_label.setText("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _update_address_status(self, row: int, status: str, color: Optional[str] = None) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥—Ä–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –ø–æ—Ç–æ–∫–∞
        if '‚úì' in status or '–£—Å–ø–µ—à–Ω–æ' in status:
            self.update_address_status.emit(row, "‚úì –£—Å–ø–µ—à–Ω–æ")
        elif '‚úó' in status or '–û—à–∏–±–∫–∞' in status:
            self.update_address_status.emit(row, "‚úó –û—à–∏–±–∫–∞")
        elif '‚ü≥' in status or '–û—Ç–ø—Ä–∞–≤–∫–∞' in status:
            self.update_address_status.emit(row, "‚ü≥ –û—Ç–ø—Ä–∞–≤–∫–∞...")
        else:
            self.update_address_status.emit(row, status)
    
    def _update_address_progress(self, row: int, current: int, total: int) -> None:
        """(DEPRECATED) –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏; —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º address_progress_signal –Ω–∞–ø—Ä—è–º—É—é"""
        self.address_progress_signal.emit(row, current, total)
    
    @QtCore.pyqtSlot(int, int, int)
    def _update_progress_item(self, row: int, current: int, total: int) -> None:
        """–°–ª–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if row < self.mass_table.rowCount():
                progress_item = QtWidgets.QTableWidgetItem(f"{current}/{total}")
                self.mass_table.setItem(row, 3, progress_item)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    @QtCore.pyqtSlot(int, int, float, float)
    def _update_mass_statistics(self, sent: int, errors: int, gas_spent: float, total_amount: float) -> None:
        """–°–ª–æ—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (GUI-–ø–æ—Ç–æ–∫)"""
        try:
            if getattr(self, 'mass_sent_count_label', None):
                self.mass_sent_count_label.setText(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
            if getattr(self, 'mass_errors_label', None):
                self.mass_errors_label.setText(f"–û—à–∏–±–æ–∫: {errors}")
            if getattr(self, 'mass_total_sent_label', None):
                self.mass_total_sent_label.setText(str(sent))
            if getattr(self, 'mass_total_amount_label', None):
                self.mass_total_amount_label.setText(f"{total_amount:.8f}")
            if getattr(self, 'mass_gas_spent_label', None):
                self.mass_gas_spent_label.setText(f"{gas_spent:.8f} BNB")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _mass_pause_distribution(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.mass_distribution_paused = True
        self.mass_pause_btn.setEnabled(False)
        self.mass_resume_btn.setEnabled(True)
        self.mass_status_label.setText("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _mass_resume_distribution(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.mass_distribution_paused = False
        self.mass_pause_btn.setEnabled(True)
        self.mass_resume_btn.setEnabled(False)
        self.mass_status_label.setText("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
        logger.info("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _mass_stop_distribution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        reply = QtWidgets.QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self.mass_distribution_active = False
            self.mass_distribution_paused = False
            self.mass_status_label.setText("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            logger.info("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def _send_bnb(self, to_address: str, amount: float) -> Dict[str, Union[str, float, bool]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ BNB"""
        try:
            w3 = self.rpc.web3()
            account = w3.eth.account.from_key(self.pk)
            
            # –ü–æ–ª—É—á–∞–µ–º nonce
            nonce = w3.eth.get_transaction_count(account.address)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            gas_price = w3.to_wei(self.cfg.get_gas_price(), 'gwei')
            value = w3.to_wei(amount, 'ether')
            
            tx = {
                'nonce': nonce,
                'to': to_address,
                'value': value,
                'gas': 21000,
                'gasPrice': gas_price,
                'chainId': 56  # BSC mainnet
            }
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            signed = account.sign_transaction(tx)
            tx_hash = send_raw_tx(w3, signed.rawTransaction)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
            
            gas_used = float(receipt['gasUsed']) * gas_price / 10**18
            
            return {
                'tx_hash': tx_hash.hex(),
                'gas_used': gas_used,
                'success': True
            }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ BNB: {e}")
            raise
    
    def _send_token(self, to_address: str, amount: float, token_address: str) -> Dict[str, Union[str, float, bool]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
        try:
            w3 = self.rpc.web3()
            account = w3.eth.account.from_key(self.pk)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –≤ checksum —Ñ–æ—Ä–º–∞—Ç
            to_address = w3.to_checksum_address(to_address)
            token_address = w3.to_checksum_address(token_address)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
            token_contract = w3.eth.contract(address=token_address, abi=ERC20_ABI)
            
            # –ü–æ–ª—É—á–∞–µ–º decimals
            decimals = token_contract.functions.decimals().call()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
            amount_wei = int(amount * 10**decimals)
            
            # –ü–æ–ª—É—á–∞–µ–º nonce
            nonce = w3.eth.get_transaction_count(account.address)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            gas_price = w3.to_wei(self.cfg.get_gas_price(), 'gwei')
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é transfer
            tx = token_contract.functions.transfer(to_address, amount_wei).build_transaction({
                'from': account.address,
                'nonce': nonce,
                'gasPrice': gas_price,
                'gas': 100000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
            })
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            signed = account.sign_transaction(tx)
            tx_hash = send_raw_tx(w3, signed.rawTransaction)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
            
            gas_used = float(receipt['gasUsed']) * gas_price / 10**18
            
            return {
                'tx_hash': tx_hash.hex(),
                'gas_used': gas_used,
                'success': True
            }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            raise

# ======== #MCP:MAIN ========
# Entry point
if __name__ == "__main__":
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    
    TODO:MCP - –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    REFACTOR:MCP - –í—ã–¥–µ–ª–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    app = QtWidgets.QApplication(sys.argv)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Qt –º–µ—Ç–∞-—Ç–∏–ø–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å PyQt5/PyQt6
    try:
        QtCore.qRegisterMetaType('QVector<int>')
        QtCore.qRegisterMetaType('QTextCursor')
    except AttributeError:
        # –í PyQt5 qRegisterMetaType –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass
    
    win = MainWindow()
    win.show()
    sys.exit(app.exec_())