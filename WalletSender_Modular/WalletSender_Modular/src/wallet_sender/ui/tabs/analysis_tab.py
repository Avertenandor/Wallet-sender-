"""
–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""

import threading
import time
import asyncio
from typing import Dict, List, Optional, Any, Tuple, TYPE_CHECKING
from datetime import datetime

from PyQt5.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QGroupBox, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QProgressBar,
    QSpinBox, QDoubleSpinBox, QComboBox, QTextEdit, QHeaderView,
    QAbstractItemView, QRadioButton, QButtonGroup, QFormLayout,
    QMessageBox, QMenu, QApplication, QAction
)
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QTimer, QUrl, QPoint
from PyQt5.QtGui import QColor, QDesktopServices

from web3 import Web3

from .base_tab import BaseTab
if TYPE_CHECKING:  # only for type checkers
    from ...core.web3_provider import Web3Provider
    from ...services.token_service import TokenService
from ...constants import PLEX_CONTRACT, USDT_CONTRACT
from ...utils.logger import get_logger
from ...services.bscscan_service import get_bscscan_service
from ...config import get_config

logger = get_logger(__name__)

class AnalysisTab(BaseTab):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤ BSC"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –ø–æ—Ç–æ–∫–æ–≤
    update_table_signal = pyqtSignal(list, dict, dict)
    search_finished_signal = pyqtSignal()
    found_tx_added_signal = pyqtSignal()
    
    def __init__(self, main_window, parent=None):
        super().__init__(main_window, parent)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.web3_provider: Optional["Web3Provider"] = None
        self.token_service: Optional["TokenService"] = None
        self.is_searching: bool = False
        self.stop_search_event: threading.Event = threading.Event()
        self.search_thread: Optional[threading.Thread] = None
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BscScanService, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–∞ –≤–∫–ª–∞–¥–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–º–ø–æ—Ä—Ç–∞/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:  # noqa: WPS501
            self.bscscan_service = get_bscscan_service()
        except Exception as e:  # pylint: disable=broad-except
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å bscscan_service: %s", e)
            # –°–æ–∑–¥–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç —è–≤–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å AttributeError –≤ —Ç–∞–π–º–µ—Ä–∞—Ö
            self.bscscan_service = None
        self.config = get_config()
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.update_table_signal.connect(self._update_search_results)  # type: ignore
        self.search_finished_signal.connect(self._on_search_finished)  # type: ignore
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BSC")
        header_layout = QVBoxLayout(header)
        header_label = QLabel("[SEARCH] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ BSC")
        header_label.setStyleSheet("font-weight: bold; color: #4CAF50;")
        header_layout.addWidget(header_label)
        layout.addWidget(header)
        
        # –ì—Ä—É–ø–ø–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        search_group = self._create_search_group()
        layout.addWidget(search_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
        api_group = self._create_api_group()
        layout.addWidget(api_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        results_layout = QVBoxLayout(results_group)
        
        self.results_table = QTableWidget(0, 6)
        self.results_table.setHorizontalHeaderLabels([
            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Tx', '–û–±—â–∞—è —Å—É–º–º–∞', 
            '–ü–µ—Ä–≤–∞—è Tx', '–ü–æ—Å–ª–µ–¥–Ω—è—è Tx', '–°—Ç–∞—Ç—É—Å'
        ])
        
        header = self.results_table.horizontalHeader()
        if header:
                header.setSectionResizeMode(QHeaderView.ResizeToContents)  # type: ignore
                header.setSectionResizeMode(0, QHeaderView.Stretch)  # type: ignore
        
        self.results_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.results_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.results_table.customContextMenuRequested.connect(self._show_context_menu)
        results_layout.addWidget(self.results_table)
        
        layout.addWidget(results_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        layout.addWidget(self.progress_bar)
        
        # –õ–æ–≥ –ø–æ–∏—Å–∫–∞
        log_group = QGroupBox("–õ–æ–≥ –∞–Ω–∞–ª–∏–∑–∞")
        log_layout = QVBoxLayout(log_group)
        
        self.search_log = QTextEdit()
        self.search_log.setReadOnly(True)
        self.search_log.setMaximumHeight(150)
        log_layout.addWidget(self.search_log)
        
        layout.addWidget(log_group)
        
    def _create_search_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
        layout = QFormLayout(group)
        
        # –ê–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.address_input = QLineEdit()
        self.address_input.setPlaceholderText("0x...")
        layout.addRow("–ê–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", self.address_input)
        
        # –¢–æ–∫–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        token_layout = QHBoxLayout()
        self.token_combo = QComboBox()
        self.token_combo.addItems(['–í—Å–µ —Ç–æ–∫–µ–Ω—ã', 'PLEX ONE', 'USDT', '–î—Ä—É–≥–æ–π'])
        token_layout.addWidget(self.token_combo)
        
        self.custom_token_input = QLineEdit()
        self.custom_token_input.setPlaceholderText("–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (0x...)")
        self.custom_token_input.setEnabled(False)
        token_layout.addWidget(self.custom_token_input)
        
        layout.addRow("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–∫–µ–Ω—É:", token_layout)
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
        search_mode_layout = QHBoxLayout()
        self.mode_group = QButtonGroup()
        
        self.radio_exact = QRadioButton("–¢–æ—á–Ω–∞—è —Å—É–º–º–∞")
        self.radio_range = QRadioButton("–î–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º")
        self.radio_all = QRadioButton("–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        self.radio_all.setChecked(True)
        
        self.mode_group.addButton(self.radio_exact)
        self.mode_group.addButton(self.radio_range)
        self.mode_group.addButton(self.radio_all)
        
        search_mode_layout.addWidget(self.radio_exact)
        search_mode_layout.addWidget(self.radio_range)
        search_mode_layout.addWidget(self.radio_all)
        search_mode_layout.addStretch()
        
        layout.addRow("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", search_mode_layout)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—É–º–º—ã
        amount_layout = QHBoxLayout()
        
        # –¢–æ—á–Ω–∞—è —Å—É–º–º–∞
        self.exact_amount = QDoubleSpinBox()
        self.exact_amount.setRange(0, 1000000)
        self.exact_amount.setDecimals(8)
        self.exact_amount.setValue(30)
        self.exact_amount.setEnabled(False)
        amount_layout.addWidget(QLabel("–¢–æ—á–Ω–∞—è:"))
        amount_layout.addWidget(self.exact_amount)
        # –î–∏–∞–ø–∞–∑–æ–Ω
        self.min_amount = QDoubleSpinBox()
        self.min_amount.setRange(0, 1000000)
        self.min_amount.setDecimals(8)
        self.min_amount.setValue(10)
        self.min_amount.setEnabled(False)
        amount_layout.addWidget(QLabel("–û—Ç:"))
        
        self.max_amount = QDoubleSpinBox()
        self.max_amount.setRange(0, 1000000)
        self.max_amount.setDecimals(8)
        self.max_amount.setValue(100)
        self.max_amount.setEnabled(False)
        amount_layout.addWidget(QLabel("–î–æ:"))
        amount_layout.addWidget(self.max_amount)
        
        layout.addRow("–°—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤:", amount_layout)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü
        pages_layout = QHBoxLayout()
        
        pages_layout.addWidget(QLabel("–ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü:"))
        self.max_pages = QSpinBox()
        self.max_pages.setRange(1, 1000)
        self.max_pages.setValue(10)
        pages_layout.addWidget(self.max_pages)
        
        pages_layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):"))
        self.delay_seconds = QDoubleSpinBox()
        self.delay_seconds.setRange(0.1, 10)
        self.delay_seconds.setValue(1)
        self.delay_seconds.setSingleStep(0.5)
        pages_layout.addWidget(self.delay_seconds)
        
        layout.addRow("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", pages_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("[SEARCH] –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
        self.start_btn.clicked.connect(self.start_analysis)
        buttons_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        self.stop_btn.clicked.connect(self.stop_analysis)
        buttons_layout.addWidget(self.stop_btn)
        
        self.clear_btn = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_btn.clicked.connect(self.clear_results)
        buttons_layout.addWidget(self.clear_btn)
        
        self.export_btn = QPushButton("[STATS] –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.clicked.connect(self.export_results)
        buttons_layout.addWidget(self.export_btn)
        
        layout.addRow(buttons_layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
        self.radio_exact.toggled.connect(self._toggle_search_mode)
        self.radio_range.toggled.connect(self._toggle_search_mode)
        self.radio_all.toggled.connect(self._toggle_search_mode)
        self.token_combo.currentTextChanged.connect(self._on_token_changed)
        
        return group
    
    def _create_api_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        layout = QVBoxLayout(group)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API
        status_layout = QHBoxLayout()
        status_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å API:"))
        
        self.api_status_label = QLabel("–ì–æ—Ç–æ–≤")
        self.api_status_label.setStyleSheet("font-family: monospace; color: green;")
        status_layout.addWidget(self.api_status_label)
        
        self.refresh_stats_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        self.refresh_stats_btn.clicked.connect(self._update_api_stats)
        status_layout.addWidget(self.refresh_stats_btn)
        
        layout.addLayout(status_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        stats_layout = QHBoxLayout()
        self.requests_label = QLabel("–ó–∞–ø—Ä–æ—Å–æ–≤: 0")
        stats_layout.addWidget(self.requests_label)
        
        self.success_label = QLabel("–£—Å–ø–µ—à–Ω—ã—Ö: 0")
        stats_layout.addWidget(self.success_label)
        
        self.errors_label = QLabel("–û—à–∏–±–æ–∫: 0")
        stats_layout.addWidget(self.errors_label)
        
        layout.addLayout(stats_layout)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
        self._update_api_stats()
        
        return group
    
    def _toggle_search_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞"""
        if self.radio_exact.isChecked():
            self.exact_amount.setEnabled(True)
            self.min_amount.setEnabled(False)
            self.max_amount.setEnabled(False)
        elif self.radio_range.isChecked():
            self.exact_amount.setEnabled(False)
            self.min_amount.setEnabled(True)
            self.max_amount.setEnabled(True)
        else:  # radio_all
            self.exact_amount.setEnabled(False)
            self.min_amount.setEnabled(False)
            self.max_amount.setEnabled(False)
    
    def _on_token_changed(self, token: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        self.custom_token_input.setEnabled(token == "–î—Ä—É–≥–æ–π")
    
    def _update_api_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–µ—Ä–≤–∏—Å–∞)."""
        if not hasattr(self, 'bscscan_service') or self.bscscan_service is None:
            # –û—Ç–º–µ—á–∞–µ–º –≤ UI, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            if hasattr(self, 'api_status_label'):
                self.api_status_label.setText("–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–∞")
                self.api_status_label.setStyleSheet("font-family: monospace; color: orange;")
            return
        try:
            stats = self.bscscan_service.get_stats()  # type: ignore[union-attr]
            rate_limiter_stats = stats.get('rate_limiter', {})
            
            if rate_limiter_stats.get('is_blocked'):
                self.api_status_label.setText("–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                self.api_status_label.setStyleSheet("font-family: monospace; color: red;")
            else:
                self.api_status_label.setText("–ì–æ—Ç–æ–≤")
                self.api_status_label.setStyleSheet("font-family: monospace; color: green;")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
            if hasattr(self, 'requests_label'):
                total = rate_limiter_stats.get('total_requests', 0)
                success = rate_limiter_stats.get('successful_requests', 0)
                errors = rate_limiter_stats.get('failed_requests', 0)
                
                self.requests_label.setText(f"–ó–∞–ø—Ä–æ—Å–æ–≤: {total}")
                self.success_label.setText(f"–£—Å–ø–µ—à–Ω—ã—Ö: {success}")
                self.errors_label.setText(f"–û—à–∏–±–æ–∫: {errors}")
        except Exception as e:  # pylint: disable=broad-except
            logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API: %s", e)
            if hasattr(self, 'api_status_label'):
                self.api_status_label.setText("–û—à–∏–±–∫–∞")
                self.api_status_label.setStyleSheet("font-family: monospace; color: red;")
    
    def start_analysis(self):
        """–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if self.is_searching:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        address = self.address_input.text().strip()
        if not address:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
        if not Web3.is_address(address):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        token_filter = self._get_token_filter()
        search_params = self._get_search_params()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        self.is_searching = True
        self.stop_search_event.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.progress_bar.setValue(0)
        self.search_log.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
        self.search_thread = threading.Thread(
            target=self._analysis_worker,
            args=(address, token_filter, search_params),
            daemon=True
        )
        self.search_thread.start()
        
        self.log(f"[SEARCH] –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞: {address}", "SUCCESS")
    
    def stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
        if self.is_searching:
            self.stop_search_event.set()
            self.log("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞...", "WARNING")
    
    def _get_token_filter(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ–∫–µ–Ω–∞"""
        token = self.token_combo.currentText()
        if token == "PLEX ONE":
            return PLEX_CONTRACT
        elif token == "USDT":
            return USDT_CONTRACT
        elif token == "–î—Ä—É–≥–æ–π":
            custom = self.custom_token_input.text().strip()
            return custom if custom else None
        return None
    
    def _get_search_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        params: Dict[str, Any] = {
            'max_pages': self.max_pages.value(),
            'delay_seconds': self.delay_seconds.value(),
            'mode': 'all'
        }
        
        if self.radio_exact.isChecked():
            params['mode'] = 'exact'
            params['exact_amount'] = self.exact_amount.value()
        elif self.radio_range.isChecked():
            params['mode'] = 'range'
            params['min_amount'] = self.min_amount.value()
            params['max_amount'] = self.max_amount.value()
        
        return params
    
    def _analysis_worker(self, address: str, token_filter: Optional[str], params: Dict[str, Any]):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            self._log_to_search("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
                transactions, sender_counter, sender_details = loop.run_until_complete(
                    self._search_transactions_async(
                        wallet_address=address,
                        token_contract=token_filter,
                        search_params=params
                    )
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ UI
                self.update_table_signal.emit(transactions, sender_counter, sender_details)
                
                self._log_to_search(f"[OK] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            finally:
                loop.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self._log_to_search(f"[ERROR] –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.search_finished_signal.emit()
    
    async def _search_transactions_async(
        self, 
        wallet_address: str, 
        token_contract: Optional[str],
        search_params: Dict[str, Any]
    ) -> Tuple[List[Dict[str, Any]], Dict[str, int], Dict[str, List[Dict[str, Any]]]]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ BscScanService"""
        
        matching_transactions: List[Dict[str, Any]] = []
        sender_counter: Dict[str, int] = {}
        sender_details: Dict[str, List[Dict[str, Any]]] = {}
        
        page = 1
        max_pages = search_params['max_pages']
        delay = search_params['delay_seconds']
        
        while page <= max_pages:
            if self.stop_search_event.is_set():
                self._log_to_search("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            
            self._log_to_search(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}/{max_pages}...")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º BscScanService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                result = await self.bscscan_service.get_transactions(
                    address=wallet_address,
                    token_address=token_contract,
                    page=page,
                    offset=1000,
                    sort='desc'
                )
                
                if not result:
                    self._log_to_search("–ë–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                for tx in result:
                    if self._filter_transaction(tx, wallet_address, search_params):
                        matching_transactions.append(tx)
                        sender = tx.get('from', '').lower()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                        sender_counter[sender] = sender_counter.get(sender, 0) + 1
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏
                        if sender not in sender_details:
                            sender_details[sender] = []
                        sender_details[sender].append({
                            'hash': tx.get('hash', ''),
                            'timestamp': tx.get('timeStamp', ''),
                            'value': float(tx.get('value', 0)) / (10 ** int(tx.get('tokenDecimal', 18))),
                            'token': tx.get('tokenSymbol', ''),
                            'block': tx.get('blockNumber', '')
                        })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int((page / max_pages) * 100)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                QTimer.singleShot(0, lambda p=progress: self.progress_bar.setValue(p))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API
                QTimer.singleShot(0, self._update_api_stats)
                
                page += 1
                await asyncio.sleep(delay)
                
            except Exception as e:
                self._log_to_search(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
                await asyncio.sleep(delay * 2)
        
        return matching_transactions, sender_counter, sender_details
    
    def _filter_transaction(self, tx: Dict[str, Any], wallet_address: str, params: Dict[str, Any]) -> bool:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if tx.get('to', '').lower() != wallet_address.lower():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        mode = params.get('mode', 'all')
        if mode == 'all':
            return True
        
        tx_value = float(tx.get('value', 0)) / (10 ** int(tx.get('tokenDecimal', 18)))
        
        if mode == 'exact':
            exact = params.get('exact_amount', 0)
            return abs(tx_value - exact) < 0.0000001
        elif mode == 'range':
            min_val = params.get('min_amount', 0)
            max_val = params.get('max_amount', 0)
            return min_val <= tx_value <= max_val
        
        return True
    
    def _log_to_search(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        QTimer.singleShot(0, lambda: self.search_log.append(message))
    
    @pyqtSlot(list, dict, dict)
    def _update_search_results(self, transactions: List[Dict[str, Any]], counter: Dict[str, int], details: Dict[str, List[Dict[str, Any]]]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            self.results_table.setRowCount(0)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            sorted_senders: List[Tuple[str, int]] = sorted(counter.items(), key=lambda x: x[1], reverse=True)
            
            for sender, count in sorted_senders:
                row = self.results_table.rowCount()
                self.results_table.insertRow(row)
                
                # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                self.results_table.setItem(row, 0, QTableWidgetItem(sender))
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                self.results_table.setItem(row, 1, QTableWidgetItem(str(count)))
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
                if sender in details:
                    total_sum = float(sum(float(tx.get('value', 0)) for tx in details[sender]))
                    self.results_table.setItem(row, 2, QTableWidgetItem(f"{total_sum:.4f}"))
                    
                    # –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    first_tx = min(details[sender], key=lambda x: float(x.get('timestamp', 0)))
                    first_date = datetime.fromtimestamp(int(first_tx['timestamp'])).strftime('%Y-%m-%d')
                    self.results_table.setItem(row, 3, QTableWidgetItem(first_date))
                    
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    last_tx = max(details[sender], key=lambda x: float(x.get('timestamp', 0)))
                    last_date = datetime.fromtimestamp(int(last_tx['timestamp'])).strftime('%Y-%m-%d')
                    self.results_table.setItem(row, 4, QTableWidgetItem(last_date))
                
                # –°—Ç–∞—Ç—É—Å
                status = "[OK] –ê–∫—Ç–∏–≤–Ω—ã–π" if count > 5 else "[WARN] –û–±—ã—á–Ω—ã–π"
                status_item = QTableWidgetItem(status)
                if count > 10:
                    status_item.setBackground(QColor('#004400'))
                elif count > 5:
                    status_item.setBackground(QColor('#444400'))
                self.results_table.setItem(row, 5, status_item)
            
            self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(sorted_senders)} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π", "SUCCESS")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    @pyqtSlot()
    def _on_search_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        self.is_searching = False
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setValue(100)
        self.log("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", "SUCCESS")
    
    def _show_context_menu(self, position: QPoint) -> None:
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        if self.results_table.currentRow() < 0:
            return
        
        menu = QMenu()
        
        copy_address = menu.addAction("[INFO] –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        open_bscscan = menu.addAction("[WEB] –û—Ç–∫—Ä—ã—Ç—å –≤ BscScan")
        add_to_rewards = menu.addAction("üéÅ –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥—ã")
        
        action = menu.exec_(self.results_table.viewport().mapToGlobal(position))
        
        if action:
            row = self.results_table.currentRow()
            item = self.results_table.item(row, 0)
            address = item.text() if item is not None else ""
            
            if action == copy_address:
                QApplication.clipboard().setText(address)
                self.log(f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {address}", "INFO")
            
            elif action == open_bscscan:
                url = f"https://bscscan.com/address/{address}"
                QDesktopServices.openUrl(QUrl(url))
                self.log(f"–û—Ç–∫—Ä—ã—Ç –≤ BscScan: {address}", "INFO")
            
            elif action == add_to_rewards:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–≥—Ä–∞–¥—ã
                self.log(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–≥—Ä–∞–¥—ã: {address}", "SUCCESS")
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results_table.setRowCount(0)
        self.search_log.clear()
        self.progress_bar.setValue(0)
        self.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã", "INFO")
    
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        if self.results_table.rowCount() == 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
        
        from PyQt5.QtWidgets import QFileDialog
        
        path, _ = QFileDialog.getSaveFileName(
            self, 
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", 
            f"analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV Files (*.csv)"
        )
        
        if path:
            try:
                with open(path, 'w', encoding='utf-8') as f:
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    f.write("Address,TX Count,Total Amount,First TX,Last TX,Status\n")
                    
                    # –î–∞–Ω–Ω—ã–µ
                    for row in range(self.results_table.rowCount()):
                        line = []
                        for col in range(self.results_table.columnCount()):
                            item = self.results_table.item(row, col)
                            if item:
                                line.append(item.text())
                            else:
                                line.append('')
                        f.write(','.join(line) + '\n')
                
                self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {path}", "SUCCESS")
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                self.log(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", "ERROR")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n{str(e)}")