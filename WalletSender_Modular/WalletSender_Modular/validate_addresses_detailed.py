"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
"""

from web3 import Web3
from typing import List, Set, Tuple
import sys
from pathlib import Path

def validate_and_prepare_addresses(file_path: str) -> Tuple[List[str], List[str], List[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    
    Returns:
        Tuple[valid_addresses, invalid_addresses, duplicates]
    """
    valid_addresses = []
    invalid_addresses = []
    duplicates = []
    seen = set()
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return [], [], []
    
    print(f"[INFO] –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for i, line in enumerate(lines, 1):
        address = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not address:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        if not Web3.is_address(address):
            invalid_addresses.append(f"–°—Ç—Ä–æ–∫–∞ {i}: {address}")
            continue
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å (checksum)
        try:
            checksum_address = Web3.to_checksum_address(address)
        except Exception as e:
            invalid_addresses.append(f"–°—Ç—Ä–æ–∫–∞ {i}: {address} - {e}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if checksum_address.lower() in seen:
            duplicates.append(f"–°—Ç—Ä–æ–∫–∞ {i}: {checksum_address}")
        else:
            seen.add(checksum_address.lower())
            valid_addresses.append(checksum_address)
    
    return valid_addresses, invalid_addresses, duplicates


def save_cleaned_addresses(addresses: List[str], output_file: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–∞–π–ª"""
    with open(output_file, 'w', encoding='utf-8') as f:
        for addr in addresses:
            f.write(f"{addr}\n")
    print(f"[OK] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –≤ {output_file}")


def check_special_addresses(addresses: List[str]):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ (—Ç–æ–∫–µ–Ω—ã, –±–∏—Ä–∂–∏ –∏ —Ç.–¥.)"""
    known_addresses = {
        '0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1': 'PLEX ONE Token',
        '0x55d398326f99059ff775485246999027b3197955': 'USDT Token',
        '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d': 'USDC Token',
        '0xe9e7cea3dedca5984780bafc599bd69add087d56': 'BUSD Token',
        '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c': 'WBNB Token',
        '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82': 'CAKE Token',
        '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c': 'BTCB Token',
        '0x2170Ed0880ac9A755fd29B2688956BD959F933F8': 'ETH Token',
        '0xF977814e90dA44bFA03b6295A0616a897441aceC': 'Binance Hot Wallet',
        '0x2FAF487A4414Fe77e2327F0bf4AE2a264a776AD2': 'FTX Exchange',
    }
    
    warnings = []
    for addr in addresses:
        lower_addr = addr.lower()
        for known_addr, description in known_addresses.items():
            if lower_addr == known_addr.lower():
                warnings.append(f"[WARN] {addr} - —ç—Ç–æ {description}")
    
    return warnings


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("[SEARCH] –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    input_file = "01.09_–ì–ï–ù–ê_50.txt"
    output_file = "01.09_–ì–ï–ù–ê_50_validated.txt"
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤
    valid, invalid, duplicates = validate_and_prepare_addresses(input_file)
    
    print(f"\n[STATS] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    print(f"[OK] –í–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(valid)}")
    print(f"[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(invalid)}")
    print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    if invalid:
        print("\n[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
        for addr in invalid:
            print(f"  - {addr}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    if duplicates:
        print("\nüîÑ –î—É–±–ª–∏–∫–∞—Ç—ã:")
        for addr in duplicates:
            print(f"  - {addr}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    warnings = check_special_addresses(valid)
    if warnings:
        print("\n[WARN] –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
        for warning in warnings:
            print(f"  {warning}")
        print("\n‚ùó –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –∞–¥—Ä–µ—Å–∞ –±–∏—Ä–∂ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏!")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        system_addresses = {
            '0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1',  # PLEX
            '0x55d398326f99059ff775485246999027b3197955',  # USDT
            '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',  # USDC
            '0xe9e7cea3dedca5984780bafc599bd69add087d56',  # BUSD
            '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',  # WBNB
            '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',  # CAKE
            '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',  # BTCB
            '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',  # ETH
            '0xF977814e90dA44bFA03b6295A0616a897441aceC',  # Binance
            '0x2FAF487A4414Fe77e2327F0bf4AE2a264a776AD2',  # FTX
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º EOA (externally owned accounts) –∞–¥—Ä–µ—Å–∞
        eoa_addresses = [
            addr for addr in valid 
            if addr.lower() not in [s.lower() for s in system_addresses]
        ]
        
        print(f"\n[INFO] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(eoa_addresses)} –∞–¥—Ä–µ—Å–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ EOA –∞–¥—Ä–µ—Å–∞
        eoa_output = "01.09_–ì–ï–ù–ê_50_eoa_only.txt"
        save_cleaned_addresses(eoa_addresses, eoa_output)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if valid:
            save_cleaned_addresses(valid, output_file)
    
    print("\n[OK] –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if valid:
        print(f"\n[STATS] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö: {len(valid)}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(set(addr.lower() for addr in valid))}")
        print(f"  ‚Ä¢ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: {len(valid) - len(warnings)}")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
