"""
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è WalletSender
–í–µ—Ä—Å–∏—è: 2.4.19
–î–∞—Ç–∞: 11.09.2025

–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –æ—à–∏–±–∫–∏

–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –†–ï–®–ï–ù–ò–Ø:
"""

import sys
import gc
import traceback
import signal
from typing import Any
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QApplication

def install_crash_handler():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    original_excepthook = sys.excepthook
    
    def exception_handler(exctype, value, tb):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        error_msg = ''.join(traceback.format_exception(exctype, value, tb))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
        with open("crash_log.txt", "a", encoding="utf-8") as f:
            from datetime import datetime
            f.write(f"\n\n=== CRASH at {datetime.now()} ===\n")
            f.write(error_msg)
            f.write("=== END CRASH ===\n")
        
        print(f"\n[WARN] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:\n{error_msg}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥
        try:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                               f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π:\n\n{value}\n\n"
                               "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ crash_log.txt")
        except:
            pass
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        original_excepthook(exctype, value, tb)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    sys.excepthook = exception_handler
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
    def signal_handler(sig, frame):
        print(f"\n[WARN] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}")
        with open("crash_log.txt", "a", encoding="utf-8") as f:
            from datetime import datetime
            f.write(f"\n\n=== SIGNAL {sig} at {datetime.now()} ===\n")
            f.write(f"Stack trace:\n{''.join(traceback.format_stack(frame))}\n")
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("[OK] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def install_memory_monitor():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏"""
    
    def check_memory():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        import psutil
        import os
        
        try:
            process = psutil.Process(os.getpid())
            memory_mb = process.memory_info().rss / 1024 / 1024
            
            print(f"[SAVE] –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB")
            
            # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500 MB - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
            if memory_mb > 500:
                print("[WARN] –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞...")
                gc.collect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                new_memory = process.memory_info().rss / 1024 / 1024
                print(f"[SAVE] –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {new_memory:.1f} MB (–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {memory_mb - new_memory:.1f} MB)")
        except:
            pass
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏
    timer = QTimer()
    timer.timeout.connect(check_memory)
    timer.start(30000)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    return timer

def patch_dex_swap_service():
    """–ü–∞—Ç—á –¥–ª—è DexSwapService –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
    
    try:
        from wallet_sender.services.dex_swap_service import DexSwapService
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        original_build_and_send = DexSwapService._build_and_send
        
        def patched_build_and_send(self, fn, tx_params):
            """–ü–∞—Ç—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
            max_retries = 3
            retry_count = 0
            
            while retry_count < max_retries:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    if not self.web3.is_connected():
                        print("[WARN] –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Web3, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        from wallet_sender.core.web3_provider import Web3Provider
                        provider = Web3Provider()
                        if provider.w3.is_connected():
                            self.web3 = provider.w3
                            print("[OK] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                        else:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    result = original_build_and_send(self, fn, tx_params)
                    
                    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫
                    if hasattr(self, '_tx_count'):
                        self._tx_count += 1
                        if self._tx_count >= 5:
                            print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...")
                            gc.collect()
                            self._tx_count = 0
                    else:
                        self._tx_count = 1
                    
                    return result
                    
                except Exception as e:
                    retry_count += 1
                    print(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                    
                    if retry_count >= max_retries:
                        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                        with open("crash_log.txt", "a", encoding="utf-8") as f:
                            from datetime import datetime
                            f.write(f"\n\n=== TX ERROR at {datetime.now()} ===\n")
                            f.write(f"Error: {e}\n")
                            f.write(f"Traceback:\n{traceback.format_exc()}\n")
                        raise
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    import time
                    time.sleep(2 ** retry_count)
            
            raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        DexSwapService._build_and_send = patched_build_and_send
        print("[OK] DexSwapService –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
        
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å DexSwapService: {e}")

def patch_auto_sales_tab():
    """–ü–∞—Ç—á –¥–ª—è AutoSalesTab –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∞—à–µ–π"""
    
    try:
        from wallet_sender.ui.tabs.auto_sales_tab import AutoSalesTab
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if hasattr(AutoSalesTab, 'execute_sale'):
            original_execute = AutoSalesTab.execute_sale
            
            def patched_execute(self):
                """–ü–∞—Ç—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π"""
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                    if not hasattr(self, 'is_running') or not self.is_running:
                        print("[WARN] –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ")
                        return
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    return original_execute(self)
                    
                except Exception as e:
                    print(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    with open("crash_log.txt", "a", encoding="utf-8") as f:
                        from datetime import datetime
                        f.write(f"\n\n=== SALE ERROR at {datetime.now()} ===\n")
                        f.write(f"Error: {e}\n")
                        f.write(f"Traceback:\n{traceback.format_exc()}\n")
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                    if hasattr(self, 'stop_auto_sales'):
                        self.stop_auto_sales()
            
            AutoSalesTab.execute_sale = patched_execute
            print("[OK] AutoSalesTab –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∞—à–µ–π")
            
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å AutoSalesTab: {e}")

def apply_all_patches():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ç—á–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n[CONFIG] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    install_crash_handler()
    
    # –ü–∞—Ç—á–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    patch_dex_swap_service()
    patch_auto_sales_tab()
    
    print("[OK] –í—Å–µ –ø–∞—Ç—á–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã\n")
    
    return install_memory_monitor  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è QApplication

if __name__ == "__main__":
    print("–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ main.py")
    print("–î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ main.py:")
    print("from stability_patch import apply_all_patches")
    print("–ò –≤—ã–∑–æ–≤–∏—Ç–µ apply_all_patches() –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞")
