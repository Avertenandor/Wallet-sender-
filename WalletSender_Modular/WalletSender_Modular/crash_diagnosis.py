#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø—Ä–æ–¥–∞–∂–∏
"""

import sys
import traceback
import asyncio
from pathlib import Path
import signal
import logging

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('crash_diagnosis.log')
    ]
)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        print("[1] üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
        
        from wallet_sender.services.dex_swap_service_async import DexSwapServiceAsync
        from wallet_sender.core.web3_provider import Web3Provider
        from wallet_sender.utils.gas_manager import GasManager
        from wallet_sender.core.nonce_manager import get_nonce_manager
        from wallet_sender.ui.tabs.auto_sales_tab import AutoSalesTab
        
        print("[OK] –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_dex_service_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è DexSwapService"""
    try:
        print("\n[2] [CONFIG] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ DexSwapService...")
        
        from wallet_sender.core.web3_provider import Web3Provider
        from wallet_sender.services.dex_swap_service_async import DexSwapServiceAsync
        
        # –°–æ–∑–¥–∞–µ–º Web3Provider
        web3_provider = Web3Provider()
        web3 = web3_provider.get_web3()
        
        print(f"[OK] Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫: {web3.provider.endpoint_uri}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏!)
        test_private_key = "0x" + "1" * 64  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
        router_address = "0x10ED43C718714eb63d5aA57B78B54704E256024E"  # PancakeSwap V2
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        dex_service = DexSwapServiceAsync(
            web3=web3,
            router_address=router_address,
            private_key=test_private_key,
            custom_gas_price_gwei=0.1
        )
        
        print("[OK] DexSwapServiceAsync —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –ê–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {dex_service.address}")
        print(f"   - –ê–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞: {dex_service.router_address}")
        print(f"   - Nonce manager: {'–ï—Å—Ç—å' if dex_service.nonce_manager else '–ù–µ—Ç'}")
        
        return dex_service, web3
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DexSwapService: {e}")
        traceback.print_exc()
        return None, None

def test_transaction_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        print("\n[3] [TEST] –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        
        dex_service, web3 = test_dex_service_creation()
        if not dex_service:
            return False
            
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è swap
        amount_in = 1000000000000000000  # 1 —Ç–æ–∫–µ–Ω (18 decimals)
        amount_out_min = 0  # –ú–∏–Ω–∏–º—É–º 0 –¥–ª—è —Ç–µ—Å—Ç–∞
        path = [
            "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",  # WBNB
            "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56"   # BUSD
        ]
        
        print(f"   - –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {amount_in}")
        print(f"   - –ú–∏–Ω–∏–º—É–º –≤—ã—Ö–æ–¥–∞: {amount_out_min}")
        print(f"   - –ü—É—Ç—å: {path[0]} -> {path[1]}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å amounts out (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ tx)
        try:
            amounts = dex_service.get_amounts_out(amount_in, path)
            print(f"[OK] getAmountsOut —Ä–∞–±–æ—Ç–∞–µ—Ç: {amounts}")
        except Exception as e:
            print(f"[WARN] getAmountsOut –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        try:
            import time
            deadline = int(time.time()) + 1200
            
            # –ü–æ–ª—É—á–∞–µ–º nonce —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥
            nonce = dex_service._sync_nonce_with_network()
            print(f"[OK] Nonce –ø–æ–ª—É—á–µ–Ω: {nonce}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_params = {
                'from': dex_service.address,
                'nonce': nonce,
                'gas': 300000,
                'gasPrice': dex_service._gas_price(None, 'swap'),
                'chainId': web3.eth.chain_id
            }
            
            # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–Ω–æ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
            fn = dex_service.router.functions.swapExactTokensForTokens(
                amount_in, amount_out_min, path, dex_service.address, deadline
            )
            tx = fn.build_transaction(tx_params)
            print(f"[OK] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   - Gas: {tx['gas']}")
            print(f"   - Gas Price: {tx['gasPrice']} wei")
            print(f"   - Nonce: {tx['nonce']}")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            traceback.print_exc()
            return False
            
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

async def test_async_operations():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        print("\n[4] [MINIMAL] –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç asyncio
        await asyncio.sleep(0.1)
        print("[OK] Asyncio —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        traceback.print_exc()
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    try:
        print("\n[5] üö® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ DexSwapService
        dex_service, web3 = test_dex_service_creation()
        if not dex_service:
            return False
            
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            bad_path = ["0x0000000000000000000000000000000000000000"]
            amounts = dex_service.get_amounts_out(1000, bad_path)
            print(f"[WARN] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –ø—É—Ç–∏: {amounts}")
        except Exception as e:
            print(f"[OK] –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏: {type(e).__name__}")
        
        print("[OK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("[SEARCH] –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–î–ï–ù–ò–Ø WALLETSENDER –ü–†–ò –û–ü–ï–†–ê–¶–ò–Ø–• –ü–†–û–î–ê–ñ–ò")
    print("=" * 65)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    tests = [
        test_imports,
        test_transaction_simulation,
        test_error_handling
    ]
    
    async_tests = [
        test_async_operations
    ]
    
    passed = 0
    total = len(tests) + len(async_tests)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for i, test in enumerate(tests, 1):
        try:
            print(f"\n--- –¢–ï–°–¢ {i}/{total} ---")
            if test():
                passed += 1
                print(f"[OK] –¢–ï–°–¢ {i} –ü–†–û–ô–î–ï–ù")
            else:
                print(f"[ERROR] –¢–ï–°–¢ {i} –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï {i}: {e}")
            traceback.print_exc()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for i, test in enumerate(async_tests, len(tests) + 1):
        try:
            print(f"\n--- –¢–ï–°–¢ {i}/{total} (ASYNC) ---")
            if asyncio.run(test()):
                passed += 1
                print(f"[OK] –¢–ï–°–¢ {i} –ü–†–û–ô–î–ï–ù")
            else:
                print(f"[ERROR] –¢–ï–°–¢ {i} –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï {i}: {e}")
            traceback.print_exc()
    
    # –ò—Ç–æ–≥–∏
    print(f"\n[STATS] –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 35)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ - –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è:")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ UI –ø–æ—Ç–æ–∫–µ")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AsyncIO –≤ Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏") 
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å cleanup —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("   - Race conditions –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏")
    else:
        print("[WARN] –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
        print("[CONFIG] –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–ù–´–• –û–®–ò–ë–û–ö")
    
    print(f"\nüìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: crash_diagnosis.log")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {e}")
        traceback.print_exc()
    finally:
        print("[BYE] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
