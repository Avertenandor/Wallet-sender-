#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π WalletSender v2.4.8
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
current_dir = Path(__file__).parent
src_path = current_dir / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

def test_qt_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Qt –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
    print("[SEARCH] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ Qt...")
    try:
        from wallet_sender.qt_compat import (
            Qt, QApplication, QMainWindow,
            QT_BACKEND, ItemFlags
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        assert hasattr(Qt, 'UserRole'), "UserRole –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(Qt, 'ItemIsEnabled'), "ItemIsEnabled –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(Qt, 'ItemIsSelectable'), "ItemIsSelectable –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(Qt, 'QueuedConnection'), "QueuedConnection –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print(f"[OK] Qt –∞—Ç—Ä–∏–±—É—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"   Backend: {QT_BACKEND}")
        print(f"   UserRole: {Qt.UserRole}")
        print(f"   ItemIsEnabled: {Qt.ItemIsEnabled}")
        print(f"   ItemIsSelectable: {Qt.ItemIsSelectable}")
        print(f"   QueuedConnection: {Qt.QueuedConnection}")
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Qt: {e}")
        return False

def test_api_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API"""
    print("\n[SEARCH] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from wallet_sender.api.etherscan import EtherscanAPI
        from wallet_sender.api.bscscan import BSCScanAPI
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏ chainId
        assert EtherscanAPI.BASE_URL == "https://api.etherscan.io/v2/api", "–ù–µ–≤–µ—Ä–Ω—ã–π BASE_URL"
        assert EtherscanAPI.BSC_CHAIN_ID == 56, "–ù–µ–≤–µ—Ä–Ω—ã–π BSC_CHAIN_ID"
        
        print("[OK] API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Etherscan V2")
        print(f"   URL: {EtherscanAPI.BASE_URL}")
        print(f"   BSC Chain ID: {EtherscanAPI.BSC_CHAIN_ID}")
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ API: {e}")
        return False

def test_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    print("\n[SEARCH] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        from wallet_sender.utils.logger import setup_logger
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.log') as f:
            log_file = f.name
        
        logger = setup_logger("TestLogger", log_file, "DEBUG")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
        test_messages = [
            "–¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: ‚ÇΩ ‚Ç¨ $ ¬•",
            "–≠–º–æ–¥–∑–∏: [START] [OK] [ERROR] [INFO]"
        ]
        
        for msg in test_messages:
            logger.info(msg)
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        with open(log_file, 'r', encoding='utf-8') as f:
            content = f.read()
            for msg in test_messages:
                assert msg in content, f"–°–æ–æ–±—â–µ–Ω–∏–µ '{msg}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö"
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(log_file)
        
        print("[OK] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8")
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("[START] –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô WalletSender v2.4.8")
    print("=" * 60)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results.append(("Qt –∏–º–ø–æ—Ä—Ç—ã", test_qt_imports()))
    results.append(("API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_api_configuration()))
    results.append(("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", test_logging()))
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("[STATS] –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    all_passed = True
    for test_name, passed in results:
        status = "[OK] PASSED" if passed else "[ERROR] FAILED"
        print(f"{test_name}: {status}")
        if not passed:
            all_passed = False
    
    print("=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("[OK] –û–±–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã:")
        print("   1. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Etherscan API V2 - –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("   2. Qt –∞—Ç—Ä–∏–±—É—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("   + –ë–æ–Ω—É—Å: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å UTF-8 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("[WARN] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
    print("=" * 60)
    
    return 0 if all_passed else 1

if __name__ == "__main__":
    sys.exit(main())
