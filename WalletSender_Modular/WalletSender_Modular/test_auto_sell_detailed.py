#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç AutoSellExecutor - –ø–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –ø–∞–¥–µ–Ω–∏—è
–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–∞–∂—É —Å –ø–æ—à–∞–≥–æ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import sys
import traceback
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))

def test_auto_sell_step_by_step():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç AutoSellExecutor —Å –ø–æ—à–∞–≥–æ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ AUTO_SELL - –ü–û–ò–°–ö –ú–ï–°–¢–ê –ü–ê–î–ï–ù–ò–Ø")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç—ã
        print("\n[STEP 1] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        from wallet_sender.core.job_engine import JobEngine, AutoSellExecutor
        from wallet_sender.core.store import get_store
        from wallet_sender.constants import ERC20_ABI
        from web3 import Web3
        from eth_account import Account
        
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        print("\n[STEP 2] –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤...")
        
        engine = JobEngine()
        store = get_store()
        
        # –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ BSC
        test_config = {
            'token_address': '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',  # BUSD BSC
            'sell_percentage': 1,  # –ü—Ä–æ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ 1% –¥–ª—è —Ç–µ—Å—Ç–∞
            'interval': 5,
            'total_sells': 1,
            'seller_keys': ['0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'],  # 32 –±–∞–π—Ç–∞
            'slippage': 5,
            'target_token': 'BNB'
        }
        
        job_id = store.create_job('Test Auto Sell Debug', 'auto_sell', test_config)
        job = store.get_job(job_id)
        
        executor = AutoSellExecutor(job_id, job, engine)
        print("‚úÖ AutoSellExecutor —Å–æ–∑–¥–∞–Ω")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n[STEP 3] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        config_keys = ['token_address', 'sell_percentage', 'interval', 'total_sells', 'seller_keys', 'slippage', 'target_token']
        for key in config_keys:
            value = executor.config.get(key)
            print(f"  {key}: {value} ({type(value).__name__})")
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        print("\n[STEP 4] –ü—Ä–æ–≤–µ—Ä–∫–∞ Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        w3 = engine.rpc_pool.get_client()
        if w3:
            print(f"‚úÖ Web3 –ø–æ–ª—É—á–µ–Ω: {type(w3).__name__}")
            try:
                is_connected = w3.is_connected()
                print(f"  –ü–æ–¥–∫–ª—é—á–µ–Ω: {is_connected}")
                if is_connected:
                    chain_id = w3.eth.chain_id
                    block_number = w3.eth.block_number
                    print(f"  Chain ID: {chain_id}")
                    print(f"  Block: {block_number}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        else:
            print("‚ùå Web3 –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
        
        # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        print("\n[STEP 5] –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞...")
        
        try:
            token_address = executor.config.get('token_address')
            print(f"  Token address: {token_address}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º checksum
            checksum_address = Web3.to_checksum_address(token_address)
            print(f"  Checksum address: {checksum_address}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            token_contract = w3.eth.contract(
                address=checksum_address,
                abi=ERC20_ABI
            )
            print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
                token_name = token_contract.functions.name().call()
                print(f"  Token name: {token_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {e}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            traceback.print_exc()
            return False
        
        # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        print("\n[STEP 6] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        try:
            seller_keys = executor.config.get('seller_keys', [])
            if not seller_keys:
                print("‚ùå –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø—É—Å—Ç")
                return False
                
            seller_key = seller_keys[0]
            print(f"  Seller key: {seller_key[:10]}...{seller_key[-10:]}")
            
            account = Account.from_key(seller_key)
            seller_address = account.address
            print(f"  Seller address: {seller_address}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            traceback.print_exc()
            return False
        
        # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("\n[STEP 7] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —É –∞–¥—Ä–µ—Å–∞
            token_balance = token_contract.functions.balanceOf(seller_address).call()
            print(f"  Token balance: {token_balance}")
            
            if token_balance == 0:
                print("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —Ä–∞–≤–µ–Ω 0 (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞)")
                # –î–ª—è —Ç–µ—Å—Ç–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å
                simulated_balance = 1000 * 10**18  # 1000 —Ç–æ–∫–µ–Ω–æ–≤
                print(f"  –°–∏–º—É–ª–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å: {simulated_balance}")
                
                sell_percentage = executor.config.get('sell_percentage', 100)
                amount_to_sell = int(simulated_balance * sell_percentage / 100)
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {amount_to_sell} ({sell_percentage}%)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            traceback.print_exc()
            return False
        
        # –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ BSC
        print("\n[STEP 8] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ BSC...")
        
        try:
            WBNB_ADDRESS = Web3.to_checksum_address("0xbb4CdB9CBd36B01bD1cBaEF95b79eFD60Bb44cB")
            USDT_ADDRESS = Web3.to_checksum_address("0x55d398326f99059fF775485246999027B3197955")
            PANCAKE_ROUTER = Web3.to_checksum_address("0x10ED43C718714eb63d5aA57B78B54704E256024E")
            
            print(f"  WBNB: {WBNB_ADDRESS}")
            print(f"  USDT: {USDT_ADDRESS}")  
            print(f"  PancakeSwap Router: {PANCAKE_ROUTER}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º path –¥–ª—è –æ–±–º–µ–Ω–∞
            target_token = executor.config.get('target_token', 'BNB')
            if target_token.upper() == 'BNB':
                path = [checksum_address, WBNB_ADDRESS]
            elif target_token.upper() == 'USDT':
                path = [checksum_address, WBNB_ADDRESS, USDT_ADDRESS]
            else:
                print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π target_token: {target_token}")
                return False
                
            print(f"  Swap path: {' ‚Üí '.join(path)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {e}")
            traceback.print_exc()
            return False
        
        # –®–∞–≥ 9: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è router –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        print("\n[STEP 9] –°–æ–∑–¥–∞–Ω–∏–µ router –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
        
        try:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è getAmountsOut
            router_abi = [
                {
                    "name": "getAmountsOut", 
                    "type": "function", 
                    "stateMutability": "view",
                    "inputs": [
                        {"internalType": "uint256", "name": "amountIn", "type": "uint256"},
                        {"internalType": "address[]", "name": "path", "type": "address[]"}
                    ], 
                    "outputs": [{"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}]
                }
            ]
            
            router_contract = w3.eth.contract(address=PANCAKE_ROUTER, abi=router_abi)
            print("‚úÖ Router –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å getAmountsOut —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if 'amount_to_sell' in locals():
                try:
                    amounts_out = router_contract.functions.getAmountsOut(amount_to_sell, path).call()
                    print(f"  getAmountsOut result: {amounts_out}")
                    
                    expected_out = amounts_out[-1]
                    slippage = executor.config.get('slippage', 5)
                    min_out = int(expected_out * (100 - slippage) / 100)
                    print(f"  Expected out: {expected_out}")
                    print(f"  Min out (with {slippage}% slippage): {min_out}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è getAmountsOut failed (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö): {e}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è router –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            traceback.print_exc()
            return False
        
        # –®–∞–≥ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ nonce manager
        print("\n[STEP 10] –ü—Ä–æ–≤–µ—Ä–∫–∞ nonce manager...")
        
        try:
            nonce_manager = engine.nonce_manager
            print(f"  Nonce manager: {type(nonce_manager).__name__}")
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å nonce (–Ω–µ –±—É–¥–µ–º –∑–∞–≤–µ—Ä—à–∞—Ç—å)
            # ticket = nonce_manager.reserve(seller_address)
            # print(f"  Nonce ticket reserved: {ticket.nonce}")
            # nonce_manager.fail(ticket, "Test cancelled")
            print("‚úÖ Nonce manager –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å nonce manager: {e}")
            traceback.print_exc()
            return False
        
        print("\n" + "=" * 60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ AutoSellExecutor —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        print("‚úÖ Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–∏–º–∞")
        print("")
        print("üîç –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –ø–∞–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å executor.run() –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π —Å—Ä–µ–¥–µ")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –º–æ–∫–∏")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        traceback.print_exc()
        return False

def test_executor_run_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AutoSellExecutor.run()"""
    print("\n" + "üöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø EXECUTOR.RUN()")
    print("=" * 50)
    
    try:
        from wallet_sender.core.job_engine import JobEngine, AutoSellExecutor
        from wallet_sender.core.store import get_store
        
        # –°–æ–∑–¥–∞–µ–º executor
        engine = JobEngine()  
        store = get_store()
        
        test_config = {
            'token_address': '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',  # BUSD BSC
            'sell_percentage': 1,
            'interval': 1,
            'total_sells': 1,
            'seller_keys': ['0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'],
            'slippage': 5,
            'target_token': 'BNB'
        }
        
        job_id = store.create_job('Test Run Simulation', 'auto_sell', test_config)
        job = store.get_job(job_id)
        executor = AutoSellExecutor(job_id, job, engine)
        
        print("‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ run()...")
        
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º executor.run(), –∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –µ–≥–æ —à–∞–≥–∏
        print("1. ‚úÖ start_time —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("2. ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print("3. ‚úÖ –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        print("4. ‚ö†Ô∏è –¶–∏–∫–ª –ø—Ä–æ–¥–∞–∂: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
        
        # –ó–¥–µ—Å—å –±—ã –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–∞–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        print("5. üîç Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        w3 = engine.rpc_pool.get_client()
        if w3:
            print("   ‚úÖ Web3 –ø–æ–ª—É—á–µ–Ω")
        else:
            print("   ‚ùå Web3 –Ω–µ –ø–æ–ª—É—á–µ–Ω - –ó–î–ï–°–¨ –£–ü–ê–î–ï–¢")
            return False
            
        print("6. üîç –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        from eth_account import Account
        try:
            account = Account.from_key(test_config['seller_keys'][0])
            print(f"   ‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {account.address}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e} - –ó–î–ï–°–¨ –£–ü–ê–î–ï–¢")
            return False
            
        print("7. üîç –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞...")
        from web3 import Web3
        from wallet_sender.constants import ERC20_ABI
        try:
            token_contract = w3.eth.contract(
                address=Web3.to_checksum_address(test_config['token_address']),
                abi=ERC20_ABI
            )
            print("   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e} - –ó–î–ï–°–¨ –£–ü–ê–î–ï–¢")
            return False
            
        print("")
        print("üéØ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("üí° AutoSellExecutor –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üîç –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   - –†–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –≤—ã–∑–æ–≤–∞—Ö")
        print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –≥–∞–∑–∞/—Ç–æ–∫–µ–Ω–æ–≤")
        print("   - –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
        print("   - –û—à–∏–±–∫–∞—Ö –≤ approve/swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –°–ò–ú–£–õ–Ø–¶–ò–ò: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê AUTO_SELL")
    print("–î–∞—Ç–∞:", time.strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_ok = test_auto_sell_step_by_step()
    test2_ok = test_executor_run_simulation()
    
    print("\n" + "=" * 60)
    if test1_ok and test2_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üí° AutoSellExecutor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ")
        print("üîç –î–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω—É–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•!")
        print("üîß –ù–∞–π–¥–µ–Ω—ã –º–µ—Å—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print("\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
