"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ 01.09_–ì–ï–ù–ê_50.txt
"""

import sys
from pathlib import Path
from web3 import Web3


def validate_and_normalize_addresses(file_path: str):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–¥—Ä–µ—Å–∞–º–∏
    """
    print("=" * 60)
    print("–í–ê–õ–ò–î–ê–¶–ò–Ø –ê–î–†–ï–°–û–í")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    path = Path(file_path)
    if not path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print(f"üìÇ –§–∞–π–ª: {file_path}")
    
    with open(path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    print(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
    addresses = []
    invalid = []
    duplicates = []
    seen = set()
    
    for i, line in enumerate(lines, 1):
        addr = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not addr:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if not addr.startswith('0x'):
            invalid.append((i, addr, "–ù–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x"))
            continue
        
        if len(addr) != 42:
            invalid.append((i, addr, f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞: {len(addr)} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 42)"))
            continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Web3
        if not Web3.is_address(addr):
            invalid.append((i, addr, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ Web3"))
            continue
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ checksum —Ñ–æ—Ä–º–∞—Ç—É
        normalized = Web3.to_checksum_address(addr)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if normalized.lower() in seen:
            duplicates.append((i, addr, normalized))
        else:
            seen.add(normalized.lower())
            addresses.append(normalized)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 60)
    
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(addresses)}")
    print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(invalid)}")
    print(f"‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
    
    # –î–µ—Ç–∞–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    if invalid:
        print("\n‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –ê–î–†–ï–°–ê:")
        for line_num, addr, reason in invalid[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  –°—Ç—Ä–æ–∫–∞ {line_num}: {addr[:20]}... - {reason}")
        if len(invalid) > 10:
            print(f"  ... –∏ –µ—â–µ {len(invalid) - 10} –∞–¥—Ä–µ—Å–æ–≤")
    
    # –î–µ—Ç–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if duplicates:
        print("\n‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢–´:")
        for line_num, addr, normalized in duplicates[:10]:
            print(f"  –°—Ç—Ä–æ–∫–∞ {line_num}: {addr[:10]}... ‚Üí {normalized[:10]}...")
        if len(duplicates) > 10:
            print(f"  ... –∏ –µ—â–µ {len(duplicates) - 10} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    known_contracts = {
        '0xdf179b6cadbc61ffd86a3d2e55f6d6e083ade6c1': 'PLEX ONE Token',
        '0x55d398326f99059ff775485246999027b3197955': 'USDT Token',
        '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d': 'USDC Token',
        '0xe9e7cea3dedca5984780bafc599bd69add087d56': 'BUSD Token',
        '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c': 'WBNB Token',
        '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82': 'CAKE Token',
        '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c': 'BTCB Token',
        '0x2170Ed0880ac9A755fd29B2688956BD959F933F8': 'ETH Token'
    }
    
    found_contracts = []
    for addr in addresses:
        if addr.lower() in known_contracts:
            found_contracts.append((addr, known_contracts[addr.lower()]))
    
    if found_contracts:
        print("\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–û–ù–¢–†–ê–ö–¢–´ –¢–û–ö–ï–ù–û–í:")
        for addr, name in found_contracts:
            print(f"  {addr[:10]}... - {name}")
        print("  –≠—Ç–∏ –∞–¥—Ä–µ—Å–∞ —è–≤–ª—è—é—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤, –∞ –Ω–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏!")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    if addresses:
        output_file = path.parent / f"{path.stem}_normalized.txt"
        with open(output_file, 'w', encoding='utf-8') as f:
            for addr in addresses:
                f.write(addr + '\n')
        
        print(f"\n‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
        print(f"   {output_file}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ EOA (–Ω–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)
        eoa_addresses = [addr for addr in addresses 
                        if addr.lower() not in known_contracts]
        
        if eoa_addresses:
            eoa_file = path.parent / f"{path.stem}_eoa_only.txt"
            with open(eoa_file, 'w', encoding='utf-8') as f:
                for addr in eoa_addresses:
                    f.write(addr + '\n')
            
            print(f"\n‚úÖ EOA –∞–¥—Ä–µ—Å–∞ (–±–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
            print(f"   {eoa_file}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(eoa_addresses)}")
    
    print("\n" + "=" * 60)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)
    
    if found_contracts:
        print("‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    if duplicates:
        print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    
    if not invalid and not duplicates and not found_contracts:
        print("‚úÖ –í—Å–µ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    return {
        'total': len(lines),
        'valid': len(addresses),
        'invalid': len(invalid),
        'duplicates': len(duplicates),
        'contracts': len(found_contracts),
        'eoa': len(addresses) - len(found_contracts)
    }


if __name__ == "__main__":
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = "01.09_–ì–ï–ù–ê_50.txt"
    
    # –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    stats = validate_and_normalize_addresses(file_path)
    
    if stats:
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total']}")
        print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {stats['valid']}")
        print(f"   –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {stats['invalid']}")
        print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats['duplicates']}")
        print(f"   –ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {stats['contracts']}")
        print(f"   EOA –∫–æ—à–µ–ª—å–∫–æ–≤: {stats['eoa']}")
